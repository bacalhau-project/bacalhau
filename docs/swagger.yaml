basePath: /
definitions:
  computenode.ActiveJob:
    properties:
      CapacityRequirements:
        $ref: '#/definitions/model.ResourceUsageData'
      ShardID:
        type: string
      State:
        type: string
    type: object
  model.BuildVersionInfo:
    properties:
      builddate:
        example: "2022-11-16T14:03:31Z"
        type: string
      gitcommit:
        example: d612b63108f2b5ce1ab2b9e02444eb1dac1d922d
        type: string
      gitversion:
        example: v0.3.12
        type: string
      goarch:
        example: amd64
        type: string
      goos:
        example: linux
        type: string
      major:
        example: "0"
        type: string
      minor:
        example: "3"
        type: string
    type: object
  model.Deal:
    properties:
      Concurrency:
        description: |-
          The maximum number of concurrent compute node bids that will be
          accepted by the requester node on behalf of the client.
        type: integer
      Confidence:
        description: |-
          The number of nodes that must agree on a verification result
          this is used by the different verifiers - for example the
          deterministic verifier requires the winning group size
          to be at least this size
        type: integer
      MinBids:
        description: |-
          The minimum number of bids that must be received before the Requester
          node will randomly accept concurrency-many of them. This allows the
          Requester node to get some level of guarantee that the execution of the
          jobs will be spread evenly across the network (assuming that this value
          is some large proportion of the size of the network).
        type: integer
    type: object
  model.Job:
    properties:
      APIVersion:
        example: V1beta1
        type: string
      ClientID:
        description: The ID of the client that created this job.
        example: ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51
        type: string
      CreatedAt:
        description: Time the job was submitted to the bacalhau network.
        example: "2022-11-17T13:29:01.871140291Z"
        type: string
      Deal:
        $ref: '#/definitions/model.Deal'
        description: The deal the client has made, such as which job bids they have
          accepted.
      ExecutionPlan:
        $ref: '#/definitions/model.JobExecutionPlan'
        description: how will this job be executed by nodes on the network
      ID:
        description: The unique global ID of this job in the bacalhau network.
        example: 92d5d4ee-3765-4f78-8353-623f5f26df08
        type: string
      JobEvents:
        description: All events associated with the job
        items:
          $ref: '#/definitions/model.JobEvent'
        type: array
      JobState:
        $ref: '#/definitions/model.JobState'
        description: The current state of the job
      LocalJobEvents:
        description: All local events associated with the job
        items:
          $ref: '#/definitions/model.JobLocalEvent'
        type: array
      RequesterNodeID:
        description: The ID of the requester node that owns this job.
        example: QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF
        type: string
      RequesterPublicKey:
        description: |-
          The public key of the Requester node that created this job
          This can be used to encrypt messages back to the creator
        items:
          type: integer
        type: array
      Spec:
        $ref: '#/definitions/model.Spec'
        description: The specification of this job.
    type: object
  model.JobCreatePayload:
    properties:
      ClientID:
        description: the id of the client that is submitting the job
        type: string
      Context:
        description: |-
          Optional base64-encoded tar file that will be pinned to IPFS and
          mounted as storage for the job. Not part of the spec so we don't
          flood the transport layer with it (potentially very large).
        type: string
      Job:
        $ref: '#/definitions/model.Job'
        description: 'The job specification:'
    required:
    - ClientID
    - Job
    type: object
  model.JobEvent:
    properties:
      APIVersion:
        description: APIVersion of the Job
        example: V1beta1
        type: string
      ClientID:
        description: optional clientID if this is an externally triggered event (like
          create job)
        example: ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51
        type: string
      Deal:
        $ref: '#/definitions/model.Deal'
        description: this is only defined in "update_deal" events
      EventName:
        type: integer
      EventTime:
        example: "2022-11-17T13:32:55.756658941Z"
        type: string
      JobExecutionPlan:
        $ref: '#/definitions/model.JobExecutionPlan'
        description: this is only defined in "create" events
      JobID:
        example: 9304c616-291f-41ad-b862-54e133c0149e
        type: string
      PublishedResult:
        $ref: '#/definitions/model.StorageSpec'
      RunOutput:
        $ref: '#/definitions/model.RunCommandResult'
        description: RunOutput of the job
      SenderPublicKey:
        items:
          type: integer
        type: array
      ShardIndex:
        description: what shard is this event for
        type: integer
      SourceNodeID:
        description: the node that emitted this event
        example: QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF
        type: string
      Spec:
        $ref: '#/definitions/model.Spec'
        description: this is only defined in "create" events
      Status:
        example: 'Got results proposal of length: 0'
        type: string
      TargetNodeID:
        description: |-
          the node that this event is for
          e.g. "AcceptJobBid" was emitted by Requester but it targeting compute node
        example: QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL
        type: string
      VerificationProposal:
        items:
          type: integer
        type: array
      VerificationResult:
        $ref: '#/definitions/model.VerificationResult'
    type: object
  model.JobExecutionPlan:
    properties:
      ShardsTotal:
        description: |-
          how many shards are there in total for this job
          we are expecting this number x concurrency total
          JobShardState objects for this job
        type: integer
    type: object
  model.JobLocalEvent:
    properties:
      EventName:
        type: integer
      JobID:
        type: string
      ShardIndex:
        type: integer
      TargetNodeID:
        type: string
    type: object
  model.JobNodeState:
    properties:
      Shards:
        additionalProperties:
          $ref: '#/definitions/model.JobShardState'
        type: object
    type: object
  model.JobShardState:
    properties:
      NodeId:
        description: which node is running this shard
        type: string
      PublishedResults:
        $ref: '#/definitions/model.StorageSpec'
      RunOutput:
        $ref: '#/definitions/model.RunCommandResult'
        description: RunOutput of the job
      ShardIndex:
        description: what shard is this we are running
        type: integer
      State:
        description: what is the state of the shard on this node
        type: integer
      Status:
        description: an arbitrary status message
        type: string
      VerificationProposal:
        description: |-
          the proposed results for this shard
          this will be resolved by the verifier somehow
        items:
          type: integer
        type: array
      VerificationResult:
        $ref: '#/definitions/model.VerificationResult'
    type: object
  model.JobShardingConfig:
    properties:
      BatchSize:
        description: |-
          how many "items" are to be processed in each shard
          we first apply the glob pattern which will result in a flat list of items
          this number decides how to group that flat list into actual shards run by compute nodes
        type: integer
      GlobPattern:
        description: |-
          divide the inputs up into the smallest possible unit
          for example /* would mean "all top level files or folders"
          this being an empty string means "no sharding"
        type: string
      GlobPatternBasePath:
        description: |-
          when using multiple input volumes
          what path do we treat as the common mount path to apply the glob pattern to
        type: string
    type: object
  model.JobSpecDocker:
    properties:
      Entrypoint:
        description: optionally override the default entrypoint
        items:
          type: string
        type: array
      EnvironmentVariables:
        description: a map of env to run the container with
        items:
          type: string
        type: array
      Image:
        description: this should be pullable by docker
        type: string
      WorkingDirectory:
        description: working directory inside the container
        type: string
    type: object
  model.JobSpecLanguage:
    properties:
      Command:
        description: optional program specified on commandline, like python -c "print(1+1)"
        type: string
      DeterministicExecution:
        description: must this job be run in a deterministic context?
        type: boolean
      JobContext:
        $ref: '#/definitions/model.StorageSpec'
        description: context is a tar file stored in ipfs, containing e.g. source
          code and requirements
      Language:
        description: e.g. python
        type: string
      LanguageVersion:
        description: e.g. 3.8
        type: string
      ProgramPath:
        description: optional program path relative to the context dir. one of Command
          or ProgramPath must be specified
        type: string
      RequirementsPath:
        description: optional requirements.txt (or equivalent) path relative to the
          context dir
        type: string
    type: object
  model.JobSpecWasm:
    properties:
      EntryPoint:
        description: |-
          The name of the function in the EntryModule to call to run the job. For
          WASI jobs, this will always be `_start`, but jobs can choose to call
          other WASM functions instead. The EntryPoint must be a zero-parameter
          zero-result function.
        type: string
      EnvironmentVariables:
        additionalProperties:
          type: string
        description: The variables available in the environment of the running program.
        type: object
      ImportModules:
        description: |-
          TODO #880: Other WASM modules whose exports will be available as imports
          to the EntryModule.
        items:
          $ref: '#/definitions/model.StorageSpec'
        type: array
      Parameters:
        description: The arguments supplied to the program (i.e. as ARGV).
        items:
          type: string
        type: array
    type: object
  model.JobState:
    properties:
      Nodes:
        additionalProperties:
          $ref: '#/definitions/model.JobNodeState'
        type: object
    type: object
  model.PublishedResult:
    properties:
      Data:
        $ref: '#/definitions/model.StorageSpec'
      NodeID:
        type: string
      ShardIndex:
        type: integer
    type: object
  model.ResourceUsageConfig:
    properties:
      CPU:
        description: https://github.com/BTBurke/k8sresource string
        type: string
      Disk:
        type: string
      GPU:
        description: unsigned integer string
        type: string
      Memory:
        description: github.com/c2h5oh/datasize string
        type: string
    type: object
  model.ResourceUsageData:
    properties:
      CPU:
        description: cpu units
        example: 9.600000000000001
        type: number
      Disk:
        description: bytes
        example: 212663867801
        type: integer
      GPU:
        example: 1
        type: integer
      Memory:
        description: bytes
        example: 27487790694
        type: integer
    type: object
  model.RunCommandResult:
    properties:
      exitCode:
        description: exit code of the run.
        type: integer
      runnerError:
        description: Runner error
        type: string
      stderr:
        description: stderr of the run.
        type: string
      stderrtruncated:
        description: bool describing if stderr was truncated
        type: boolean
      stdout:
        description: stdout of the run. Yaml provided for `describe` output
        type: string
      stdouttruncated:
        description: bool describing if stdout was truncated
        type: boolean
    type: object
  model.Spec:
    properties:
      Annotations:
        description: Annotations on the job - could be user or machine assigned
        items:
          type: string
        type: array
      Contexts:
        description: |-
          Input volumes that will not be sharded
          for example to upload code into a base image
          every shard will get the full range of context volumes
        items:
          $ref: '#/definitions/model.StorageSpec'
        type: array
      DoNotTrack:
        description: Do not track specified by the client
        type: boolean
      Docker:
        $ref: '#/definitions/model.JobSpecDocker'
        description: executor specific data
      Engine:
        description: e.g. docker or language
        type: integer
      Language:
        $ref: '#/definitions/model.JobSpecLanguage'
      Publisher:
        description: there can be multiple publishers for the job
        type: integer
      Resources:
        $ref: '#/definitions/model.ResourceUsageConfig'
        description: the compute (cpy, ram) resources this job requires
      Sharding:
        $ref: '#/definitions/model.JobShardingConfig'
        description: |-
          the sharding config for this job
          describes how the job might be split up into parallel shards
      Timeout:
        description: |-
          How long a job can run in seconds before it is killed.
          This includes the time required to run, verify and publish results
        type: number
      Verifier:
        type: integer
      Wasm:
        $ref: '#/definitions/model.JobSpecWasm'
      inputs:
        description: |-
          the data volumes we will read in the job
          for example "read this ipfs cid"
          TODO: #667 Replace with "Inputs", "Outputs" (note the caps) for yaml/json when we update the n.js file
        items:
          $ref: '#/definitions/model.StorageSpec'
        type: array
      outputs:
        description: |-
          the data volumes we will write in the job
          for example "write the results to ipfs"
        items:
          $ref: '#/definitions/model.StorageSpec'
        type: array
    type: object
  model.StorageSpec:
    properties:
      CID:
        description: |-
          The unique ID of the data, where it makes sense (for example, in an
          IPFS storage spec this will be the data's CID).
          NOTE: The below is capitalized to match IPFS & IPLD (even though it's out of golang fmt)
        example: QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe
        type: string
      Metadata:
        additionalProperties:
          type: string
        description: Additional properties specific to each driver
        type: object
      Name:
        description: Name of the spec's data, for reference.
        example: job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL
        type: string
      StorageSource:
        description: |-
          StorageSource is the abstract source of the data. E.g. a storage source
          might be a URL download, but doesn't specify how the execution engine
          does the download or what it will do with the downloaded data.
        type: integer
      URL:
        description: Source URL of the data
        type: string
      path:
        description: |-
          The path that the spec's data should be mounted on, where it makes
          sense (for example, in a Docker storage spec this will be a filesystem
          path).
          TODO: #668 Replace with "Path" (note the caps) for yaml/json when we update the n.js file
        type: string
    type: object
  model.VerificationResult:
    properties:
      Complete:
        type: boolean
      Result:
        type: boolean
    type: object
  publicapi.debugResponse:
    properties:
      AvailableComputeCapacity:
        $ref: '#/definitions/model.ResourceUsageData'
      ComputeJobs:
        items:
          $ref: '#/definitions/computenode.ActiveJob'
        type: array
      RequesterJobs:
        items:
          $ref: '#/definitions/requesternode.ActiveJob'
        type: array
    type: object
  publicapi.eventsRequest:
    properties:
      client_id:
        example: ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51
        type: string
      job_id:
        example: 9304c616-291f-41ad-b862-54e133c0149e
        type: string
    type: object
  publicapi.eventsResponse:
    properties:
      events:
        items:
          $ref: '#/definitions/model.JobEvent'
        type: array
    type: object
  publicapi.listRequest:
    properties:
      client_id:
        example: ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51
        type: string
      id:
        example: 9304c616-291f-41ad-b862-54e133c0149e
        type: string
      max_jobs:
        example: 10
        type: integer
      return_all:
        type: boolean
      sort_by:
        example: created_at
        type: string
      sort_reverse:
        type: boolean
    type: object
  publicapi.listResponse:
    properties:
      jobs:
        items:
          $ref: '#/definitions/model.Job'
        type: array
    type: object
  publicapi.localEventsRequest:
    properties:
      client_id:
        type: string
      job_id:
        type: string
    type: object
  publicapi.localEventsResponse:
    properties:
      localEvents:
        items:
          $ref: '#/definitions/model.JobLocalEvent'
        type: array
    type: object
  publicapi.resultsResponse:
    properties:
      results:
        items:
          $ref: '#/definitions/model.PublishedResult'
        type: array
    type: object
  publicapi.stateRequest:
    properties:
      client_id:
        example: ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51
        type: string
      job_id:
        example: 9304c616-291f-41ad-b862-54e133c0149e
        type: string
    type: object
  publicapi.stateResponse:
    properties:
      state:
        $ref: '#/definitions/model.JobState'
    type: object
  publicapi.submitRequest:
    properties:
      client_public_key:
        description: 'The base64-encoded public key of the client:'
        type: string
      data:
        $ref: '#/definitions/model.JobCreatePayload'
        description: 'The data needed to submit and run a job on the network:'
      signature:
        description: 'A base64-encoded signature of the data, signed by the client:'
        type: string
    required:
    - client_public_key
    - data
    - signature
    type: object
  publicapi.submitResponse:
    properties:
      job:
        $ref: '#/definitions/model.Job'
    type: object
  publicapi.versionRequest:
    properties:
      client_id:
        example: ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51
        type: string
    type: object
  publicapi.versionResponse:
    properties:
      build_version_info:
        $ref: '#/definitions/model.BuildVersionInfo'
    type: object
  requesternode.ActiveJob:
    properties:
      BiddingNodesCount:
        type: integer
      CompletedNodesCount:
        type: integer
      ShardID:
        type: string
      State:
        type: string
    type: object
  types.FreeSpace:
    properties:
      IPFSMount:
        $ref: '#/definitions/types.MountStatus'
      root:
        $ref: '#/definitions/types.MountStatus'
      tmp:
        $ref: '#/definitions/types.MountStatus'
    type: object
  types.HealthInfo:
    properties:
      FreeSpace:
        $ref: '#/definitions/types.FreeSpace'
    type: object
  types.MountStatus:
    properties:
      All:
        type: integer
      Free:
        type: integer
      Used:
        type: integer
    type: object
host: bootstrap.production.bacalhau.org:1234
info:
  contact:
    email: team@bacalhau.org
    name: Bacalhau Team
    url: https://github.com/filecoin-project/bacalhau
  description: This page is the reference of the Bacalhau REST API. Project docs are
    available at https://docs.bacalhau.org/. Find more information about Bacalhau
    at https://github.com/filecoin-project/bacalhau.
  license:
    name: Apache 2.0
    url: https://github.com/filecoin-project/bacalhau/blob/main/LICENSE
  title: Bacalhau API blaaa123456711112
paths:
  /debug:
    get:
      operationId: apiServer/debug
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/publicapi.debugResponse'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Returns debug information on what the current node is doing.
      tags:
      - Health
  /events:
    post:
      consumes:
      - application/json
      description: |-
        Events (e.g. Created, Bid, BidAccepted, ..., ResultsAccepted, ResultsPublished) are useful to track the progress of a job.

        Example response (truncated):
        ```json
        {
          "events": [
            {
              "APIVersion": "V1beta1",
              "JobID": "9304c616-291f-41ad-b862-54e133c0149e",
              "ClientID": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51",
              "SourceNodeID": "QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF",
              "EventName": "Created",
              "Spec": {
                "Engine": "Docker",
                "Verifier": "Noop",
                "Publisher": "Estuary",
                "Docker": {
                  "Image": "ubuntu",
                  "Entrypoint": [
                    "date"
                  ]
                },
                "Language": {
                  "JobContext": {}
                },
                "Wasm": {},
                "Resources": {
                  "GPU": ""
                },
                "Timeout": 1800,
                "outputs": [
                  {
                    "StorageSource": "IPFS",
                    "Name": "outputs",
                    "path": "/outputs"
                  }
                ],
                "Sharding": {
                  "BatchSize": 1,
                  "GlobPatternBasePath": "/inputs"
                }
              },
              "JobExecutionPlan": {
                "ShardsTotal": 1
              },
              "Deal": {
                "Concurrency": 1
              },
              "VerificationResult": {},
              "PublishedResult": {},
              "EventTime": "2022-11-17T13:32:55.331375351Z",
              "SenderPublicKey": "..."
            },
            ...
            {
              "JobID": "9304c616-291f-41ad-b862-54e133c0149e",
              "SourceNodeID": "QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF",
              "TargetNodeID": "QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
              "EventName": "ResultsAccepted",
              "Spec": {
                "Docker": {},
                "Language": {
                  "JobContext": {}
                },
                "Wasm": {},
                "Resources": {
                  "GPU": ""
                },
                "Sharding": {}
              },
              "JobExecutionPlan": {},
              "Deal": {},
              "VerificationResult": {
                "Complete": true,
                "Result": true
              },
              "PublishedResult": {},
              "EventTime": "2022-11-17T13:32:55.707825569Z",
              "SenderPublicKey": "..."
            },
            {
              "JobID": "9304c616-291f-41ad-b862-54e133c0149e",
              "SourceNodeID": "QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
              "EventName": "ResultsPublished",
              "Spec": {
                "Docker": {},
                "Language": {
                  "JobContext": {}
                },
                "Wasm": {},
                "Resources": {
                  "GPU": ""
                },
                "Sharding": {}
              },
              "JobExecutionPlan": {},
              "Deal": {},
              "VerificationResult": {},
              "PublishedResult": {
                "StorageSource": "IPFS",
                "Name": "job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
                "CID": "QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe"
              },
              "EventTime": "2022-11-17T13:32:55.756658941Z",
              "SenderPublicKey": "..."
            }
          ]
        }
        ```
      operationId: pkg/publicapi/events
      parameters:
      - description: 'Request must specify a `client_id`. To retrieve your `client_id`,
          you can do the following: (1) submit a dummy job to Bacalhau (or use one
          you created before), (2) run `bacalhau describe <job-id>` and fetch the
          `ClientID` field.'
        in: body
        name: eventsRequest
        required: true
        schema:
          $ref: '#/definitions/publicapi.eventsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/publicapi.eventsResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Returns the events related to the job-id passed in the body payload.
        Useful for troubleshooting.
      tags:
      - Job
  /healthz:
    get:
      operationId: apiServer/healthz
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.HealthInfo'
      tags:
      - Health
  /id:
    get:
      operationId: apiServer/id
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Returns the id of the host node.
      tags:
      - Misc
  /list:
    post:
      consumes:
      - application/json
      description: |-
        Returns the first (sorted) #`max_jobs` jobs that belong to the `client_id` passed in the body payload (by default).
        If `return_all` is set to true, it returns all jobs on the Bacalhau network.

        If `id` is set, it returns only the job with that ID.

        Example response:
        ```json
        {
          "jobs": [
            {
              "APIVersion": "V1beta1",
              "ID": "9304c616-291f-41ad-b862-54e133c0149e",
              "RequesterNodeID": "QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF",
              "RequesterPublicKey": "...",
              "ClientID": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51",
              "Spec": {
                "Engine": "Docker",
                "Verifier": "Noop",
                "Publisher": "Estuary",
                "Docker": {
                  "Image": "ubuntu",
                  "Entrypoint": [
                    "date"
                  ]
                },
                "Language": {
                  "JobContext": {}
                },
                "Wasm": {},
                "Resources": {
                  "GPU": ""
                },
                "Timeout": 1800,
                "outputs": [
                  {
                    "StorageSource": "IPFS",
                    "Name": "outputs",
                    "path": "/outputs"
                  }
                ],
                "Sharding": {
                  "BatchSize": 1,
                  "GlobPatternBasePath": "/inputs"
                }
              },
              "Deal": {
                "Concurrency": 1
              },
              "ExecutionPlan": {
                "ShardsTotal": 1
              },
              "CreatedAt": "2022-11-17T13:32:55.33837275Z",
              "JobState": {
                "Nodes": {
                  "QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86": {
                    "Shards": {
                      "0": {
                        "NodeId": "QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86",
                        "State": "Cancelled",
                        "VerificationResult": {},
                        "PublishedResults": {}
                      }
                    }
                  },
                  "QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3": {
                    "Shards": {
                      "0": {
                        "NodeId": "QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3",
                        "State": "Cancelled",
                        "VerificationResult": {},
                        "PublishedResults": {}
                      }
                    }
                  },
                  "QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL": {
                    "Shards": {
                      "0": {
                        "NodeId": "QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
                        "State": "Completed",
                        "Status": "Got results proposal of length: 0",
                        "VerificationResult": {
                          "Complete": true,
                          "Result": true
                        },
                        "PublishedResults": {
                          "StorageSource": "IPFS",
                          "Name": "job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
                          "CID": "QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe"
                        },
                        "RunOutput": {
                          "stdout": "Thu Nov 17 13:32:55 UTC 2022\n",
                          "stdouttruncated": false,
                          "stderr": "",
                          "stderrtruncated": false,
                          "exitCode": 0,
                          "runnerError": ""
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "APIVersion": "V1beta1",
              "ID": "92d5d4ee-3765-4f78-8353-623f5f26df08",
              "RequesterNodeID": "QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF",
              "RequesterPublicKey": "...",
              "ClientID": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51",
              "Spec": {
                "Engine": "Docker",
                "Verifier": "Noop",
                "Publisher": "Estuary",
                "Docker": {
                  "Image": "ubuntu",
                  "Entrypoint": [
                    "sleep",
                    "4"
                  ]
                },
                "Language": {
                  "JobContext": {}
                },
                "Wasm": {},
                "Resources": {
                  "GPU": ""
                },
                "Timeout": 1800,
                "outputs": [
                  {
                    "StorageSource": "IPFS",
                    "Name": "outputs",
                    "path": "/outputs"
                  }
                ],
                "Sharding": {
                  "BatchSize": 1,
                  "GlobPatternBasePath": "/inputs"
                }
              },
              "Deal": {
                "Concurrency": 1
              },
              "ExecutionPlan": {
                "ShardsTotal": 1
              },
              "CreatedAt": "2022-11-17T13:29:01.871140291Z",
              "JobState": {
                "Nodes": {
                  "QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86": {
                    "Shards": {
                      "0": {
                        "NodeId": "QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86",
                        "State": "Cancelled",
                        "VerificationResult": {},
                        "PublishedResults": {}
                      }
                    }
                  },
                  "QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3": {
                    "Shards": {
                      "0": {
                        "NodeId": "QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3",
                        "State": "Completed",
                        "Status": "Got results proposal of length: 0",
                        "VerificationResult": {
                          "Complete": true,
                          "Result": true
                        },
                        "PublishedResults": {
                          "StorageSource": "IPFS",
                          "Name": "job-92d5d4ee-3765-4f78-8353-623f5f26df08-shard-0-host-QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3",
                          "CID": "QmWUXBndMuq2G6B6ndQCmkRHjZ6CvyJ8qLxXBG3YsSFzQG"
                        },
                        "RunOutput": {
                          "stdout": "",
                          "stdouttruncated": false,
                          "stderr": "",
                          "stderrtruncated": false,
                          "exitCode": 0,
                          "runnerError": ""
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
        ```
      operationId: pkg/publicapi.list
      parameters:
      - description: Set `return_all` to `true` to return all jobs on the network
          (may degrade performance, use with care!).
        in: body
        name: listRequest
        required: true
        schema:
          $ref: '#/definitions/publicapi.listRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/publicapi.listResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Simply lists jobs.
      tags:
      - Job
  /livez:
    get:
      operationId: apiServer/livez
      produces:
      - text/plain
      responses:
        "200":
          description: TODO
          schema:
            type: string
      tags:
      - Health
  /local_events:
    post:
      consumes:
      - application/json
      description: Local events (e.g. Selected, BidAccepted, Verified) are useful
        to track the progress of a job.
      operationId: pkg/publicapi/localEvents
      parameters:
      - description: ' '
        in: body
        name: localEventsRequest
        required: true
        schema:
          $ref: '#/definitions/publicapi.localEventsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/publicapi.localEventsResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Returns the node's local events related to the job-id passed in the
        body payload. Useful for troubleshooting.
      tags:
      - Job
  /logz:
    get:
      operationId: apiServer/logz
      produces:
      - text/plain
      responses:
        "200":
          description: TODO
          schema:
            type: string
      tags:
      - Health
  /peers:
    get:
      description: |-
        As described in the [architecture docs](https://docs.bacalhau.org/about-bacalhau/architecture), each node is connected to a number of peer nodes.

        Example response:
        ```json
        {
          "bacalhau-job-event": [
            "QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
            "QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF",
            "QmVAb7r2pKWCuyLpYWoZr9syhhFnTWeFaByHdb8PkkhLQG",
            "QmUDAXvv31WPZ8U9CzuRTMn9iFGiopGE7rHiah1X8a6PkT",
            "QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86"
          ]
        }
        ```
      operationId: apiServer/peers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Returns the peers connected to the host via the transport layer.
      tags:
      - Misc
  /readyz:
    get:
      operationId: apiServer/readyz
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - Health
  /results:
    post:
      consumes:
      - application/json
      description: |-
        Example response:

        ```json
        {
          "results": [
            {
              "NodeID": "QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
              "Data": {
                "StorageSource": "IPFS",
                "Name": "job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
                "CID": "QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe"
              }
            }
          ]
        }
        ```
      operationId: pkg/publicapi/results
      parameters:
      - description: ' '
        in: body
        name: stateRequest
        required: true
        schema:
          $ref: '#/definitions/publicapi.stateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/publicapi.resultsResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Returns the results of the job-id specified in the body payload.
      tags:
      - Job
  /states:
    post:
      consumes:
      - application/json
      description: |-
        Example response:

        ```json
        {
          "state": {
            "Nodes": {
              "QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86": {
                "Shards": {
                  "0": {
                    "NodeId": "QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86",
                    "State": "Cancelled",
                    "VerificationResult": {},
                    "PublishedResults": {}
                  }
                }
              },
              "QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3": {
                "Shards": {
                  "0": {
                    "NodeId": "QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3",
                    "State": "Cancelled",
                    "VerificationResult": {},
                    "PublishedResults": {}
                  }
                }
              },
              "QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL": {
                "Shards": {
                  "0": {
                    "NodeId": "QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
                    "State": "Completed",
                    "Status": "Got results proposal of length: 0",
                    "VerificationResult": {
                      "Complete": true,
                      "Result": true
                    },
                    "PublishedResults": {
                      "StorageSource": "IPFS",
                      "Name": "job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL",
                      "CID": "QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe"
                    },
                    "RunOutput": {
                      "stdout": "Thu Nov 17 13:32:55 UTC 2022\n",
                      "stdouttruncated": false,
                      "stderr": "",
                      "stderrtruncated": false,
                      "exitCode": 0,
                      "runnerError": ""
                    }
                  }
                }
              }
            }
          }
        }
        ```
      operationId: pkg/publicapi/states
      parameters:
      - description: ' '
        in: body
        name: stateRequest
        required: true
        schema:
          $ref: '#/definitions/publicapi.stateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/publicapi.stateResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Returns the state of the job-id specified in the body payload.
      tags:
      - Job
  /submit:
    post:
      consumes:
      - application/json
      description: "Description:\n\n* `client_public_key`: The base64-encoded public
        key of the client.\n* `signature`: A base64-encoded signature of the `data`
        attribute, signed by the client.\n* `data`\n    * `ClientID`: Request must
        specify a `ClientID`. To retrieve your `ClientID`, you can do the following:
        (1) submit a dummy job to Bacalhau (or use one you created before), (2) run
        `bacalhau describe <job-id>` and fetch the `ClientID` field.\n    * `Job`:
        see example below.\n\nExample request\n```json\n{\n\t\"data\": {\n\t\t\"ClientID\":
        \"ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51\",\n\t\t\"Job\":
        {\n\t\t\t\"APIVersion\": \"V1beta1\",\n\t\t\t\"Spec\": {\n\t\t\t\t\"Engine\":
        \"Docker\",\n\t\t\t\t\"Verifier\": \"Noop\",\n\t\t\t\t\"Publisher\": \"Estuary\",\n\t\t\t\t\"Docker\":
        {\n\t\t\t\t\t\"Image\": \"ubuntu\",\n\t\t\t\t\t\"Entrypoint\": [\n\t\t\t\t\t\t\"date\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"Timeout\":
        1800,\n\t\t\t\t\"outputs\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"StorageSource\":
        \"IPFS\",\n\t\t\t\t\t\t\"Name\": \"outputs\",\n\t\t\t\t\t\t\"path\": \"/outputs\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"Sharding\":
        {\n\t\t\t\t\t\"BatchSize\": 1,\n\t\t\t\t\t\"GlobPatternBasePath\": \"/inputs\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Deal\":
        {\n\t\t\t\t\"Concurrency\": 1\n\t\t\t}\n\t\t}\n\t},\n\t\"signature\": \"...\",\n\t\"client_public_key\":
        \"...\"\n}\n```"
      operationId: pkg/apiServer.submit
      parameters:
      - description: ' '
        in: body
        name: submitRequest
        required: true
        schema:
          $ref: '#/definitions/publicapi.submitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/publicapi.submitResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Submits a new job to the network.
      tags:
      - Job
  /varz:
    get:
      operationId: apiServer/varz
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
      tags:
      - Health
  /version:
    post:
      consumes:
      - application/json
      description: See https://github.com/filecoin-project/bacalhau/releases for a
        complete list of `gitversion` tags.
      operationId: apiServer/version
      parameters:
      - description: 'Request must specify a `client_id`. To retrieve your `client_id`,
          you can do the following: (1) submit a dummy job to Bacalhau (or use one
          you created before), (2) run `bacalhau describe <job-id>` and fetch the
          `ClientID` field.'
        in: body
        name: versionRequest
        required: true
        schema:
          $ref: '#/definitions/publicapi.versionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/publicapi.versionResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Returns the build version running on the server.
      tags:
      - Misc
schemes:
- http
swagger: "2.0"
