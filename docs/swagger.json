{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.",
        "title": "Bacalhau API",
        "contact": {
            "name": "Bacalhau Team",
            "url": "https://github.com/filecoin-project/bacalhau",
            "email": "team@bacalhau.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://github.com/filecoin-project/bacalhau/blob/main/LICENSE"
        }
    },
    "host": "bootstrap.production.bacalhau.org:1234",
    "basePath": "/",
    "paths": {
        "/debug": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Returns debug information on what the current node is doing.",
                "operationId": "apiServer/debug",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/events": {
            "post": {
                "description": "Events (e.g. Created, Bid, BidAccepted, ..., ResultsAccepted, ResultsPublished) are useful to track the progress of a job.\n\nExample response (truncated):\n```json\n{\n  \"events\": [\n    {\n      \"APIVersion\": \"V1beta1\",\n      \"JobID\": \"9304c616-291f-41ad-b862-54e133c0149e\",\n      \"ClientID\": \"ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51\",\n      \"SourceNodeID\": \"QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF\",\n      \"EventName\": \"Created\",\n      \"Spec\": {\n        \"Engine\": \"Docker\",\n        \"Verifier\": \"Noop\",\n        \"Publisher\": \"Estuary\",\n        \"Docker\": {\n          \"Image\": \"ubuntu\",\n          \"Entrypoint\": [\n            \"date\"\n          ]\n        },\n        \"Language\": {\n          \"JobContext\": {}\n        },\n        \"Wasm\": {},\n        \"Resources\": {\n          \"GPU\": \"\"\n        },\n        \"Timeout\": 1800,\n        \"outputs\": [\n          {\n            \"StorageSource\": \"IPFS\",\n            \"Name\": \"outputs\",\n            \"path\": \"/outputs\"\n          }\n        ],\n        \"Sharding\": {\n          \"BatchSize\": 1,\n          \"GlobPatternBasePath\": \"/inputs\"\n        }\n      },\n      \"JobExecutionPlan\": {\n        \"ShardsTotal\": 1\n      },\n      \"Deal\": {\n        \"Concurrency\": 1\n      },\n      \"VerificationResult\": {},\n      \"PublishedResult\": {},\n      \"EventTime\": \"2022-11-17T13:32:55.331375351Z\",\n      \"SenderPublicKey\": \"...\"\n    },\n    ...\n    {\n      \"JobID\": \"9304c616-291f-41ad-b862-54e133c0149e\",\n      \"SourceNodeID\": \"QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF\",\n      \"TargetNodeID\": \"QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n      \"EventName\": \"ResultsAccepted\",\n      \"Spec\": {\n        \"Docker\": {},\n        \"Language\": {\n          \"JobContext\": {}\n        },\n        \"Wasm\": {},\n        \"Resources\": {\n          \"GPU\": \"\"\n        },\n        \"Sharding\": {}\n      },\n      \"JobExecutionPlan\": {},\n      \"Deal\": {},\n      \"VerificationResult\": {\n        \"Complete\": true,\n        \"Result\": true\n      },\n      \"PublishedResult\": {},\n      \"EventTime\": \"2022-11-17T13:32:55.707825569Z\",\n      \"SenderPublicKey\": \"...\"\n    },\n    {\n      \"JobID\": \"9304c616-291f-41ad-b862-54e133c0149e\",\n      \"SourceNodeID\": \"QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n      \"EventName\": \"ResultsPublished\",\n      \"Spec\": {\n        \"Docker\": {},\n        \"Language\": {\n          \"JobContext\": {}\n        },\n        \"Wasm\": {},\n        \"Resources\": {\n          \"GPU\": \"\"\n        },\n        \"Sharding\": {}\n      },\n      \"JobExecutionPlan\": {},\n      \"Deal\": {},\n      \"VerificationResult\": {},\n      \"PublishedResult\": {\n        \"StorageSource\": \"IPFS\",\n        \"Name\": \"job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n        \"CID\": \"QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe\"\n      },\n      \"EventTime\": \"2022-11-17T13:32:55.756658941Z\",\n      \"SenderPublicKey\": \"...\"\n    }\n  ]\n}\n```",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Returns the events related to the job-id passed in the body payload. Useful for troubleshooting.",
                "operationId": "pkg/publicapi/events",
                "parameters": [
                    {
                        "description": "Request must specify a `client_id`. To retrieve your `client_id`, you can do the following: (1) submit a dummy job to Bacalhau (or use one you created before), (2) run `bacalhau describe \u003cjob-id\u003e` and fetch the `ClientID` field.",
                        "name": "eventsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/publicapi.eventsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/publicapi.eventsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "operationId": "apiServer/healthz",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.HealthInfo"
                        }
                    }
                }
            }
        },
        "/id": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Misc"
                ],
                "summary": "Returns the id of the host node.",
                "operationId": "apiServer/id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/list": {
            "post": {
                "description": "Returns the first (sorted) #`max_jobs` jobs that belong to the `client_id` passed in the body payload (by default).\nIf `return_all` is set to true, it returns all jobs on the Bacalhau network.\n\nIf `id` is set, it returns only the job with that ID.\n\nExample response:\n```json\n{\n  \"jobs\": [\n    {\n      \"APIVersion\": \"V1beta1\",\n      \"ID\": \"9304c616-291f-41ad-b862-54e133c0149e\",\n      \"RequesterNodeID\": \"QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF\",\n      \"RequesterPublicKey\": \"...\",\n      \"ClientID\": \"ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51\",\n      \"Spec\": {\n        \"Engine\": \"Docker\",\n        \"Verifier\": \"Noop\",\n        \"Publisher\": \"Estuary\",\n        \"Docker\": {\n          \"Image\": \"ubuntu\",\n          \"Entrypoint\": [\n            \"date\"\n          ]\n        },\n        \"Language\": {\n          \"JobContext\": {}\n        },\n        \"Wasm\": {},\n        \"Resources\": {\n          \"GPU\": \"\"\n        },\n        \"Timeout\": 1800,\n        \"outputs\": [\n          {\n            \"StorageSource\": \"IPFS\",\n            \"Name\": \"outputs\",\n            \"path\": \"/outputs\"\n          }\n        ],\n        \"Sharding\": {\n          \"BatchSize\": 1,\n          \"GlobPatternBasePath\": \"/inputs\"\n        }\n      },\n      \"Deal\": {\n        \"Concurrency\": 1\n      },\n      \"ExecutionPlan\": {\n        \"ShardsTotal\": 1\n      },\n      \"CreatedAt\": \"2022-11-17T13:32:55.33837275Z\",\n      \"JobState\": {\n        \"Nodes\": {\n          \"QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86\": {\n            \"Shards\": {\n              \"0\": {\n                \"NodeId\": \"QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86\",\n                \"State\": \"Cancelled\",\n                \"VerificationResult\": {},\n                \"PublishedResults\": {}\n              }\n            }\n          },\n          \"QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3\": {\n            \"Shards\": {\n              \"0\": {\n                \"NodeId\": \"QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3\",\n                \"State\": \"Cancelled\",\n                \"VerificationResult\": {},\n                \"PublishedResults\": {}\n              }\n            }\n          },\n          \"QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\": {\n            \"Shards\": {\n              \"0\": {\n                \"NodeId\": \"QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n                \"State\": \"Completed\",\n                \"Status\": \"Got results proposal of length: 0\",\n                \"VerificationResult\": {\n                  \"Complete\": true,\n                  \"Result\": true\n                },\n                \"PublishedResults\": {\n                  \"StorageSource\": \"IPFS\",\n                  \"Name\": \"job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n                  \"CID\": \"QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe\"\n                },\n                \"RunOutput\": {\n                  \"stdout\": \"Thu Nov 17 13:32:55 UTC 2022\\n\",\n                  \"stdouttruncated\": false,\n                  \"stderr\": \"\",\n                  \"stderrtruncated\": false,\n                  \"exitCode\": 0,\n                  \"runnerError\": \"\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    {\n      \"APIVersion\": \"V1beta1\",\n      \"ID\": \"92d5d4ee-3765-4f78-8353-623f5f26df08\",\n      \"RequesterNodeID\": \"QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF\",\n      \"RequesterPublicKey\": \"...\",\n      \"ClientID\": \"ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51\",\n      \"Spec\": {\n        \"Engine\": \"Docker\",\n        \"Verifier\": \"Noop\",\n        \"Publisher\": \"Estuary\",\n        \"Docker\": {\n          \"Image\": \"ubuntu\",\n          \"Entrypoint\": [\n            \"sleep\",\n            \"4\"\n          ]\n        },\n        \"Language\": {\n          \"JobContext\": {}\n        },\n        \"Wasm\": {},\n        \"Resources\": {\n          \"GPU\": \"\"\n        },\n        \"Timeout\": 1800,\n        \"outputs\": [\n          {\n            \"StorageSource\": \"IPFS\",\n            \"Name\": \"outputs\",\n            \"path\": \"/outputs\"\n          }\n        ],\n        \"Sharding\": {\n          \"BatchSize\": 1,\n          \"GlobPatternBasePath\": \"/inputs\"\n        }\n      },\n      \"Deal\": {\n        \"Concurrency\": 1\n      },\n      \"ExecutionPlan\": {\n        \"ShardsTotal\": 1\n      },\n      \"CreatedAt\": \"2022-11-17T13:29:01.871140291Z\",\n      \"JobState\": {\n        \"Nodes\": {\n          \"QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86\": {\n            \"Shards\": {\n              \"0\": {\n                \"NodeId\": \"QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86\",\n                \"State\": \"Cancelled\",\n                \"VerificationResult\": {},\n                \"PublishedResults\": {}\n              }\n            }\n          },\n          \"QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3\": {\n            \"Shards\": {\n              \"0\": {\n                \"NodeId\": \"QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3\",\n                \"State\": \"Completed\",\n                \"Status\": \"Got results proposal of length: 0\",\n                \"VerificationResult\": {\n                  \"Complete\": true,\n                  \"Result\": true\n                },\n                \"PublishedResults\": {\n                  \"StorageSource\": \"IPFS\",\n                  \"Name\": \"job-92d5d4ee-3765-4f78-8353-623f5f26df08-shard-0-host-QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3\",\n                  \"CID\": \"QmWUXBndMuq2G6B6ndQCmkRHjZ6CvyJ8qLxXBG3YsSFzQG\"\n                },\n                \"RunOutput\": {\n                  \"stdout\": \"\",\n                  \"stdouttruncated\": false,\n                  \"stderr\": \"\",\n                  \"stderrtruncated\": false,\n                  \"exitCode\": 0,\n                  \"runnerError\": \"\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ]\n}\n```",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Simply lists jobs.",
                "operationId": "pkg/publicapi.list",
                "parameters": [
                    {
                        "description": "Set `return_all` to `true` to return all jobs on the network (may degrade performance, use with care!).",
                        "name": "listRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/publicapi.listRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/publicapi.listResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/livez": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Health"
                ],
                "operationId": "apiServer/livez",
                "responses": {
                    "200": {
                        "description": "TODO",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/local_events": {
            "post": {
                "description": "Local events (e.g. Selected, BidAccepted, Verified) are useful to track the progress of a job.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Returns the node's local events related to the job-id passed in the body payload. Useful for troubleshooting.",
                "operationId": "pkg/publicapi/localEvents",
                "parameters": [
                    {
                        "description": " ",
                        "name": "localEventsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/publicapi.localEventsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/publicapi.localEventsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logz": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Health"
                ],
                "operationId": "apiServer/logz",
                "responses": {
                    "200": {
                        "description": "TODO",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/peers": {
            "get": {
                "description": "As described in the [architecture docs](https://docs.bacalhau.org/about-bacalhau/architecture), each node is connected to a number of peer nodes.\n\nExample response:\n```json\n{\n  \"bacalhau-job-event\": [\n    \"QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n    \"QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF\",\n    \"QmVAb7r2pKWCuyLpYWoZr9syhhFnTWeFaByHdb8PkkhLQG\",\n    \"QmUDAXvv31WPZ8U9CzuRTMn9iFGiopGE7rHiah1X8a6PkT\",\n    \"QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86\"\n  ]\n}\n```",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Misc"
                ],
                "summary": "Returns the peers connected to the host via the transport layer.",
                "operationId": "apiServer/peers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/readyz": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Health"
                ],
                "operationId": "apiServer/readyz",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/results": {
            "post": {
                "description": "Example response:\n\n```json\n{\n  \"results\": [\n    {\n      \"NodeID\": \"QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n      \"Data\": {\n        \"StorageSource\": \"IPFS\",\n        \"Name\": \"job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n        \"CID\": \"QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe\"\n      }\n    }\n  ]\n}\n```",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Returns the results of the job-id specified in the body payload.",
                "operationId": "pkg/publicapi/results",
                "parameters": [
                    {
                        "description": " ",
                        "name": "stateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/publicapi.stateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/publicapi.resultsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/states": {
            "post": {
                "description": "Example response:\n\n```json\n{\n  \"state\": {\n    \"Nodes\": {\n      \"QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86\": {\n        \"Shards\": {\n          \"0\": {\n            \"NodeId\": \"QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86\",\n            \"State\": \"Cancelled\",\n            \"VerificationResult\": {},\n            \"PublishedResults\": {}\n          }\n        }\n      },\n      \"QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3\": {\n        \"Shards\": {\n          \"0\": {\n            \"NodeId\": \"QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3\",\n            \"State\": \"Cancelled\",\n            \"VerificationResult\": {},\n            \"PublishedResults\": {}\n          }\n        }\n      },\n      \"QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\": {\n        \"Shards\": {\n          \"0\": {\n            \"NodeId\": \"QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n            \"State\": \"Completed\",\n            \"Status\": \"Got results proposal of length: 0\",\n            \"VerificationResult\": {\n              \"Complete\": true,\n              \"Result\": true\n            },\n            \"PublishedResults\": {\n              \"StorageSource\": \"IPFS\",\n              \"Name\": \"job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n              \"CID\": \"QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe\"\n            },\n            \"RunOutput\": {\n              \"stdout\": \"Thu Nov 17 13:32:55 UTC 2022\\n\",\n              \"stdouttruncated\": false,\n              \"stderr\": \"\",\n              \"stderrtruncated\": false,\n              \"exitCode\": 0,\n              \"runnerError\": \"\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Returns the state of the job-id specified in the body payload.",
                "operationId": "pkg/publicapi/states",
                "parameters": [
                    {
                        "description": " ",
                        "name": "stateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/publicapi.stateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/publicapi.stateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/submit": {
            "post": {
                "description": "Description:\n\n* `client_public_key`: The base64-encoded public key of the client.\n* `signature`: A base64-encoded signature of the `data` attribute, signed by the client.\n* `job_create_payload`:\n    * `ClientID`: Request must specify a `ClientID`. To retrieve your `ClientID`, you can do the following: (1) submit a dummy job to Bacalhau (or use one you created before), (2) run `bacalhau describe \u003cjob-id\u003e` and fetch the `ClientID` field.\n\t* `APIVersion`: e.g. `\"V1beta1\"`.\n    * `Spec`: https://github.com/filecoin-project/bacalhau/blob/main/pkg/model/job.go\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Submits a new job to the network.",
                "operationId": "pkg/apiServer.submit",
                "parameters": [
                    {
                        "description": " ",
                        "name": "submitRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/publicapi.submitRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/publicapi.submitResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/varz": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "operationId": "apiServer/varz",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        },
        "/version": {
            "post": {
                "description": "See https://github.com/filecoin-project/bacalhau/releases for a complete list of `gitversion` tags.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Misc"
                ],
                "summary": "Returns the build version running on the server.",
                "operationId": "apiServer/version",
                "parameters": [
                    {
                        "description": "Request must specify a `client_id`. To retrieve your `client_id`, you can do the following: (1) submit a dummy job to Bacalhau (or use one you created before), (2) run `bacalhau describe \u003cjob-id\u003e` and fetch the `ClientID` field.",
                        "name": "versionRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/publicapi.versionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/publicapi.versionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.BuildVersionInfo": {
            "type": "object",
            "properties": {
                "builddate": {
                    "type": "string",
                    "example": "2022-11-16T14:03:31Z"
                },
                "gitcommit": {
                    "type": "string",
                    "example": "d612b63108f2b5ce1ab2b9e02444eb1dac1d922d"
                },
                "gitversion": {
                    "type": "string",
                    "example": "v0.3.12"
                },
                "goarch": {
                    "type": "string",
                    "example": "amd64"
                },
                "goos": {
                    "type": "string",
                    "example": "linux"
                },
                "major": {
                    "type": "string",
                    "example": "0"
                },
                "minor": {
                    "type": "string",
                    "example": "3"
                }
            }
        },
        "model.Deal": {
            "type": "object",
            "properties": {
                "Concurrency": {
                    "description": "The maximum number of concurrent compute node bids that will be\naccepted by the requester node on behalf of the client.",
                    "type": "integer"
                },
                "Confidence": {
                    "description": "The number of nodes that must agree on a verification result\nthis is used by the different verifiers - for example the\ndeterministic verifier requires the winning group size\nto be at least this size",
                    "type": "integer"
                },
                "MinBids": {
                    "description": "The minimum number of bids that must be received before the Requester\nnode will randomly accept concurrency-many of them. This allows the\nRequester node to get some level of guarantee that the execution of the\njobs will be spread evenly across the network (assuming that this value\nis some large proportion of the size of the network).",
                    "type": "integer"
                }
            }
        },
        "model.Job": {
            "type": "object",
            "properties": {
                "APIVersion": {
                    "type": "string",
                    "example": "V1beta1"
                },
                "Metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "Spec": {
                    "description": "The specification of this job.",
                    "$ref": "#/definitions/model.Spec"
                },
                "Status": {
                    "description": "The status of the job: where are the nodes at, what are the events",
                    "$ref": "#/definitions/model.JobStatus"
                }
            }
        },
        "model.JobCreatePayload": {
            "type": "object",
            "required": [
                "APIVersion",
                "ClientID",
                "Spec"
            ],
            "properties": {
                "APIVersion": {
                    "type": "string",
                    "example": "V1beta1"
                },
                "ClientID": {
                    "description": "the id of the client that is submitting the job",
                    "type": "string"
                },
                "Context": {
                    "description": "Optional base64-encoded tar file that will be pinned to IPFS and\nmounted as storage for the job. Not part of the spec so we don't\nflood the transport layer with it (potentially very large).",
                    "type": "string"
                },
                "Spec": {
                    "description": "The specification of this job.",
                    "$ref": "#/definitions/model.Spec"
                }
            }
        },
        "model.JobEvent": {
            "type": "object",
            "properties": {
                "APIVersion": {
                    "description": "APIVersion of the Job",
                    "type": "string",
                    "example": "V1beta1"
                },
                "ClientID": {
                    "description": "optional clientID if this is an externally triggered event (like create job)",
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                },
                "Deal": {
                    "description": "this is only defined in \"update_deal\" events",
                    "$ref": "#/definitions/model.Deal"
                },
                "EventName": {
                    "type": "integer"
                },
                "EventTime": {
                    "type": "string",
                    "example": "2022-11-17T13:32:55.756658941Z"
                },
                "JobExecutionPlan": {
                    "description": "this is only defined in \"create\" events",
                    "$ref": "#/definitions/model.JobExecutionPlan"
                },
                "JobID": {
                    "type": "string",
                    "example": "9304c616-291f-41ad-b862-54e133c0149e"
                },
                "PublishedResult": {
                    "$ref": "#/definitions/model.StorageSpec"
                },
                "RunOutput": {
                    "description": "RunOutput of the job",
                    "$ref": "#/definitions/model.RunCommandResult"
                },
                "SenderPublicKey": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "ShardIndex": {
                    "description": "what shard is this event for",
                    "type": "integer"
                },
                "SourceNodeID": {
                    "description": "the node that emitted this event",
                    "type": "string",
                    "example": "QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF"
                },
                "Spec": {
                    "description": "this is only defined in \"create\" events",
                    "$ref": "#/definitions/model.Spec"
                },
                "Status": {
                    "type": "string",
                    "example": "Got results proposal of length: 0"
                },
                "TargetNodeID": {
                    "description": "the node that this event is for\ne.g. \"AcceptJobBid\" was emitted by Requester but it targeting compute node",
                    "type": "string",
                    "example": "QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL"
                },
                "VerificationProposal": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "VerificationResult": {
                    "$ref": "#/definitions/model.VerificationResult"
                }
            }
        },
        "model.JobExecutionPlan": {
            "type": "object",
            "properties": {
                "ShardsTotal": {
                    "description": "how many shards are there in total for this job\nwe are expecting this number x concurrency total\nJobShardState objects for this job",
                    "type": "integer"
                }
            }
        },
        "model.JobLocalEvent": {
            "type": "object",
            "properties": {
                "EventName": {
                    "type": "integer"
                },
                "JobID": {
                    "type": "string"
                },
                "ShardIndex": {
                    "type": "integer"
                },
                "TargetNodeID": {
                    "type": "string"
                }
            }
        },
        "model.JobNodeState": {
            "type": "object",
            "properties": {
                "Shards": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.JobShardState"
                    }
                }
            }
        },
        "model.JobRequester": {
            "type": "object",
            "properties": {
                "RequesterNodeID": {
                    "description": "The ID of the requester node that owns this job.",
                    "type": "string",
                    "example": "QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF"
                },
                "RequesterPublicKey": {
                    "description": "The public key of the Requester node that created this job\nThis can be used to encrypt messages back to the creator",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "model.JobShardState": {
            "type": "object",
            "properties": {
                "NodeId": {
                    "description": "which node is running this shard",
                    "type": "string"
                },
                "PublishedResults": {
                    "$ref": "#/definitions/model.StorageSpec"
                },
                "RunOutput": {
                    "description": "RunOutput of the job",
                    "$ref": "#/definitions/model.RunCommandResult"
                },
                "ShardIndex": {
                    "description": "what shard is this we are running",
                    "type": "integer"
                },
                "State": {
                    "description": "what is the state of the shard on this node",
                    "type": "integer"
                },
                "Status": {
                    "description": "an arbitrary status message",
                    "type": "string"
                },
                "VerificationProposal": {
                    "description": "the proposed results for this shard\nthis will be resolved by the verifier somehow",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "VerificationResult": {
                    "$ref": "#/definitions/model.VerificationResult"
                }
            }
        },
        "model.JobShardingConfig": {
            "type": "object",
            "properties": {
                "BatchSize": {
                    "description": "how many \"items\" are to be processed in each shard\nwe first apply the glob pattern which will result in a flat list of items\nthis number decides how to group that flat list into actual shards run by compute nodes",
                    "type": "integer"
                },
                "GlobPattern": {
                    "description": "divide the inputs up into the smallest possible unit\nfor example /* would mean \"all top level files or folders\"\nthis being an empty string means \"no sharding\"",
                    "type": "string"
                },
                "GlobPatternBasePath": {
                    "description": "when using multiple input volumes\nwhat path do we treat as the common mount path to apply the glob pattern to",
                    "type": "string"
                }
            }
        },
        "model.JobSpecDocker": {
            "type": "object",
            "properties": {
                "Entrypoint": {
                    "description": "optionally override the default entrypoint",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "EnvironmentVariables": {
                    "description": "a map of env to run the container with",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Image": {
                    "description": "this should be pullable by docker",
                    "type": "string"
                },
                "WorkingDirectory": {
                    "description": "working directory inside the container",
                    "type": "string"
                }
            }
        },
        "model.JobSpecLanguage": {
            "type": "object",
            "properties": {
                "Command": {
                    "description": "optional program specified on commandline, like python -c \"print(1+1)\"",
                    "type": "string"
                },
                "DeterministicExecution": {
                    "description": "must this job be run in a deterministic context?",
                    "type": "boolean"
                },
                "JobContext": {
                    "description": "context is a tar file stored in ipfs, containing e.g. source code and requirements",
                    "$ref": "#/definitions/model.StorageSpec"
                },
                "Language": {
                    "description": "e.g. python",
                    "type": "string"
                },
                "LanguageVersion": {
                    "description": "e.g. 3.8",
                    "type": "string"
                },
                "ProgramPath": {
                    "description": "optional program path relative to the context dir. one of Command or ProgramPath must be specified",
                    "type": "string"
                },
                "RequirementsPath": {
                    "description": "optional requirements.txt (or equivalent) path relative to the context dir",
                    "type": "string"
                }
            }
        },
        "model.JobSpecWasm": {
            "type": "object",
            "properties": {
                "EntryPoint": {
                    "description": "The name of the function in the EntryModule to call to run the job. For\nWASI jobs, this will always be `_start`, but jobs can choose to call\nother WASM functions instead. The EntryPoint must be a zero-parameter\nzero-result function.",
                    "type": "string"
                },
                "EnvironmentVariables": {
                    "description": "The variables available in the environment of the running program.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ImportModules": {
                    "description": "TODO #880: Other WASM modules whose exports will be available as imports\nto the EntryModule.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.StorageSpec"
                    }
                },
                "Parameters": {
                    "description": "The arguments supplied to the program (i.e. as ARGV).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.JobState": {
            "type": "object",
            "properties": {
                "Nodes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.JobNodeState"
                    }
                }
            }
        },
        "model.JobStatus": {
            "type": "object",
            "properties": {
                "JobEvents": {
                    "description": "All events associated with the job",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.JobEvent"
                    }
                },
                "JobState": {
                    "description": "The current state of the job",
                    "$ref": "#/definitions/model.JobState"
                },
                "LocalJobEvents": {
                    "description": "All local events associated with the job",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.JobLocalEvent"
                    }
                },
                "Requester": {
                    "$ref": "#/definitions/model.JobRequester"
                }
            }
        },
        "model.Metadata": {
            "type": "object",
            "properties": {
                "ClientID": {
                    "description": "The ID of the client that created this job.",
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                },
                "CreatedAt": {
                    "description": "Time the job was submitted to the bacalhau network.",
                    "type": "string",
                    "example": "2022-11-17T13:29:01.871140291Z"
                },
                "ID": {
                    "description": "The unique global ID of this job in the bacalhau network.",
                    "type": "string",
                    "example": "92d5d4ee-3765-4f78-8353-623f5f26df08"
                }
            }
        },
        "model.PublishedResult": {
            "type": "object",
            "properties": {
                "Data": {
                    "$ref": "#/definitions/model.StorageSpec"
                },
                "NodeID": {
                    "type": "string"
                },
                "ShardIndex": {
                    "type": "integer"
                }
            }
        },
        "model.ResourceUsageConfig": {
            "type": "object",
            "properties": {
                "CPU": {
                    "description": "https://github.com/BTBurke/k8sresource string",
                    "type": "string"
                },
                "Disk": {
                    "type": "string"
                },
                "GPU": {
                    "description": "unsigned integer string",
                    "type": "string"
                },
                "Memory": {
                    "description": "github.com/c2h5oh/datasize string",
                    "type": "string"
                }
            }
        },
        "model.RunCommandResult": {
            "type": "object",
            "properties": {
                "exitCode": {
                    "description": "exit code of the run.",
                    "type": "integer"
                },
                "runnerError": {
                    "description": "Runner error",
                    "type": "string"
                },
                "stderr": {
                    "description": "stderr of the run.",
                    "type": "string"
                },
                "stderrtruncated": {
                    "description": "bool describing if stderr was truncated",
                    "type": "boolean"
                },
                "stdout": {
                    "description": "stdout of the run. Yaml provided for `describe` output",
                    "type": "string"
                },
                "stdouttruncated": {
                    "description": "bool describing if stdout was truncated",
                    "type": "boolean"
                }
            }
        },
        "model.Spec": {
            "type": "object",
            "properties": {
                "Annotations": {
                    "description": "Annotations on the job - could be user or machine assigned",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Contexts": {
                    "description": "Input volumes that will not be sharded\nfor example to upload code into a base image\nevery shard will get the full range of context volumes",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.StorageSpec"
                    }
                },
                "Deal": {
                    "description": "The deal the client has made, such as which job bids they have accepted.",
                    "$ref": "#/definitions/model.Deal"
                },
                "DoNotTrack": {
                    "description": "Do not track specified by the client",
                    "type": "boolean"
                },
                "Docker": {
                    "description": "executor specific data",
                    "$ref": "#/definitions/model.JobSpecDocker"
                },
                "Engine": {
                    "description": "e.g. docker or language",
                    "type": "integer"
                },
                "ExecutionPlan": {
                    "description": "how will this job be executed by nodes on the network",
                    "$ref": "#/definitions/model.JobExecutionPlan"
                },
                "Language": {
                    "$ref": "#/definitions/model.JobSpecLanguage"
                },
                "Publisher": {
                    "description": "there can be multiple publishers for the job",
                    "type": "integer"
                },
                "Resources": {
                    "description": "the compute (cpu, ram) resources this job requires",
                    "$ref": "#/definitions/model.ResourceUsageConfig"
                },
                "Sharding": {
                    "description": "the sharding config for this job\ndescribes how the job might be split up into parallel shards",
                    "$ref": "#/definitions/model.JobShardingConfig"
                },
                "Timeout": {
                    "description": "How long a job can run in seconds before it is killed.\nThis includes the time required to run, verify and publish results",
                    "type": "number"
                },
                "Verifier": {
                    "type": "integer"
                },
                "Wasm": {
                    "$ref": "#/definitions/model.JobSpecWasm"
                },
                "inputs": {
                    "description": "the data volumes we will read in the job\nfor example \"read this ipfs cid\"\nTODO: #667 Replace with \"Inputs\", \"Outputs\" (note the caps) for yaml/json when we update the n.js file",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.StorageSpec"
                    }
                },
                "outputs": {
                    "description": "the data volumes we will write in the job\nfor example \"write the results to ipfs\"",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.StorageSpec"
                    }
                }
            }
        },
        "model.StorageSpec": {
            "type": "object",
            "properties": {
                "CID": {
                    "description": "The unique ID of the data, where it makes sense (for example, in an\nIPFS storage spec this will be the data's CID).\nNOTE: The below is capitalized to match IPFS \u0026 IPLD (even though it's out of golang fmt)",
                    "type": "string",
                    "example": "QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe"
                },
                "Metadata": {
                    "description": "Additional properties specific to each driver",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "Name": {
                    "description": "Name of the spec's data, for reference.",
                    "type": "string",
                    "example": "job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL"
                },
                "StorageSource": {
                    "description": "StorageSource is the abstract source of the data. E.g. a storage source\nmight be a URL download, but doesn't specify how the execution engine\ndoes the download or what it will do with the downloaded data.",
                    "type": "integer"
                },
                "URL": {
                    "description": "Source URL of the data",
                    "type": "string"
                },
                "path": {
                    "description": "The path that the spec's data should be mounted on, where it makes\nsense (for example, in a Docker storage spec this will be a filesystem\npath).\nTODO: #668 Replace with \"Path\" (note the caps) for yaml/json when we update the n.js file",
                    "type": "string"
                }
            }
        },
        "model.VerificationResult": {
            "type": "object",
            "properties": {
                "Complete": {
                    "type": "boolean"
                },
                "Result": {
                    "type": "boolean"
                }
            }
        },
        "publicapi.eventsRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                },
                "job_id": {
                    "type": "string",
                    "example": "9304c616-291f-41ad-b862-54e133c0149e"
                }
            }
        },
        "publicapi.eventsResponse": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.JobEvent"
                    }
                }
            }
        },
        "publicapi.listRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                },
                "exclude_tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['any-tag']"
                    ]
                },
                "id": {
                    "type": "string",
                    "example": "9304c616-291f-41ad-b862-54e133c0149e"
                },
                "include_tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['any-tag']"
                    ]
                },
                "max_jobs": {
                    "type": "integer",
                    "example": 10
                },
                "return_all": {
                    "type": "boolean"
                },
                "sort_by": {
                    "type": "string",
                    "example": "created_at"
                },
                "sort_reverse": {
                    "type": "boolean"
                }
            }
        },
        "publicapi.listResponse": {
            "type": "object",
            "properties": {
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Job"
                    }
                }
            }
        },
        "publicapi.localEventsRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string"
                },
                "job_id": {
                    "type": "string"
                }
            }
        },
        "publicapi.localEventsResponse": {
            "type": "object",
            "properties": {
                "localEvents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.JobLocalEvent"
                    }
                }
            }
        },
        "publicapi.resultsResponse": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PublishedResult"
                    }
                }
            }
        },
        "publicapi.stateRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                },
                "job_id": {
                    "type": "string",
                    "example": "9304c616-291f-41ad-b862-54e133c0149e"
                }
            }
        },
        "publicapi.stateResponse": {
            "type": "object",
            "properties": {
                "state": {
                    "$ref": "#/definitions/model.JobState"
                }
            }
        },
        "publicapi.submitRequest": {
            "type": "object",
            "required": [
                "client_public_key",
                "job_create_payload",
                "signature"
            ],
            "properties": {
                "client_public_key": {
                    "description": "The base64-encoded public key of the client:",
                    "type": "string"
                },
                "job_create_payload": {
                    "description": "The data needed to submit and run a job on the network:",
                    "$ref": "#/definitions/model.JobCreatePayload"
                },
                "signature": {
                    "description": "A base64-encoded signature of the data, signed by the client:",
                    "type": "string"
                }
            }
        },
        "publicapi.submitResponse": {
            "type": "object",
            "properties": {
                "job": {
                    "$ref": "#/definitions/model.Job"
                }
            }
        },
        "publicapi.versionRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                }
            }
        },
        "publicapi.versionResponse": {
            "type": "object",
            "properties": {
                "build_version_info": {
                    "$ref": "#/definitions/model.BuildVersionInfo"
                }
            }
        },
        "types.FreeSpace": {
            "type": "object",
            "properties": {
                "IPFSMount": {
                    "$ref": "#/definitions/types.MountStatus"
                },
                "root": {
                    "$ref": "#/definitions/types.MountStatus"
                },
                "tmp": {
                    "$ref": "#/definitions/types.MountStatus"
                }
            }
        },
        "types.HealthInfo": {
            "type": "object",
            "properties": {
                "FreeSpace": {
                    "$ref": "#/definitions/types.FreeSpace"
                }
            }
        },
        "types.MountStatus": {
            "type": "object",
            "properties": {
                "All": {
                    "type": "integer"
                },
                "Free": {
                    "type": "integer"
                },
                "Used": {
                    "type": "integer"
                }
            }
        }
    }
}