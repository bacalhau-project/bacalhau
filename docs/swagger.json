{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/bacalhau-project/bacalhau.",
        "title": "Bacalhau API",
        "contact": {
            "name": "Bacalhau Team",
            "url": "https://github.com/bacalhau-project/bacalhau",
            "email": "team@bacalhau.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://github.com/bacalhau-project/bacalhau/blob/main/LICENSE"
        }
    },
    "host": "bootstrap.production.bacalhau.org:1234",
    "basePath": "/",
    "paths": {
        "/debug": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Returns debug information on what the current node is doing.",
                "operationId": "apiServer/debug",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Utils"
                ],
                "operationId": "healthz",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.HealthInfo"
                        }
                    }
                }
            }
        },
        "/id": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Utils"
                ],
                "summary": "Returns the id of the host node.",
                "operationId": "id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/livez": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Utils"
                ],
                "operationId": "livez",
                "responses": {
                    "200": {
                        "description": "TODO",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logz": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Utils"
                ],
                "operationId": "logz",
                "responses": {
                    "200": {
                        "description": "TODO",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/node_info": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Utils"
                ],
                "summary": "Returns the info of the node.",
                "operationId": "nodeInfo",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NodeInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/peers": {
            "get": {
                "description": "As described in the [architecture docs](https://docs.bacalhau.org/about-bacalhau/architecture), each node is connected to a number of peer nodes.\n\nExample response:\n```json\n{\n  \"bacalhau-job-event\": [\n    \"QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n    \"QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF\",\n    \"QmVAb7r2pKWCuyLpYWoZr9syhhFnTWeFaByHdb8PkkhLQG\",\n    \"QmUDAXvv31WPZ8U9CzuRTMn9iFGiopGE7rHiah1X8a6PkT\",\n    \"QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86\"\n  ]\n}\n```",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Utils"
                ],
                "summary": "Returns the peers connected to the host via the transport layer.",
                "operationId": "peers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/peer.AddrInfo"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/readyz": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Utils"
                ],
                "operationId": "readyz",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requester/cancel": {
            "post": {
                "description": "Cancels a job specified by `id` as long as that job belongs to `client_id`.\n\nReturns the current jobstate after the cancel request has been processed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Cancels the job with the job-id specified in the body payload.",
                "operationId": "pkg/requester/publicapi/cancel",
                "parameters": [
                    {
                        "description": " ",
                        "name": "cancelRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/publicapi.cancelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/publicapi.cancelResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requester/debug": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Returns debug information on what the current node is doing.",
                "operationId": "pkg/requester/publicapi/debug",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requester/events": {
            "post": {
                "description": "Events (e.g. Created, Bid, BidAccepted, ..., ResultsAccepted, ResultsPublished) are useful to track the progress of a job.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Returns the events related to the job-id passed in the body payload. Useful for troubleshooting.",
                "operationId": "pkg/requester/publicapi/events",
                "parameters": [
                    {
                        "description": "Request must specify a `client_id`. To retrieve your `client_id`, you can do the following: (1) submit a dummy job to Bacalhau (or use one you created before), (2) run `bacalhau describe \u003cjob-id\u003e` and fetch the `ClientID` field.",
                        "name": "eventsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/publicapi.eventsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/publicapi.eventsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requester/list": {
            "post": {
                "description": "Returns the first (sorted) #`max_jobs` jobs that belong to the `client_id` passed in the body payload (by default).\nIf `return_all` is set to true, it returns all jobs on the Bacalhau network.\n\nIf `id` is set, it returns only the job with that ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Simply lists jobs.",
                "operationId": "pkg/requester/publicapi/list",
                "parameters": [
                    {
                        "description": "Set `return_all` to `true` to return all jobs on the network (may degrade performance, use with care!).",
                        "name": "listRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/publicapi.listRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/publicapi.listResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requester/results": {
            "post": {
                "description": "Example response:\n\n```json\n{\n  \"results\": [\n    {\n      \"NodeID\": \"QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n      \"Data\": {\n        \"StorageSource\": \"IPFS\",\n        \"Name\": \"job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n        \"CID\": \"QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe\"\n      }\n    }\n  ]\n}\n```",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Returns the results of the job-id specified in the body payload.",
                "operationId": "pkg/requester/publicapi/results",
                "parameters": [
                    {
                        "description": " ",
                        "name": "stateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/publicapi.stateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/publicapi.resultsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requester/states": {
            "post": {
                "description": "Example response:\n\n```json\n{\n  \"state\": {\n    \"Nodes\": {\n      \"QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86\": {\n        \"Shards\": {\n          \"0\": {\n            \"NodeId\": \"QmSyJ8VUd4YSPwZFJSJsHmmmmg7sd4BAc2yHY73nisJo86\",\n            \"State\": \"Cancelled\",\n            \"VerificationResult\": {},\n            \"PublishedResults\": {}\n          }\n        }\n      },\n      \"QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3\": {\n        \"Shards\": {\n          \"0\": {\n            \"NodeId\": \"QmYgxZiySj3MRkwLSL4X2MF5F9f2PMhAE3LV49XkfNL1o3\",\n            \"State\": \"Cancelled\",\n            \"VerificationResult\": {},\n            \"PublishedResults\": {}\n          }\n        }\n      },\n      \"QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\": {\n        \"Shards\": {\n          \"0\": {\n            \"NodeId\": \"QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n            \"State\": \"Completed\",\n            \"Status\": \"Got results proposal of length: 0\",\n            \"VerificationResult\": {\n              \"Complete\": true,\n              \"Result\": true\n            },\n            \"PublishedResults\": {\n              \"StorageSource\": \"IPFS\",\n              \"Name\": \"job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\",\n              \"CID\": \"QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe\"\n            },\n            \"RunOutput\": {\n              \"stdout\": \"Thu Nov 17 13:32:55 UTC 2022\\n\",\n              \"stdouttruncated\": false,\n              \"stderr\": \"\",\n              \"stderrtruncated\": false,\n              \"exitCode\": 0,\n              \"runnerError\": \"\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Returns the state of the job-id specified in the body payload.",
                "operationId": "pkg/requester/publicapi/states",
                "parameters": [
                    {
                        "description": " ",
                        "name": "stateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/publicapi.stateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/publicapi.stateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requester/submit": {
            "post": {
                "description": "Description:\n\n* `client_public_key`: The base64-encoded public key of the client.\n* `signature`: A base64-encoded signature of the `data` attribute, signed by the client.\n* `job_create_payload`:\n    * `ClientID`: Request must specify a `ClientID`. To retrieve your `ClientID`, you can do the following: (1) submit a dummy job to Bacalhau (or use one you created before), (2) run `bacalhau describe \u003cjob-id\u003e` and fetch the `ClientID` field.\n\t* `APIVersion`: e.g. `\"V1beta1\"`.\n    * `Spec`: https://github.com/bacalhau-project/bacalhau/blob/main/pkg/model/job.go\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Submits a new job to the network.",
                "operationId": "pkg/requester/publicapi/submit",
                "parameters": [
                    {
                        "description": " ",
                        "name": "submitRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/publicapi.submitRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/publicapi.submitResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/varz": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Utils"
                ],
                "operationId": "varz",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        },
        "/version": {
            "post": {
                "description": "See https://github.com/bacalhau-project/bacalhau/releases for a complete list of `gitversion` tags.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Misc"
                ],
                "summary": "Returns the build version running on the server.",
                "operationId": "apiServer/version",
                "parameters": [
                    {
                        "description": "Request must specify a `client_id`. To retrieve your `client_id`, you can do the following: (1) submit a dummy job to Bacalhau (or use one you created before), (2) run `bacalhau describe \u003cjob-id\u003e` and fetch the `ClientID` field.",
                        "name": "VersionRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/publicapi.VersionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/publicapi.VersionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.BuildVersionInfo": {
            "type": "object",
            "properties": {
                "builddate": {
                    "type": "string",
                    "example": "2022-11-16T14:03:31Z"
                },
                "gitcommit": {
                    "type": "string",
                    "example": "d612b63108f2b5ce1ab2b9e02444eb1dac1d922d"
                },
                "gitversion": {
                    "type": "string",
                    "example": "v0.3.12"
                },
                "goarch": {
                    "type": "string",
                    "example": "amd64"
                },
                "goos": {
                    "type": "string",
                    "example": "linux"
                },
                "major": {
                    "type": "string",
                    "example": "0"
                },
                "minor": {
                    "type": "string",
                    "example": "3"
                }
            }
        },
        "model.ComputeNodeInfo": {
            "type": "object",
            "properties": {
                "AvailableCapacity": {
                    "$ref": "#/definitions/model.ResourceUsageData"
                },
                "EnqueuedExecutions": {
                    "type": "integer"
                },
                "ExecutionEngines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Engine"
                    }
                },
                "MaxCapacity": {
                    "$ref": "#/definitions/model.ResourceUsageData"
                },
                "MaxJobRequirements": {
                    "$ref": "#/definitions/model.ResourceUsageData"
                },
                "RunningExecutions": {
                    "type": "integer"
                }
            }
        },
        "model.Deal": {
            "type": "object",
            "properties": {
                "Concurrency": {
                    "description": "The maximum number of concurrent compute node bids that will be\naccepted by the requester node on behalf of the client.",
                    "type": "integer"
                },
                "Confidence": {
                    "description": "The number of nodes that must agree on a verification result\nthis is used by the different verifiers - for example the\ndeterministic verifier requires the winning group size\nto be at least this size",
                    "type": "integer"
                },
                "MinBids": {
                    "description": "The minimum number of bids that must be received before the Requester\nnode will randomly accept concurrency-many of them. This allows the\nRequester node to get some level of guarantee that the execution of the\njobs will be spread evenly across the network (assuming that this value\nis some large proportion of the size of the network).",
                    "type": "integer"
                }
            }
        },
        "model.Engine": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "x-enum-comments": {
                "EngineLanguage": "wraps python_wasm",
                "EnginePythonWasm": "wraps docker",
                "engineDone": "must be last",
                "engineUnknown": "must be first"
            },
            "x-enum-varnames": [
                "engineUnknown",
                "EngineNoop",
                "EngineDocker",
                "EngineWasm",
                "EngineLanguage",
                "EnginePythonWasm",
                "engineDone"
            ]
        },
        "model.ExecutionState": {
            "type": "object",
            "properties": {
                "ComputeReference": {
                    "description": "Compute node reference for this shard execution",
                    "type": "string"
                },
                "CreateTime": {
                    "description": "CreateTime is the time when the job was created.",
                    "type": "string"
                },
                "JobID": {
                    "description": "JobID the job id",
                    "type": "string"
                },
                "NodeId": {
                    "description": "which node is running this execution",
                    "type": "string"
                },
                "PublishedResults": {
                    "$ref": "#/definitions/model.StorageSpec"
                },
                "RunOutput": {
                    "description": "RunOutput of the job",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.RunCommandResult"
                        }
                    ]
                },
                "ShardIndex": {
                    "description": "what shard is this we are running",
                    "type": "integer"
                },
                "State": {
                    "description": "State is the current state of the execution",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ExecutionStateType"
                        }
                    ]
                },
                "Status": {
                    "description": "an arbitrary status message",
                    "type": "string"
                },
                "UpdateTime": {
                    "description": "UpdateTime is the time when the job state was last updated.",
                    "type": "string"
                },
                "VerificationProposal": {
                    "description": "the proposed results for this execution\nthis will be resolved by the verifier somehow",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "VerificationResult": {
                    "$ref": "#/definitions/model.VerificationResult"
                },
                "Version": {
                    "description": "Version is the version of the job state. It is incremented every time the job state is updated.",
                    "type": "integer"
                }
            }
        },
        "model.ExecutionStateType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11
            ],
            "x-enum-comments": {
                "ExecutionStateBidAccepted": "aka running",
                "ExecutionStateResultAccepted": "aka publishing"
            },
            "x-enum-varnames": [
                "ExecutionStateNew",
                "ExecutionStateAskForBid",
                "ExecutionStateAskForBidAccepted",
                "ExecutionStateAskForBidRejected",
                "ExecutionStateBidAccepted",
                "ExecutionStateBidRejected",
                "ExecutionStateResultProposed",
                "ExecutionStateResultAccepted",
                "ExecutionStateResultRejected",
                "ExecutionStateCompleted",
                "ExecutionStateFailed",
                "ExecutionStateCanceled"
            ]
        },
        "model.Job": {
            "type": "object",
            "properties": {
                "APIVersion": {
                    "type": "string",
                    "example": "V1beta1"
                },
                "Metadata": {
                    "$ref": "#/definitions/model.Metadata"
                },
                "Spec": {
                    "description": "The specification of this job.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Spec"
                        }
                    ]
                }
            }
        },
        "model.JobExecutionPlan": {
            "type": "object",
            "properties": {
                "ShardsTotal": {
                    "description": "how many shards are there in total for this job\nwe are expecting this number x concurrency total\nShardState objects for this job",
                    "type": "integer"
                }
            }
        },
        "model.JobHistory": {
            "type": "object",
            "properties": {
                "Comment": {
                    "type": "string"
                },
                "ComputeReference": {
                    "type": "string"
                },
                "ExecutionState": {
                    "$ref": "#/definitions/model.StateChange-model_ExecutionStateType"
                },
                "JobID": {
                    "type": "string"
                },
                "JobState": {
                    "$ref": "#/definitions/model.StateChange-model_JobStateType"
                },
                "NewVersion": {
                    "type": "integer"
                },
                "NodeID": {
                    "type": "string"
                },
                "ShardIndex": {
                    "type": "integer"
                },
                "ShardState": {
                    "$ref": "#/definitions/model.StateChange-model_ShardStateType"
                },
                "Time": {
                    "type": "string"
                },
                "Type": {
                    "$ref": "#/definitions/model.JobHistoryType"
                }
            }
        },
        "model.JobHistoryType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "jobHistoryTypeUndefined",
                "JobHistoryTypeJobLevel",
                "JobHistoryTypeShardLevel",
                "JobHistoryTypeExecutionLevel"
            ]
        },
        "model.JobRequester": {
            "type": "object",
            "properties": {
                "RequesterNodeID": {
                    "description": "The ID of the requester node that owns this job.",
                    "type": "string",
                    "example": "QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF"
                },
                "RequesterPublicKey": {
                    "description": "The public key of the Requester node that created this job\nThis can be used to encrypt messages back to the creator",
                    "type": "string"
                }
            }
        },
        "model.JobShardingConfig": {
            "type": "object",
            "properties": {
                "BatchSize": {
                    "description": "how many \"items\" are to be processed in each shard\nwe first apply the glob pattern which will result in a flat list of items\nthis number decides how to group that flat list into actual shards run by compute nodes",
                    "type": "integer"
                },
                "GlobPattern": {
                    "description": "divide the inputs up into the smallest possible unit\nfor example /* would mean \"all top level files or folders\"\nthis being an empty string means \"no sharding\"",
                    "type": "string"
                },
                "GlobPatternBasePath": {
                    "description": "when using multiple input volumes\nwhat path do we treat as the common mount path to apply the glob pattern to",
                    "type": "string"
                }
            }
        },
        "model.JobSpecDocker": {
            "type": "object",
            "properties": {
                "Entrypoint": {
                    "description": "optionally override the default entrypoint",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "EnvironmentVariables": {
                    "description": "a map of env to run the container with",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Image": {
                    "description": "this should be pullable by docker",
                    "type": "string"
                },
                "WorkingDirectory": {
                    "description": "working directory inside the container",
                    "type": "string"
                }
            }
        },
        "model.JobSpecLanguage": {
            "type": "object",
            "properties": {
                "Command": {
                    "description": "optional program specified on commandline, like python -c \"print(1+1)\"",
                    "type": "string"
                },
                "DeterministicExecution": {
                    "description": "must this job be run in a deterministic context?",
                    "type": "boolean"
                },
                "JobContext": {
                    "description": "context is a tar file stored in ipfs, containing e.g. source code and requirements",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.StorageSpec"
                        }
                    ]
                },
                "Language": {
                    "description": "e.g. python",
                    "type": "string"
                },
                "LanguageVersion": {
                    "description": "e.g. 3.8",
                    "type": "string"
                },
                "ProgramPath": {
                    "description": "optional program path relative to the context dir. one of Command or ProgramPath must be specified",
                    "type": "string"
                },
                "RequirementsPath": {
                    "description": "optional requirements.txt (or equivalent) path relative to the context dir",
                    "type": "string"
                }
            }
        },
        "model.JobSpecWasm": {
            "type": "object",
            "properties": {
                "EntryModule": {
                    "description": "The module that contains the WASM code to start running.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.StorageSpec"
                        }
                    ]
                },
                "EntryPoint": {
                    "description": "The name of the function in the EntryModule to call to run the job. For\nWASI jobs, this will always be `_start`, but jobs can choose to call\nother WASM functions instead. The EntryPoint must be a zero-parameter\nzero-result function.",
                    "type": "string"
                },
                "EnvironmentVariables": {
                    "description": "The variables available in the environment of the running program.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ImportModules": {
                    "description": "TODO #880: Other WASM modules whose exports will be available as imports\nto the EntryModule.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.StorageSpec"
                    }
                },
                "Parameters": {
                    "description": "The arguments supplied to the program (i.e. as ARGV).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.JobState": {
            "type": "object",
            "properties": {
                "CreateTime": {
                    "description": "CreateTime is the time when the job was created.",
                    "type": "string"
                },
                "JobID": {
                    "description": "JobID is the unique identifier for the job",
                    "type": "string"
                },
                "Shards": {
                    "description": "Shards is a map of shard index to shard state.\nThe number of shards are fixed at the time of job creation.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.ShardState"
                    }
                },
                "State": {
                    "description": "State is the current state of the job",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.JobStateType"
                        }
                    ]
                },
                "TimeoutAt": {
                    "description": "TimeoutAt is the time when the job will be timed out if it is not completed.",
                    "type": "string"
                },
                "UpdateTime": {
                    "description": "UpdateTime is the time when the job state was last updated.",
                    "type": "string"
                },
                "Version": {
                    "description": "Version is the version of the job state. It is incremented every time the job state is updated.",
                    "type": "integer"
                }
            }
        },
        "model.JobStateType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5
            ],
            "x-enum-comments": {
                "JobStateNew": "must be first"
            },
            "x-enum-varnames": [
                "JobStateNew",
                "JobStateInProgress",
                "JobStateCancelled",
                "JobStateError",
                "JobStatePartialError",
                "JobStateCompleted"
            ]
        },
        "model.JobWithInfo": {
            "type": "object",
            "properties": {
                "History": {
                    "description": "History of changes to the job state. Not always populated in the job description",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.JobHistory"
                    }
                },
                "Job": {
                    "description": "Job info",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Job"
                        }
                    ]
                },
                "State": {
                    "description": "The current state of the job",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.JobState"
                        }
                    ]
                }
            }
        },
        "model.LabelSelectorRequirement": {
            "type": "object",
            "properties": {
                "Key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                },
                "Operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/selection.Operator"
                        }
                    ]
                },
                "Values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.Metadata": {
            "type": "object",
            "properties": {
                "ClientID": {
                    "description": "The ID of the client that created this job.",
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                },
                "CreatedAt": {
                    "description": "Time the job was submitted to the bacalhau network.",
                    "type": "string",
                    "example": "2022-11-17T13:29:01.871140291Z"
                },
                "ID": {
                    "description": "The unique global ID of this job in the bacalhau network.",
                    "type": "string",
                    "example": "92d5d4ee-3765-4f78-8353-623f5f26df08"
                },
                "Requester": {
                    "$ref": "#/definitions/model.JobRequester"
                }
            }
        },
        "model.Network": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "NetworkNone",
                "NetworkFull",
                "NetworkHTTP"
            ]
        },
        "model.NetworkConfig": {
            "type": "object",
            "properties": {
                "Domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Type": {
                    "$ref": "#/definitions/model.Network"
                }
            }
        },
        "model.NodeInfo": {
            "type": "object",
            "properties": {
                "BacalhauVersion": {
                    "$ref": "#/definitions/model.BuildVersionInfo"
                },
                "ComputeNodeInfo": {
                    "$ref": "#/definitions/model.ComputeNodeInfo"
                },
                "Labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "NodeType": {
                    "$ref": "#/definitions/model.NodeType"
                },
                "PeerInfo": {
                    "$ref": "#/definitions/peer.AddrInfo"
                }
            }
        },
        "model.NodeType": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "nodeTypeUnknown",
                "NodeTypeCompute"
            ]
        },
        "model.PublishedResult": {
            "type": "object",
            "properties": {
                "Data": {
                    "$ref": "#/definitions/model.StorageSpec"
                },
                "NodeID": {
                    "type": "string"
                },
                "ShardIndex": {
                    "type": "integer"
                }
            }
        },
        "model.Publisher": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5
            ],
            "x-enum-comments": {
                "publisherDone": "must be last",
                "publisherUnknown": "must be first"
            },
            "x-enum-varnames": [
                "publisherUnknown",
                "PublisherNoop",
                "PublisherIpfs",
                "PublisherFilecoin",
                "PublisherEstuary",
                "publisherDone"
            ]
        },
        "model.ResourceUsageConfig": {
            "type": "object",
            "properties": {
                "CPU": {
                    "description": "https://github.com/BTBurke/k8sresource string",
                    "type": "string"
                },
                "Disk": {
                    "type": "string"
                },
                "GPU": {
                    "description": "unsigned integer string",
                    "type": "string"
                },
                "Memory": {
                    "description": "github.com/c2h5oh/datasize string",
                    "type": "string"
                }
            }
        },
        "model.ResourceUsageData": {
            "type": "object",
            "properties": {
                "CPU": {
                    "description": "cpu units",
                    "type": "number",
                    "example": 9.600000000000001
                },
                "Disk": {
                    "description": "bytes",
                    "type": "integer",
                    "example": 212663867801
                },
                "GPU": {
                    "type": "integer",
                    "example": 1
                },
                "Memory": {
                    "description": "bytes",
                    "type": "integer",
                    "example": 27487790694
                }
            }
        },
        "model.RunCommandResult": {
            "type": "object",
            "properties": {
                "exitCode": {
                    "description": "exit code of the run.",
                    "type": "integer"
                },
                "runnerError": {
                    "description": "Runner error",
                    "type": "string"
                },
                "stderr": {
                    "description": "stderr of the run.",
                    "type": "string"
                },
                "stderrtruncated": {
                    "description": "bool describing if stderr was truncated",
                    "type": "boolean"
                },
                "stdout": {
                    "description": "stdout of the run. Yaml provided for `describe` output",
                    "type": "string"
                },
                "stdouttruncated": {
                    "description": "bool describing if stdout was truncated",
                    "type": "boolean"
                }
            }
        },
        "model.ShardState": {
            "type": "object",
            "properties": {
                "CreateTime": {
                    "description": "CreateTime is the time when the shard was created, which is the same as the job creation time.",
                    "type": "string"
                },
                "Executions": {
                    "description": "Executions is a list of executions of the shard across the nodes.\nA new execution is created when a node is selected to execute the shard, and a node can have multiple executions for the same\nshard due to retries, but there can only be a single active execution per node at any given time.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ExecutionState"
                    }
                },
                "JobID": {
                    "description": "JobID is the unique identifier for the job",
                    "type": "string"
                },
                "ShardIndex": {
                    "description": "ShardIndex is the index of the shard in the job",
                    "type": "integer"
                },
                "State": {
                    "description": "State is the current state of the shard",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ShardStateType"
                        }
                    ]
                },
                "UpdateTime": {
                    "description": "UpdateTime is the time when the shard state was last updated.",
                    "type": "string"
                },
                "Version": {
                    "description": "Version is the version of the shard state. It is incremented every time the shard state is updated.",
                    "type": "integer"
                }
            }
        },
        "model.ShardStateType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4
            ],
            "x-enum-varnames": [
                "ShardStateNew",
                "ShardStateInProgress",
                "ShardStateCancelled",
                "ShardStateError",
                "ShardStateCompleted"
            ]
        },
        "model.Spec": {
            "type": "object",
            "properties": {
                "Annotations": {
                    "description": "Annotations on the job - could be user or machine assigned",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Contexts": {
                    "description": "Input volumes that will not be sharded\nfor example to upload code into a base image\nevery shard will get the full range of context volumes",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.StorageSpec"
                    }
                },
                "Deal": {
                    "description": "The deal the client has made, such as which job bids they have accepted.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Deal"
                        }
                    ]
                },
                "DoNotTrack": {
                    "description": "Do not track specified by the client",
                    "type": "boolean"
                },
                "Docker": {
                    "description": "executor specific data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.JobSpecDocker"
                        }
                    ]
                },
                "Engine": {
                    "description": "e.g. docker or language",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Engine"
                        }
                    ]
                },
                "ExecutionPlan": {
                    "description": "how will this job be executed by nodes on the network",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.JobExecutionPlan"
                        }
                    ]
                },
                "Language": {
                    "$ref": "#/definitions/model.JobSpecLanguage"
                },
                "Network": {
                    "description": "The type of networking access that the job needs",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.NetworkConfig"
                        }
                    ]
                },
                "NodeSelectors": {
                    "description": "NodeSelectors is a selector which must be true for the compute node to run this job.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.LabelSelectorRequirement"
                    }
                },
                "Publisher": {
                    "description": "there can be multiple publishers for the job",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Publisher"
                        }
                    ]
                },
                "Resources": {
                    "description": "the compute (cpu, ram) resources this job requires",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ResourceUsageConfig"
                        }
                    ]
                },
                "Sharding": {
                    "description": "the sharding config for this job\ndescribes how the job might be split up into parallel shards",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.JobShardingConfig"
                        }
                    ]
                },
                "Timeout": {
                    "description": "How long a job can run in seconds before it is killed.\nThis includes the time required to run, verify and publish results",
                    "type": "number"
                },
                "Verifier": {
                    "$ref": "#/definitions/model.Verifier"
                },
                "Wasm": {
                    "$ref": "#/definitions/model.JobSpecWasm"
                },
                "inputs": {
                    "description": "the data volumes we will read in the job\nfor example \"read this ipfs cid\"\nTODO: #667 Replace with \"Inputs\", \"Outputs\" (note the caps) for yaml/json when we update the n.js file",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.StorageSpec"
                    }
                },
                "outputs": {
                    "description": "the data volumes we will write in the job\nfor example \"write the results to ipfs\"",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.StorageSpec"
                    }
                }
            }
        },
        "model.StateChange-model_ExecutionStateType": {
            "type": "object",
            "properties": {
                "New": {
                    "$ref": "#/definitions/model.ExecutionStateType"
                },
                "Previous": {
                    "$ref": "#/definitions/model.ExecutionStateType"
                }
            }
        },
        "model.StateChange-model_JobStateType": {
            "type": "object",
            "properties": {
                "New": {
                    "$ref": "#/definitions/model.JobStateType"
                },
                "Previous": {
                    "$ref": "#/definitions/model.JobStateType"
                }
            }
        },
        "model.StateChange-model_ShardStateType": {
            "type": "object",
            "properties": {
                "New": {
                    "$ref": "#/definitions/model.ShardStateType"
                },
                "Previous": {
                    "$ref": "#/definitions/model.ShardStateType"
                }
            }
        },
        "model.StorageSourceType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "x-enum-comments": {
                "storageSourceDone": "must be last",
                "storageSourceUnknown": "must be first"
            },
            "x-enum-varnames": [
                "storageSourceUnknown",
                "StorageSourceIPFS",
                "StorageSourceURLDownload",
                "StorageSourceFilecoinUnsealed",
                "StorageSourceFilecoin",
                "StorageSourceEstuary",
                "StorageSourceInline",
                "StorageSourceLocalDirectory",
                "storageSourceDone"
            ]
        },
        "model.StorageSpec": {
            "type": "object",
            "properties": {
                "CID": {
                    "description": "The unique ID of the data, where it makes sense (for example, in an\nIPFS storage spec this will be the data's CID).\nNOTE: The below is capitalized to match IPFS \u0026 IPLD (even though it's out of golang fmt)",
                    "type": "string",
                    "example": "QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe"
                },
                "Metadata": {
                    "description": "Additional properties specific to each driver",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "Name": {
                    "description": "Name of the spec's data, for reference.",
                    "type": "string",
                    "example": "job-9304c616-291f-41ad-b862-54e133c0149e-shard-0-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL"
                },
                "SourcePath": {
                    "description": "The path of the host data if we are using local directory paths",
                    "type": "string"
                },
                "StorageSource": {
                    "description": "StorageSource is the abstract source of the data. E.g. a storage source\nmight be a URL download, but doesn't specify how the execution engine\ndoes the download or what it will do with the downloaded data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.StorageSourceType"
                        }
                    ]
                },
                "URL": {
                    "description": "Source URL of the data",
                    "type": "string"
                },
                "path": {
                    "description": "The path that the spec's data should be mounted on, where it makes\nsense (for example, in a Docker storage spec this will be a filesystem\npath).\nTODO: #668 Replace with \"Path\" (note the caps) for yaml/json when we update the n.js file",
                    "type": "string"
                }
            }
        },
        "model.VerificationResult": {
            "type": "object",
            "properties": {
                "Complete": {
                    "type": "boolean"
                },
                "Result": {
                    "type": "boolean"
                }
            }
        },
        "model.Verifier": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3
            ],
            "x-enum-comments": {
                "verifierDone": "must be last",
                "verifierUnknown": "must be first"
            },
            "x-enum-varnames": [
                "verifierUnknown",
                "VerifierNoop",
                "VerifierDeterministic",
                "verifierDone"
            ]
        },
        "peer.AddrInfo": {
            "type": "object",
            "properties": {
                "addrs": {
                    "type": "array",
                    "items": {}
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "publicapi.VersionRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                }
            }
        },
        "publicapi.VersionResponse": {
            "type": "object",
            "properties": {
                "build_version_info": {
                    "$ref": "#/definitions/model.BuildVersionInfo"
                }
            }
        },
        "publicapi.cancelRequest": {
            "type": "object",
            "required": [
                "client_public_key",
                "job_cancel_payload",
                "signature"
            ],
            "properties": {
                "client_public_key": {
                    "description": "The base64-encoded public key of the client:",
                    "type": "string"
                },
                "job_cancel_payload": {
                    "description": "The data needed to cancel a running job on the network",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "signature": {
                    "description": "A base64-encoded signature of the data, signed by the client:",
                    "type": "string"
                }
            }
        },
        "publicapi.cancelResponse": {
            "type": "object",
            "properties": {
                "state": {
                    "$ref": "#/definitions/model.JobState"
                }
            }
        },
        "publicapi.eventsRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                },
                "job_id": {
                    "type": "string",
                    "example": "9304c616-291f-41ad-b862-54e133c0149e"
                }
            }
        },
        "publicapi.eventsResponse": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.JobHistory"
                    }
                }
            }
        },
        "publicapi.listRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                },
                "exclude_tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['any-tag']"
                    ]
                },
                "id": {
                    "type": "string",
                    "example": "9304c616-291f-41ad-b862-54e133c0149e"
                },
                "include_tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['any-tag']"
                    ]
                },
                "max_jobs": {
                    "type": "integer",
                    "example": 10
                },
                "return_all": {
                    "type": "boolean"
                },
                "sort_by": {
                    "type": "string",
                    "example": "created_at"
                },
                "sort_reverse": {
                    "type": "boolean"
                }
            }
        },
        "publicapi.listResponse": {
            "type": "object",
            "properties": {
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.JobWithInfo"
                    }
                }
            }
        },
        "publicapi.resultsResponse": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PublishedResult"
                    }
                }
            }
        },
        "publicapi.stateRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                },
                "job_id": {
                    "type": "string",
                    "example": "9304c616-291f-41ad-b862-54e133c0149e"
                }
            }
        },
        "publicapi.stateResponse": {
            "type": "object",
            "properties": {
                "state": {
                    "$ref": "#/definitions/model.JobState"
                }
            }
        },
        "publicapi.submitRequest": {
            "type": "object",
            "required": [
                "client_public_key",
                "job_create_payload",
                "signature"
            ],
            "properties": {
                "client_public_key": {
                    "description": "The base64-encoded public key of the client:",
                    "type": "string"
                },
                "job_create_payload": {
                    "description": "The data needed to submit and run a job on the network:",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "signature": {
                    "description": "A base64-encoded signature of the data, signed by the client:",
                    "type": "string"
                }
            }
        },
        "publicapi.submitResponse": {
            "type": "object",
            "properties": {
                "job": {
                    "$ref": "#/definitions/model.Job"
                }
            }
        },
        "selection.Operator": {
            "type": "string",
            "enum": [
                "!",
                "=",
                "==",
                "in",
                "!=",
                "notin",
                "exists",
                "gt",
                "lt"
            ],
            "x-enum-varnames": [
                "DoesNotExist",
                "Equals",
                "DoubleEquals",
                "In",
                "NotEquals",
                "NotIn",
                "Exists",
                "GreaterThan",
                "LessThan"
            ]
        },
        "types.FreeSpace": {
            "type": "object",
            "properties": {
                "IPFSMount": {
                    "$ref": "#/definitions/types.MountStatus"
                },
                "root": {
                    "$ref": "#/definitions/types.MountStatus"
                },
                "tmp": {
                    "$ref": "#/definitions/types.MountStatus"
                }
            }
        },
        "types.HealthInfo": {
            "type": "object",
            "properties": {
                "FreeSpace": {
                    "$ref": "#/definitions/types.FreeSpace"
                }
            }
        },
        "types.MountStatus": {
            "type": "object",
            "properties": {
                "All": {
                    "type": "integer"
                },
                "Free": {
                    "type": "integer"
                },
                "Used": {
                    "type": "integer"
                }
            }
        }
    }
}