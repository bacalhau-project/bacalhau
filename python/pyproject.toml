[tool]
[tool.poetry]
name = "bacalhau-sdk"
version = "1.2.1"
homepage = "https://github.com/bacalhau-project/bacalhau/"
repository = "https://github.com/bacalhau-project/bacalhau/"
documentation = "https://docs.bacalhau.org/"
keywords = [
    "bacalhau",
    "Filecoin",
    "IPFS",
    "cod",
    "compute over data",
    "verifiable computation",
]
description = "Compute over Data framework for public, transparent, and optionally verifiable computation using IPFS & Filecoin."
authors = ["Enrico Rotundo <team@bacalhau.org>"]
readme = "README.md"
license = "Apache-2.0"
classifiers = [
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: Apache Software License',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
]
packages = [
    { include = "bacalhau_sdk" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = ">=3.8.1,<3.12"
mypy = ">=1.9"
tox = { version = "^4.2.6", optional = true }
virtualenv = { version = "^20.2.2", optional = true }
twine = { version = "^4.0.2", optional = true }
pre-commit = ">=2.12.0"
toml = { version = "^0.10.2", optional = true }
pem = "^23.1.0"
pycryptodome = "^3.20.0"
cryptography = ">=42.0.0,<43.0.0"
six = "^1.16.0"
types-six = "^1.16.21.4"
bacalhau-apiclient = ">=1.0.0"
pygments = "2.17.2"
certifi = "2024.2.2"
ruff = "^0.3.4"

[tool.poetry.extras]


[tool.poetry.group.dev.dependencies]
tox = "^4.2.6"
pre-commit = "^2.21.0"
virtualenv = "^20.17.1"
pip = ">=24.0.0"
twine = "^4.0.2"
toml = "^0.10.2"
bump2version = "^1.0.1"


[tool.poetry.group.test.dependencies]
ruff = "^0.3.4"
mypy = "^1.9"
pytest-cov = "^4.0.0"
pytest = "^8.0.2"


[tool.poetry.group.doc.dependencies]
mkdocs = "^1.5.3"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/bacalhau-project/bacalhau/issues"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
