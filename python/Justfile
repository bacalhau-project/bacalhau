set shell := ["bash", "-c"]
set windows-shell := ["powershell.exe", "-NoLogo", "-Command"]
set allow-duplicate-recipes
set positional-arguments
set dotenv-load
set export

SOURCES:="bacalhau_sdk"

@default:
	just --list

# Run pre-commit hooks
pre-commit:
	poetry run pre-commit run --files ./**/*

install-deps:
	poetry install --no-root --no-interaction --no-ansi --with test
	poetry run pre-commit install

# Setup the environment
setup: pre-commit install-deps

build: install-deps
	python get_pypi_token.py
	PYPI_VERSION=$VERSION

	# Exit with error if PYPI_VERSION environment variable is not set
	test -n $PYPI_VERSION || (echo "PYPI_VERSION environment variable not set" && exit 1)
	# Test to see if poetry version is same as the one in pyproject.toml
	poetry version -- $PYPI_VERSION

	echo "Below will give errors about git repo - it will be fixed when this releases: https://github.com/python-poetry/poetry/issues/8728"
	poetry build

# Run tests
test: unittest coverage

# Lint the code with ruff
ruff:
	poetry run ruff $SOURCES tests examples

# Run unittests
unittest:
	poetry run pytest --capture=no --log-cli-level=DEBUG

# Run coverage tests
coverage:
	poetry run pytest --cov=$SOURCES --cov-branch --cov-report=term-missing tests

# Clean the environment
clean:
	rm -rf .mypy_cache .pytest_cache
	rm -rf *.egg-info
	rm -rf .tox dist site
	rm -rf coverage.xml .coverage

install-twine: install-deps
	python3 -m pip install --upgrade twine

publish: install-twine
	#!/usr/bin/env python
	import os
	import sys
	import subprocess

	def error(message):
		print(message, file=sys.stderr)
		sys.exit(1)

	RELEASE_PYTHON_PACKAGES = os.getenv('RELEASE_PYTHON_PACKAGES')
	REPOSITORY_URL = "" if RELEASE_PYTHON_PACKAGES == "1" else "https://test.pypi.org/legacy/"
	REPOSITORY_FLAG = f"--repository-url" if REPOSITORY_URL else ""
	print(f"Publishing to '{REPOSITORY_FLAG} {REPOSITORY_URL}' repository (empty means default)")

	TOKEN = os.getenv('PYPI_TOKEN') if RELEASE_PYTHON_PACKAGES == "1" else os.getenv('TEST_PYPI_TOKEN')
	if not TOKEN:
		error(f"TOKEN (RELEASE_PYTHON_PACKAGES={RELEASE_PYTHON_PACKAGES}) not found")

	subprocess.run([
		"python3", "-m", "twine", "upload",
		"--non-interactive",
		"--disable-progress-bar",
		"--skip-existing",
		"-u", "__token__", "-p", TOKEN,
		"--verbose",
		"dist/*",
		REPOSITORY_FLAG,
		REPOSITORY_URL
	], check=True)

	print(f"Package uploaded to {REPOSITORY_FLAG}")
