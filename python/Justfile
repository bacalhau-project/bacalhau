set shell := ["sh", "-c"]
set windows-shell := ["powershell.exe", "-NoLogo", "-Command"]
set allow-duplicate-recipes
set positional-arguments
set dotenv-load
set export

SOURCES := bacalhau_sdk

@default:
	just --list

# Setup the environment
setup:
	install-deps
	check-python-version-is-same-as-in-pyproject

# Run pre-commit hooks
pre-commit:
	poetry run pre-commit run --files ./**/*

install-deps:
	poetry install --no-root --no-interaction --no-ansi --with test
	poetry run pre-commit install

check-python-version-is-same-as-in-pyproject:
	poetry version --check

build: install-deps check-python-version-is-same-as-in-pyproject ruff
	python get_pypi_token.py
	PYPI_VERSION=$VERSION

	# Exit with error if PYPI_VERSION environment variable is not set
	test -n $PYPI_VERSION || (echo "PYPI_VERSION environment variable not set" && exit 1)
	# Test to see if poetry version is same as the one in pyproject.toml
	poetry version -- $PYPI_VERSION
	
	echo "Below will give errors about git repo - it will be fixed when this releases: https://github.com/python-poetry/poetry/issues/8728"
	poetry build

# Run tests
test: unittest coverage

# Lint the code with ruff
ruff:
	poetry run ruff $SOURCES tests examples

# Run unittests
unittest:
	poetry run pytest --capture=no --log-cli-level=DEBUG

# Run coverage tests
coverage:
	poetry run pytest --cov=$SOURCES --cov-branch --cov-report=term-missing tests

# Clean the environment
clean:
	rm -rf .mypy_cache .pytest_cache
	rm -rf *.egg-info
	rm -rf .tox dist site
	rm -rf coverage.xml .coverage

install-twine: install-deps
	python3 -m pip install --upgrade twine

publish: install-twine
	test -n $RELEASE_PYTHON_PACKAGES || (echo "RELEASE_PYTHON_PACKAGES environment variable not set" && exit 1)
	REPOSITORY_FLAG="--repository-url https://test.pypi.org/legacy/"
	if [ "${RELEASE_PYTHON_PACKAGES}" = 1 ] {
		echo "Publishing to pypi.org"
		REPOSITORY_FLAG=""
		test -n "${PYPI_TOKEN}" || (echo "PYPI_TOKEN not found" && exit 1)
		python3 -m twine upload \
			--non-interactive \
			--disable-progress-bar \
			--skip-existing \
			-u __token__ -p ${PYPI_TOKEN} \
			--verbose \
			dist/* \
			${REPOSITORY_FLAG}
	} else {
		echo "Publishing to test.pypi.org"
		test -n "${TEST_PYPI_TOKEN}" || (echo "TEST_PYPI_TOKEN not found" && exit 1)
		python3 -m twine upload \
			--non-interactive \
			--disable-progress-bar \
			--skip-existing \
			-u __token__ -p ${TEST_PYPI_TOKEN} \
			--verbose \
			dist/* \
			${REPOSITORY_FLAG}
	}

	echo "Package uploaded to ${REPOSITORY_FLAG}"
