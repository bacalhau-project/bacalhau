name: Release Bacalhau binaries

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)"
        required: false
        default: "false"

jobs:
  release:
    name: Build and Release ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.runner }}
    env:
      GOVER: ${{ matrix.go_version }}
      GOLANGCILINT_VER: v1.46
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
      MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
    strategy:
      fail-fast: false
      matrix:
        # GitHub Actions does not yet support Arm or Arm64
        # name: [macOS-arm64, macOS-amd64, ubuntu-arm, ubuntu-arm64, ubuntu-amd64]
        name: [macOS-arm64, macOS-amd64, ubuntu-amd64]
        go_version: [1.18.3]
        include:
          # - {
          #     name: ubuntu-arm,
          #     os: ubuntu-latest,
          #     target_os: linux,
          #     runner: ubuntu-latest,
          #     target_arch: arm,
          #   }
          # - {
          #     name: ubuntu-arm64,
          #     os: ubuntu-latest,
          #     target_os: linux,
          #     runner: ubuntu-latest,
          #     target_arch: arm64,
          #   }
          - {
              name: ubuntu-amd64,
              os: ubuntu-latest,
              target_os: linux,
              runner: ubuntu-latest,
              target_arch: amd64,
            }
          - {
              name: macOS-arm64,
              os: macOS-latest,
              target_os: darwin,
              runner: ubuntu-latest,
              target_arch: arm64,
            }
          - {
              name: macOS-amd64,
              os: macOS-latest,
              target_os: darwin,
              runner: macOS-latest,
              target_arch: amd64,
            }

    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-go@v3
        with:
          go-version: "^1.18.3" # The Go version to download (if necessary) and use.

      - name: echo PATH
        run: echo $PATH

      - name: Print go version
        run: go version

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ matrix.target_os }}-${{ matrix.target_arch }}-go-${{ env.GOVER }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.target_os }}-${{ matrix.target_arch }}-go-${{ env.GOVER }}-build-

      - run: 'echo "$PRIVATE_PEM" > /tmp/private.pem'
        shell: bash
        env:
          PRIVATE_PEM: ${{secrets.PRIVATE_PEM}}

      #       - uses: evantorrie/mott-the-tidier@v1-beta
      #         with:
      #           gomods: |
      #             **/go.mod
      #             -tools/go.mod
      #       - uses: stefanzweifel/git-auto-commit-action@v4
      #         with:
      #           commit_message: Auto-fix go.sum discrepancies

      - name: golangci-lint
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: golangci/golangci-lint-action@v3.2.0
        with:
          version: ${{ env.GOLANGCILINT_VER }}

      - name: Run go mod tidy check diff
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: make modtidy check-diff

      - name: Build
        run: GOOS=${{ matrix.target_os }} GOOARCH=${{ matrix.target_arch }} GO111MODULE=on make build

      # - name: Install gon
      #   run: brew install mitchellh/gon/gon

      # - name: Generate .gon.json
      #   run: |-
      #     sh -c '
      #     cat > $RUNNER_TEMP/.gon.json << EOF
      #     {
      #         "source": ["./bin/${{ matrix.target_os }}_${{ matrix.target_arch }}/bacalhau"],
      #         "bundle_id": "org.bacalhau",
      #         "apple_id": {
      #             "username": "davidaronchick@hotmail.com",
      #             "password": "@env:APPLE_DEVELOPER_ID_PASSWORD"
      #         },
      #         "sign": {
      #             "application_identity": "Developer ID Application: David Aronchick (A4J58RH62D)"
      #         }
      #     }
      #     EOF
      #     '

      # - name: Codesign create keychain
      #   run: |
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12

      #     [ -f "$RUNNER_TEMP/app-signing.keychain-db"] && security delete-keychain $RUNNER_TEMP/app-signing.keychain-db

      #     # Reusing MACOS_CERTIFICATE_PWD for both the build.keychain password and the cert password for convenience.
      #     # Doesn't seem like this would be an issue.
      #     echo -n "$MACOS_CERTIFICATE" | base64 --decode --output $CERTIFICATE_PATH

      #     # create temporary keychain
      #     security create-keychain -p "$MACOS_CERTIFICATE_PWD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "$MACOS_CERTIFICATE_PWD" $KEYCHAIN_PATH

      #     # import certificate to keychain
      #     security import $CERTIFICATE_PATH -P "$MACOS_CERTIFICATE_PWD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH
      #     security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_CERTIFICATE_PWD $KEYCHAIN_PATH

      # - name: Use gon to sign
      #   run: |
      #     gon $RUNNER_TEMP/.gon.json

      - name: Build tarball
        run: |
          GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} make build-bacalhau-tgz
          echo ${{ github.sha }} > Release.txt
        env:
          PRIVATE_KEY_PASSPHRASE: ${{secrets.PRIVATE_KEY_PASSPHRASE}}

      - name: Generate Changelog
        run: echo "# Release Notes" > CHANGELOG.txt

      - name: Release
        uses: softprops/action-gh-release@master
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ env.BINARY_TARBALL }}
            ${{ env.BINARY_TARBALL_SIGNATURE }}
          body_path: CHANGELOG.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
