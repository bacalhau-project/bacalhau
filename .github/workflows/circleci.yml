name: CircleCI Trigger Action
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - main
    tags:
      - v**
  workflow_run:
    workflows: ["Dependabot", "Trigger on Comment"]
    types:
      - completed
  repository_dispatch:
    types: [ok-to-test, ok-to-trigger-circleci]

permissions:
  contents: write
  pull-requests: write

jobs:
  trigger-circle-ci:
    if: |
      github.event_name != 'pull_request' ||
      (
        !contains(github.event.pull_request.labels.*.name, 'do-not-merge') &&
        !contains(github.event.pull_request.labels.*.name, 'wip')
      )
    runs-on: ubuntu-latest
    name: Pull Request Triggered CircleCI
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - uses: actions/checkout@v3
      - if: ${{ github.event_name != 'pull_request' }}
        run: echo "Not a pull request. Exiting."
      - name: Set up SHA
        id: set-sha
        run: |
          if [[ -n "${{ github.event.client_payload.sha }}" ]]; then
            echo "SHA=${{ github.event.client_payload.sha }}" >> $GITHUB_ENV
          elif [[ -n "${{ github.event.pull_request.head.sha }}" ]]; then
            echo "SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          elif [[ -n "${{ github.sha }}" ]]; then
            echo "SHA=${{ github.sha }}" >> $GITHUB_ENV
          else
            echo "No SHA set. Exiting."
            exit 1
          fi

      - name: "Trigger CircleCI"
        id: trigger-circle-ci
        run: |
          python -m pip install poetry
          poetry install
          source $(poetry env info --path)/bin/activate
          python ./.circleci/trigger_circleci.py
        env:
          CIRCLE_TOKEN: ${{ secrets.CIRCLE_CI_TOKEN }}
          BRANCH: ${{ env.SHA }}
