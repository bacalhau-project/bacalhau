name: Reusable Test Workflow

on:
  workflow_call:
    inputs:
      go_version_file:
        description: "Path to the file containing Go version"
        required: false
        default: "go.work"
        type: string
      test_name:
        description: "Name for test reports and artifacts"
        required: true
        type: string
      test_path:
        description: "Path to the directory containing tests"
        required: false
        default: "./pkg/... ./cmd/..."
        type: string
      test_working_dir:
        description: "Working directory to run tests from"
        required: false
        default: "."
        type: string
      timeout_minutes:
        description: "Timeout for tests in minutes"
        required: false
        default: 30
        type: number
      build_binary:
        description: "Whether to build a binary for tests"
        required: false
        default: false
        type: boolean
      download_binary:
        description: "Whether to download a binary for tests"
        required: false
        default: false
        type: boolean
      binary_artifact_name:
        description: "Name of the artifact containing the binary"
        required: false
        default: "linux-amd64"
        type: string
      binary_output_path:
        description: "Output path for binary"
        required: false
        default: ""
        type: string
      test_args:
        description: "Arguments to pass to go test (e.g., -p, --tags)"
        required: false
        default: ""
        type: string
      environment_name:
        description: "GitHub Environment to use"
        required: false
        default: "test"
        type: string
      install_ipfs:
        description: "Whether to install IPFS for tests"
        required: false
        default: false
        type: boolean
      coverage_packages:
        description: "Comma-separated list of packages to include in coverage"
        required: false
        default: "github.com/bacalhau-project/bacalhau/pkg/...,github.com/bacalhau-project/bacalhau/cmd/..."
        type: string

jobs:
  run-tests:
    name: Run
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout_minutes }}
    environment: ${{ inputs.environment_name }}
    # Define key paths relative to repository root
    env:
      REPO_ROOT: ${{ github.workspace }}
      REPORTS_DIR: ${{ github.workspace }}/reports
      COVERAGE_DIR: ${{ github.workspace }}/coverage

    # Configure all shell commands to run with sudo
    defaults:
      run:
        shell: sudo bash -e {0}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ inputs.go_version_file }}
          cache: true

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Create directories
        run: |
          mkdir -p ${{ env.REPORTS_DIR }}
          mkdir -p ${{ env.COVERAGE_DIR }}
          chmod -R 777 ${{ env.REPORTS_DIR }}
          chmod -R 777 ${{ env.COVERAGE_DIR }}

      - name: Download binary (if required)
        if: inputs.download_binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.binary_artifact_name }}
          path: compiled-artifacts/

      - name: Setup downloaded binary (if required)
        if: inputs.download_binary
        run: |
          # Extract and copy binary to the specified location
          cd compiled-artifacts
          tar -xzf bacalhau_*.tar.gz

          # Create directory for binary if it doesn't exist
          mkdir -p $(dirname ${{ inputs.binary_output_path }})

          # Copy binary to the specified location and make it executable
          cp ./bacalhau ${{ inputs.binary_output_path }}
          chmod +x ${{ inputs.binary_output_path }}

          # Verify binary works
          ${{ inputs.binary_output_path }} version

      - name: Build binary (if required)
        if: inputs.build_binary && !inputs.download_binary
        run: |
          # Build the binary for tests
          TAG=$(git describe --tags --always)
          GOOS=linux GOARCH=amd64 go build -o ${{ inputs.binary_output_path }} \
            -v -ldflags="-X 'github.com/bacalhau-project/bacalhau/pkg/version.GITVERSION=${TAG}'" .

          # Ensure the binary is executable
          chmod +x ${{ inputs.binary_output_path }}
          # Verify binary works
          ${{ inputs.binary_output_path }} version

      - name: Install IPFS (if required)
        if: inputs.install_ipfs
        run: |
          # Install IPFS
          wget https://dist.ipfs.tech/kubo/v0.18.1/kubo_v0.18.1_linux-amd64.tar.gz
          tar -xvzf kubo_v0.18.1_linux-amd64.tar.gz
          mv kubo/ipfs /usr/local/bin/ipfs
          ipfs init
          ipfs config Addresses.API /ip4/127.0.0.1/tcp/5001
          ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080
          ipfs daemon --offline &
          export BACALHAU_IPFS_CONNECT=/ip4/127.0.0.1/tcp/5001

      - name: Run tests
        working-directory: ${{ inputs.test_working_dir }}
        run: |
            # Create base test command
            TEST_CMD="gotestsum \
            --junitfile ${{ env.REPORTS_DIR }}/${{ inputs.test_name }}.xml \
              --format testname \
            --jsonfile ${{ env.REPORTS_DIR }}/${{ inputs.test_name }}.json \
            -- \
              ${{ inputs.test_path }}"
            
            # Only add coverage flags if coverage_packages is not empty
            if [ ! -z "${{ inputs.coverage_packages }}" ]; then
              TEST_CMD="$TEST_CMD \
              -coverpkg=${{ inputs.coverage_packages }} \
              -coverprofile=${{ env.COVERAGE_DIR }}/${{ inputs.test_name }}.coverage"
            fi
            
            # Add any additional test args
            TEST_CMD="$TEST_CMD ${{ inputs.test_args }}"
            
            # Run the constructed command
            echo "Running: $TEST_CMD"
            eval $TEST_CMD

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: "!cancelled()"
        with:
          name: ${{ inputs.test_name }} Report
          path: ${{ env.REPORTS_DIR }}/${{ inputs.test_name }}.xml
          max-annotations: "50"
          reporter: java-junit
          fail-on-error: false

      - name: Generate HTML coverage report
        if: inputs.coverage_packages != ''
        run: |
          go tool cover -html=${{ env.COVERAGE_DIR }}/${{ inputs.test_name }}.coverage \
                        -o ${{ env.COVERAGE_DIR }}/${{ inputs.test_name }}.html

      - name: Upload Test Reports as Artifacts
        uses: actions/upload-artifact@v4
        if: "!cancelled()"
        with:
          name: ${{ inputs.test_name }}-reports
          path: |
            ${{ env.REPORTS_DIR }}/${{ inputs.test_name }}.xml
            ${{ env.REPORTS_DIR }}/${{ inputs.test_name }}.json
            ${{ env.COVERAGE_DIR }}/${{ inputs.test_name }}.coverage
            ${{ env.COVERAGE_DIR }}/${{ inputs.test_name }}.html
          retention-days: 30
