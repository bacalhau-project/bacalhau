name: Go

on:
  push:
    branches:
      - "*"
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)"
        required: false
        default: "false"

jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.runner }}
    env:
      GOVER: ${{ matrix.go_version }}
      GOLANGCILINT_VER: v1.45
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
    strategy:
      fail-fast: false
      matrix:
        # GitHub Actions does not yet support Arm or Arm64
        # name: [macOS-arm64, macOS-amd64, ubuntu-arm, ubuntu-arm64, ubuntu-amd64]
        name: [macOS-arm64, macOS-amd64, ubuntu-amd64]
        go_version: [1.18.3]
        include:
          # - {
          #     name: ubuntu-arm,
          #     os: ubuntu-latest,
          #     target_os: linux,
          #     runner: ubuntu-latest,
          #     target_arch: arm,
          #   }
          # - {
          #     name: ubuntu-arm64,
          #     os: ubuntu-latest,
          #     target_os: linux,
          #     runner: ubuntu-latest,
          #     target_arch: arm64,
          #   }
          - {
              name: ubuntu-amd64,
              os: ubuntu-latest,
              target_os: linux,
              runner: ubuntu-latest,
              target_arch: amd64,
            }
          - {
              name: macOS-arm64,
              os: macOS-latest,
              target_os: darwin,
              runner: M1,
              target_arch: arm64,
            }
          - {
              name: macOS-amd64,
              os: macOS-latest,
              target_os: darwin,
              runner: macOS-latest,
              target_arch: amd64,
            }

    steps:
      - uses: actions/checkout@main
      - name: Install go@1.18
        run: |
          curl -L -O https://go.dev/dl/go${{ env.GOVER }}.${{ matrix.target_os }}-${{ matrix.target_arch }}.tar.gz
          sudo rm -rf /usr/local/go 
          sudo tar -C /usr/local -xzf go${{ env.GOVER }}.${{ matrix.target_os }}-${{ matrix.target_arch }}.tar.gz

      - name: echo PATH
        run: echo $PATH

      - name: Print go version
        run: go version

      - name: Cache Go modules (Linux)
        if: matrix.target_os == 'linux'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ matrix.target_os }}-${{ matrix.target_arch }}-go-${{ env.GOVER }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.target_os }}-${{ matrix.target_arch }}-go-${{ env.GOVER }}-build-
      - name: Cache Go modules (macOS)
        if: matrix.target_os == 'darwin'
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ matrix.target_os }}-${{ matrix.target_arch }}-go-${{ env.GOVER }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ matrix.target_os }}-${{ matrix.target_arch }}-go-${{ env.GOVER }}-build-

      - name: Set up Honeycomb Otel from Github Secret
        run: |
          mkdir -p $HOME/.bacalhau
          echo "${{ secrets.HONEYCOMB_OTEL_KEY }}" >> $HOME/.bacalhau/config.toml

      - name: Debugging with tmate
        uses: mxschmitt/action-tmate@v3.11
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

      - name: golangci-lint
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: golangci/golangci-lint-action@v3.1.0
        with:
          version: ${{ env.GOLANGCILINT_VER }}

      - name: Run go mod tidy check diff
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: make modtidy check-diff

      - name: Debugging with tmate
        uses: mxschmitt/action-tmate@v3.11
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

      - name: Build
        run: make build

      - name: Install IPFS
        run: |
          curl -L -O https://dist.ipfs.io/go-ipfs/v0.12.2/go-ipfs_v0.12.2_${{ matrix.target_os }}-${{ matrix.target_arch }}.tar.gz
          tar -xvzf go-ipfs_v0.12.2_${{ matrix.target_os }}-${{ matrix.target_arch }}.tar.gz
          cd go-ipfs
          sudo bash install.sh

      - name: Test
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: make test

      - name: setup gcloud
        uses: google-github-actions/setup-gcloud@v0
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_DEVELOPMENT_CREDENTIALS}}

      - name: terraform init
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: |
          gcloud auth application-default login --quiet
          cd ops/terraform && terraform init
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_DEVELOPMENT_CREDENTIALS}}
      - name: terraform apply
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: |
          gcloud auth application-default login --quiet
          cd ops/terraform && terraform apply -auto-approve --var-file=development.tfvars
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_DEVELOPMENT_CREDENTIALS}}
