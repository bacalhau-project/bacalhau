---
steps:
- group: ":circleci: test_workflow"
  key: test_workflow
  steps:
  - name: Build WebUI
    commands: |
      flox activate -r aronchick/bacalhau -t
      cd webui && yarn install && yarn build
      buildkite-agent artifact upload 'webui/build/*;webui/node_modules/*'
    plugins:
      - docker#v5.9.0:
          image: docker.io/bacalhauproject/build-container:0.0.13
    key: build_webui
  - name: Test
    commands: |
      flox activate -r aronchick/bacalhau -t
      buildkite agent artifact download *
      go mod tidy
      export BACALHAU_ENVIRONMENT=test'
      wget https://dist.ipfs.tech/go-ipfs/v0.18.0/go-ipfs_v0.18.0_linux-amd64.tar.gz -O ipfs.tar.gz"
      tar -xzf ipfs.tar.gz
      cd go-ipfs"
      sudo bash install.sh"
      ipfs --version"
      ipfs init
      ipfs config Addresses.API /ip4/127.0.0.1/tcp/5001
      ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080
      echo '~~~ Start IPFS Daemon'
      ( ipfs daemon ) &
      echo '~~~ Set IPFS Connect Env'
      export BACALHAU_NODE_IPFS_CONNECT=/ip4/127.0.0.1/tcp/5001
      (
        LOG_LEVEL='debug' TEST_BUILD_TAGS='{{ matrix.build_tags }}' TEST_PARALLEL_PACKAGES='4'
        go install gotest.tools/gotestsum@v1.8.2
        just test-and-report
      )
      cd coverage/ && buildkite-agent artifact upload '*.coverage' && cd -
    depends_on:
    - build_webui
    env:
      GCS_TEST_RESULTS_BUCKET: bacalhau-global-storage/test-results
      GOMAXPROCS: '2'
    matrix:
      setup:
        target_os:
        - linux
        - darwin
        - windows
        target_arch:
        - amd64
        - arm64
        build_tags:
        - unit
        - integration
      adjustments:
      - with:
          target_os: windows
          target_arch: arm64
          build_tags: unit
        skip: true
      - with:
          target_os: windows
          target_arch: arm64
          build_tags: integration
        skip: true
    key: test-{{ matrix.target_os }}-{{ matrix.target_arch }}-{{ matrix.build_tags }}
  - name: Build
    commands: |
      flox activate -r aronchick/bacalhau -t
      buildkite agent artifact download *
      go mod tidy
      echo "$PRIVATE_PEM_B64" | base64 --decode > /tmp/private.pem
      echo "$PUBLIC_PEM_B64" | base64 --decode > /tmp/public.pem
      export PRIVATE_KEY_PASSPHRASE="$(echo $PRIVATE_KEY_PASSPHRASE_B64 | base64 --decode)"
      find webui -exec touch -c '{}' +
      GOOS=linux GOARCH=amd64 just build-bacalhau-tgz
      GOOS=linux GOARCH=arm64 just build-bacalhau-tgz
      GOOS=darwin GOARCH=amd64 just build-bacalhau-tgz
      GOOS=darwin GOARCH=arm64 just build-bacalhau-tgz
      GOOS=linux GOARCH=armv6 just build-bacalhau-tgz
      GOOS=linux GOARCH=armv7 just build-bacalhau-tgz
      GOOS=windows GOARCH=amd64 just build-bacalhau-tgz
      cd dist/
      buildkite-agent artifact upload '*.tar.gz;*.sha256'
      cd -
      "# `store_artifacts` not implemented yet"
      "# No need for checkout, the agent takes care of that"
      "# :circleci: attach_workspace "
      if [ ! -d '.' ]; then mkdir '.'; fi
      cd '.'
      buildkite agent artifact download *
      mkdir -p bin/linux/amd64
      pushd bin/linux/amd64
      tar -xvf ../../../bacalhau_*_linux_amd64.tar.gz
      popd
      cd test && bin/bashtub *.sh
      "# No need for checkout, the agent takes care of that"
      echo '~~~ Set GOVER'
      go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
      version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
      '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
      echo "Latest Go version for $go_spec is $version"
      echo "export GOVER=$version" >> $BASH_ENV
      "# when condition translation may not be compatible with your shell"
      if [ "linux-amd64" == "windows-amd64" ]; then
      echo '~~~ Install Go'
      "# shell is environment-dependent and should be configured in the agent"
      rm -rf /c/Program\ Files/Go
      curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
      fi
      "# when condition translation may not be compatible with your shell"
      if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
      echo '~~~ Install Go'
      sudo rm -fr /usr/local/go /usr/local/bin/go
      curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
      sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
      fi
      echo '~~~ Set GOCACHE'
      echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
      echo '~~~ Set GOPATH'
      echo "export GOPATH=$HOME/go" >> $BASH_ENV
      "# `restore_cache` not implemented yet"
      echo '~~~ Install packages'
      go mod tidy
      "# `save_cache` not implemented yet"
      echo "CANARIES HAVE BEEN MOVED TO https://github.com/bacalhau-project/canaries"
      "# No need for checkout, the agent takes care of that"
      "# :circleci: attach_workspace "
      if [ ! -d 'dist/' ]; then mkdir 'dist/'; fi
      cd 'dist/'
      buildkite agent artifact download *
      mkdir -p bin/linux/amd64 && tar -xvf dist/bacalhau_*_linux_amd64.tar.gz -C bin/linux/amd64
      mkdir -p bin/linux/arm64 && tar -xvf dist/bacalhau_*_linux_arm64.tar.gz -C bin/linux/arm64
      docker context create buildx-build
      docker buildx create --use buildx-build
      make build-bacalhau-image
      "# when condition translation may not be compatible with your shell"
      if [ /^v([0-9]+).([0-9]+).([0-9]+).*$/ ~= << pipeline.git.tag >> ]; then
      echo '~~~ Login to Github Container Registry'
      echo $GHCR_PAT | docker login ghcr.io -u circleci --password-stdin
      make push-bacalhau-image
      fi
      "# No need for checkout, the agent takes care of that"
      "# `restore_cache` not implemented yet"
      echo '~~~ Install asdf'
      git config advice.detachedHead false
      if [ ! -d $HOME/.asdf ]; then
      "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
      "  cd $HOME/.asdf"
      else
      "  cd $HOME/.asdf"
      "  git fetch origin"
      fi
      git checkout master
      git pull --all
      git checkout tags/v0.14.0
      cd -
      "# `save_cache` not implemented yet"
      echo '~~~ Set PATH'
      echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
      source "${BASH_ENV}"
      "# `restore_cache` not implemented yet"
      echo '~~~ Install toolchain from .tool-versions'
      asdf plugin-add python
      asdf install python $(awk '/^python/ {print $2}' .tool-versions)
      pip3 install --upgrade pip
      'pip3 install poetry # Install poetry in the newly created virtual environment'
      python -m poetry install
      echo '~~~ Install Python API client pre-requisites'
      CODEGEN_BASE_URL="https://repo1.maven.org/maven2/io/swagger/codegen/v3"
      wget ${CODEGEN_BASE_URL}/swagger-codegen-cli/3.0.52/swagger-codegen-cli-3.0.52.jar
      -O ${HOME}/bin/swagger-codegen-cli.jar
      chmod +x ${HOME}/bin/swagger-codegen-cli.jar
      "${HOME}/bin/swagger-codegen-cli.jar version"
      "# `save_cache` not implemented yet"
      echo '~~~ Set PATH'
      echo 'export PATH="${PATH}":$HOME/.asdf/bin:$HOME/.asdf/shims:$HOME/.brew/bin'
      >> "${BASH_ENV}"
      "# `restore_cache` not implemented yet"
      echo '~~~ Install asdf'
      git config advice.detachedHead false
      if [ ! -d $HOME/.asdf ]; then
      "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
      "  cd $HOME/.asdf"
      else
      "  cd $HOME/.asdf"
      "  git fetch origin"
      fi
      git checkout master
      git pull --all
      git checkout tags/v0.14.0
      cd -
      "# `save_cache` not implemented yet"
      echo '~~~ Set PATH'
      echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
      source "${BASH_ENV}"
      echo '~~~ Install Earthly'
      asdf plugin-add earthly
      asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
      earthly --version
      echo '~~~ Select Earthly satellite'
      earthly account login
      earthly sat select << pipeline.parameters.earthly_satellite >>
      "# :circleci: attach_workspace "
      if [ ! -d '/tmp/swagger_spec/' ]; then mkdir '/tmp/swagger_spec/'; fi
      cd '/tmp/swagger_spec/'
      buildkite agent artifact download *
      echo '~~~ Copy swagger.json from workspace'
      cp /tmp/swagger_spec/webui/public/swagger/swagger.json ./docs/swagger.json
      echo '~~~ Build Python API client'
      source $BASH_ENV
      make build-python-apiclient
      cd clients/python/dist
      buildkite-agent artifact upload 'bacalhau_apiclient-*.tar.gz;bacalhau_apiclient-*.whl'
      cd -
      echo '~~~ Build Python SDK'
      make build-python-sdk
      cd python/dist
      buildkite-agent artifact upload 'bacalhau_sdk-*.tar.gz;bacalhau_sdk-*.whl'
      cd -
      echo '~~~ Build the airflow integration'
      make build-bacalhau-airflow
      cd integration/airflow/dist
      buildkite-agent artifact upload 'bacalhau_airflow-*.tar.gz;bacalhau_airflow-*.whl'
      cd -
      echo '~~~ Disabled Flyte'
      echo "FLYTE BUILDING DISABLED"
      "# No need for checkout, the agent takes care of that"
      "# `restore_cache` not implemented yet"
      echo '~~~ Install asdf'
      git config advice.detachedHead false
      if [ ! -d $HOME/.asdf ]; then
      "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
      "  cd $HOME/.asdf"
      else
      "  cd $HOME/.asdf"
      "  git fetch origin"
      fi
      git checkout master
      git pull --all
      git checkout tags/v0.14.0
      cd -
      "# `save_cache` not implemented yet"
      echo '~~~ Set PATH'
      echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
      source "${BASH_ENV}"
      echo '~~~ Install Earthly'
      asdf plugin-add earthly
      asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
      earthly --version
      echo '~~~ Select Earthly satellite'
      earthly account login
      earthly sat select << pipeline.parameters.earthly_satellite >>
      OLD_DIR="$PWD"
      cd python
      earthly --push +run-unittest
      cd "$OLD_DIR"
    agents:
      resource_class: xlarge
      executor_type: machine
      executor_image: default
    key: test_python_sdk
  - commands:
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo '~~~ Build tarball'
    - source "${BASH_ENV}"
    - echo "$PRIVATE_PEM_B64" | base64 --decode > /tmp/private.pem
    - echo "$PUBLIC_PEM_B64" | base64 --decode > /tmp/public.pem
    - export PRIVATE_KEY_PASSPHRASE="$(echo $PRIVATE_KEY_PASSPHRASE_B64 | base64 --decode)"
    - "# Prevent rebuilding web ui, we should have already attached it"
    - find webui -exec touch -c '{}' +
    - GOOS=linux GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv6 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv7 make build-bacalhau-tgz
    - GOOS=windows GOARCH=amd64 make build-bacalhau-tgz
    - cd dist/
    - buildkite-agent artifact upload '*.tar.gz;*.sha256'
    - cd -
    - "# `store_artifacts` not implemented yet"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64
    - pushd bin/linux/amd64
    - tar -xvf ../../../bacalhau_*_linux_amd64.tar.gz
    - popd
    - cd test && bin/bashtub *.sh
    - "# No need for checkout, the agent takes care of that"
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo "CANARIES HAVE BEEN MOVED TO https://github.com/bacalhau-project/canaries"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d 'dist/' ]; then mkdir 'dist/'; fi
    - cd 'dist/'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64 && tar -xvf dist/bacalhau_*_linux_amd64.tar.gz -C bin/linux/amd64
    - mkdir -p bin/linux/arm64 && tar -xvf dist/bacalhau_*_linux_arm64.tar.gz -C bin/linux/arm64
    - docker context create buildx-build
    - docker buildx create --use buildx-build
    - make build-bacalhau-image
    - "# when condition translation may not be compatible with your shell"
    - if [ /^v([0-9]+).([0-9]+).([0-9]+).*$/ ~= << pipeline.git.tag >> ]; then
    - echo '~~~ Login to Github Container Registry'
    - echo $GHCR_PAT | docker login ghcr.io -u circleci --password-stdin
    - make push-bacalhau-image
    - fi
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install toolchain from .tool-versions'
    - asdf plugin-add python
    - asdf install python $(awk '/^python/ {print $2}' .tool-versions)
    - pip3 install --upgrade pip
    - 'pip3 install poetry # Install poetry in the newly created virtual environment'
    - python -m poetry install
    - echo '~~~ Install Python API client pre-requisites'
    - CODEGEN_BASE_URL="https://repo1.maven.org/maven2/io/swagger/codegen/v3"
    - wget ${CODEGEN_BASE_URL}/swagger-codegen-cli/3.0.52/swagger-codegen-cli-3.0.52.jar
      -O ${HOME}/bin/swagger-codegen-cli.jar
    - chmod +x ${HOME}/bin/swagger-codegen-cli.jar
    - "${HOME}/bin/swagger-codegen-cli.jar version"
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH="${PATH}":$HOME/.asdf/bin:$HOME/.asdf/shims:$HOME/.brew/bin'
      >> "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - "# :circleci: attach_workspace "
    - if [ ! -d '/tmp/swagger_spec/' ]; then mkdir '/tmp/swagger_spec/'; fi
    - cd '/tmp/swagger_spec/'
    - buildkite agent artifact download *
    - echo '~~~ Copy swagger.json from workspace'
    - cp /tmp/swagger_spec/webui/public/swagger/swagger.json ./docs/swagger.json
    - echo '~~~ Build Python API client'
    - source $BASH_ENV
    - make build-python-apiclient
    - cd clients/python/dist
    - buildkite-agent artifact upload 'bacalhau_apiclient-*.tar.gz;bacalhau_apiclient-*.whl'
    - cd -
    - echo '~~~ Build Python SDK'
    - make build-python-sdk
    - cd python/dist
    - buildkite-agent artifact upload 'bacalhau_sdk-*.tar.gz;bacalhau_sdk-*.whl'
    - cd -
    - echo '~~~ Build the airflow integration'
    - make build-bacalhau-airflow
    - cd integration/airflow/dist
    - buildkite-agent artifact upload 'bacalhau_airflow-*.tar.gz;bacalhau_airflow-*.whl'
    - cd -
    - echo '~~~ Disabled Flyte'
    - echo "FLYTE BUILDING DISABLED"
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - OLD_DIR="$PWD"
    - cd python
    - earthly --push +run-unittest
    - cd "$OLD_DIR"
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - OLD_DIR="$PWD"
    - cd integration/airflow
    - earthly --push +run-tests
    - cd "$OLD_DIR"
    agents:
      resource_class: xlarge
      executor_type: machine
      executor_image: default
    key: test_python_airflow
  - commands:
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo '~~~ Build tarball'
    - source "${BASH_ENV}"
    - echo "$PRIVATE_PEM_B64" | base64 --decode > /tmp/private.pem
    - echo "$PUBLIC_PEM_B64" | base64 --decode > /tmp/public.pem
    - export PRIVATE_KEY_PASSPHRASE="$(echo $PRIVATE_KEY_PASSPHRASE_B64 | base64 --decode)"
    - "# Prevent rebuilding web ui, we should have already attached it"
    - find webui -exec touch -c '{}' +
    - GOOS=linux GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv6 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv7 make build-bacalhau-tgz
    - GOOS=windows GOARCH=amd64 make build-bacalhau-tgz
    - cd dist/
    - buildkite-agent artifact upload '*.tar.gz;*.sha256'
    - cd -
    - "# `store_artifacts` not implemented yet"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64
    - pushd bin/linux/amd64
    - tar -xvf ../../../bacalhau_*_linux_amd64.tar.gz
    - popd
    - cd test && bin/bashtub *.sh
    - "# No need for checkout, the agent takes care of that"
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo "CANARIES HAVE BEEN MOVED TO https://github.com/bacalhau-project/canaries"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d 'dist/' ]; then mkdir 'dist/'; fi
    - cd 'dist/'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64 && tar -xvf dist/bacalhau_*_linux_amd64.tar.gz -C bin/linux/amd64
    - mkdir -p bin/linux/arm64 && tar -xvf dist/bacalhau_*_linux_arm64.tar.gz -C bin/linux/arm64
    - docker context create buildx-build
    - docker buildx create --use buildx-build
    - make build-bacalhau-image
    - "# when condition translation may not be compatible with your shell"
    - if [ /^v([0-9]+).([0-9]+).([0-9]+).*$/ ~= << pipeline.git.tag >> ]; then
    - echo '~~~ Login to Github Container Registry'
    - echo $GHCR_PAT | docker login ghcr.io -u circleci --password-stdin
    - make push-bacalhau-image
    - fi
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install toolchain from .tool-versions'
    - asdf plugin-add python
    - asdf install python $(awk '/^python/ {print $2}' .tool-versions)
    - pip3 install --upgrade pip
    - 'pip3 install poetry # Install poetry in the newly created virtual environment'
    - python -m poetry install
    - echo '~~~ Install Python API client pre-requisites'
    - CODEGEN_BASE_URL="https://repo1.maven.org/maven2/io/swagger/codegen/v3"
    - wget ${CODEGEN_BASE_URL}/swagger-codegen-cli/3.0.52/swagger-codegen-cli-3.0.52.jar
      -O ${HOME}/bin/swagger-codegen-cli.jar
    - chmod +x ${HOME}/bin/swagger-codegen-cli.jar
    - "${HOME}/bin/swagger-codegen-cli.jar version"
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH="${PATH}":$HOME/.asdf/bin:$HOME/.asdf/shims:$HOME/.brew/bin'
      >> "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - "# :circleci: attach_workspace "
    - if [ ! -d '/tmp/swagger_spec/' ]; then mkdir '/tmp/swagger_spec/'; fi
    - cd '/tmp/swagger_spec/'
    - buildkite agent artifact download *
    - echo '~~~ Copy swagger.json from workspace'
    - cp /tmp/swagger_spec/webui/public/swagger/swagger.json ./docs/swagger.json
    - echo '~~~ Build Python API client'
    - source $BASH_ENV
    - make build-python-apiclient
    - cd clients/python/dist
    - buildkite-agent artifact upload 'bacalhau_apiclient-*.tar.gz;bacalhau_apiclient-*.whl'
    - cd -
    - echo '~~~ Build Python SDK'
    - make build-python-sdk
    - cd python/dist
    - buildkite-agent artifact upload 'bacalhau_sdk-*.tar.gz;bacalhau_sdk-*.whl'
    - cd -
    - echo '~~~ Build the airflow integration'
    - make build-bacalhau-airflow
    - cd integration/airflow/dist
    - buildkite-agent artifact upload 'bacalhau_airflow-*.tar.gz;bacalhau_airflow-*.whl'
    - cd -
    - echo '~~~ Disabled Flyte'
    - echo "FLYTE BUILDING DISABLED"
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - OLD_DIR="$PWD"
    - cd python
    - earthly --push +run-unittest
    - cd "$OLD_DIR"
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - OLD_DIR="$PWD"
    - cd integration/airflow
    - earthly --push +run-tests
    - cd "$OLD_DIR"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d 'coverage/' ]; then mkdir 'coverage/'; fi
    - cd 'coverage/'
    - buildkite agent artifact download *
    - echo '~~~ Install gocovmerge'
    - go install github.com/wadey/gocovmerge@latest
    - echo '~~~ Build coverage report'
    - make coverage-report
    - "# `store_artifacts` not implemented yet"
    depends_on:
    - test_cli
    agents:
      resource_class: xlarge
      executor_type: machine
      executor_image: default
    env:
      GOPROXY: https://proxy.golang.org
    key: Build coverage report
- group: ":circleci: build_python"
  key: build_python
  if: "<< pipeline.parameters.GHA_Action >>"
  steps:
  - commands:
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo '~~~ Build tarball'
    - source "${BASH_ENV}"
    - echo "$PRIVATE_PEM_B64" | base64 --decode > /tmp/private.pem
    - echo "$PUBLIC_PEM_B64" | base64 --decode > /tmp/public.pem
    - export PRIVATE_KEY_PASSPHRASE="$(echo $PRIVATE_KEY_PASSPHRASE_B64 | base64 --decode)"
    - "# Prevent rebuilding web ui, we should have already attached it"
    - find webui -exec touch -c '{}' +
    - GOOS=linux GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv6 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv7 make build-bacalhau-tgz
    - GOOS=windows GOARCH=amd64 make build-bacalhau-tgz
    - cd dist/
    - buildkite-agent artifact upload '*.tar.gz;*.sha256'
    - cd -
    - "# `store_artifacts` not implemented yet"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64
    - pushd bin/linux/amd64
    - tar -xvf ../../../bacalhau_*_linux_amd64.tar.gz
    - popd
    - cd test && bin/bashtub *.sh
    - "# No need for checkout, the agent takes care of that"
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo "CANARIES HAVE BEEN MOVED TO https://github.com/bacalhau-project/canaries"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d 'dist/' ]; then mkdir 'dist/'; fi
    - cd 'dist/'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64 && tar -xvf dist/bacalhau_*_linux_amd64.tar.gz -C bin/linux/amd64
    - mkdir -p bin/linux/arm64 && tar -xvf dist/bacalhau_*_linux_arm64.tar.gz -C bin/linux/arm64
    - docker context create buildx-build
    - docker buildx create --use buildx-build
    - make build-bacalhau-image
    - "# when condition translation may not be compatible with your shell"
    - if [ /^v([0-9]+).([0-9]+).([0-9]+).*$/ ~= << pipeline.git.tag >> ]; then
    - echo '~~~ Login to Github Container Registry'
    - echo $GHCR_PAT | docker login ghcr.io -u circleci --password-stdin
    - make push-bacalhau-image
    - fi
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install toolchain from .tool-versions'
    - asdf plugin-add python
    - asdf install python $(awk '/^python/ {print $2}' .tool-versions)
    - pip3 install --upgrade pip
    - 'pip3 install poetry # Install poetry in the newly created virtual environment'
    - python -m poetry install
    - echo '~~~ Install Python API client pre-requisites'
    - CODEGEN_BASE_URL="https://repo1.maven.org/maven2/io/swagger/codegen/v3"
    - wget ${CODEGEN_BASE_URL}/swagger-codegen-cli/3.0.52/swagger-codegen-cli-3.0.52.jar
      -O ${HOME}/bin/swagger-codegen-cli.jar
    - chmod +x ${HOME}/bin/swagger-codegen-cli.jar
    - "${HOME}/bin/swagger-codegen-cli.jar version"
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH="${PATH}":$HOME/.asdf/bin:$HOME/.asdf/shims:$HOME/.brew/bin'
      >> "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - "# :circleci: attach_workspace "
    - if [ ! -d '/tmp/swagger_spec/' ]; then mkdir '/tmp/swagger_spec/'; fi
    - cd '/tmp/swagger_spec/'
    - buildkite agent artifact download *
    - echo '~~~ Copy swagger.json from workspace'
    - cp /tmp/swagger_spec/webui/public/swagger/swagger.json ./docs/swagger.json
    - echo '~~~ Build Python API client'
    - source $BASH_ENV
    - make build-python-apiclient
    - cd clients/python/dist
    - buildkite-agent artifact upload 'bacalhau_apiclient-*.tar.gz;bacalhau_apiclient-*.whl'
    - cd -
    - echo '~~~ Build Python SDK'
    - make build-python-sdk
    - cd python/dist
    - buildkite-agent artifact upload 'bacalhau_sdk-*.tar.gz;bacalhau_sdk-*.whl'
    - cd -
    - echo '~~~ Build the airflow integration'
    - make build-bacalhau-airflow
    - cd integration/airflow/dist
    - buildkite-agent artifact upload 'bacalhau_airflow-*.tar.gz;bacalhau_airflow-*.whl'
    - cd -
    - echo '~~~ Disabled Flyte'
    - echo "FLYTE BUILDING DISABLED"
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - OLD_DIR="$PWD"
    - cd python
    - earthly --push +run-unittest
    - cd "$OLD_DIR"
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - OLD_DIR="$PWD"
    - cd integration/airflow
    - earthly --push +run-tests
    - cd "$OLD_DIR"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d 'coverage/' ]; then mkdir 'coverage/'; fi
    - cd 'coverage/'
    - buildkite agent artifact download *
    - echo '~~~ Install gocovmerge'
    - go install github.com/wadey/gocovmerge@latest
    - echo '~~~ Build coverage report'
    - make coverage-report
    - "# `store_artifacts` not implemented yet"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d 'dist/' ]; then mkdir 'dist/'; fi
    - cd 'dist/'
    - buildkite agent artifact download *
    - echo '~~~ Install gh'
    - wget https://github.com/cli/cli/releases/download/v2.14.7/gh_2.14.7_linux_amd64.deb
    - sudo dpkg -i gh_2.14.7_linux_amd64.deb
    - echo "$BACALHAU_RELEASE_TOKEN" | gh auth login --with-token
    - echo '~~~ Uploading to Release - << pipeline.git.tag >>'
    - TAG="<< pipeline.git.tag >>"
    - echo "TAG = ${TAG}"
    - find dist/
    - gh release upload $TAG dist/bacalhau_$TAG_*
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install toolchain from .tool-versions'
    - asdf plugin-add python
    - asdf install python $(awk '/^python/ {print $2}' .tool-versions)
    - pip3 install --upgrade pip
    - 'pip3 install poetry # Install poetry in the newly created virtual environment'
    - python -m poetry install
    - echo '~~~ Install Python API client pre-requisites'
    - CODEGEN_BASE_URL="https://repo1.maven.org/maven2/io/swagger/codegen/v3"
    - wget ${CODEGEN_BASE_URL}/swagger-codegen-cli/3.0.52/swagger-codegen-cli-3.0.52.jar
      -O ${HOME}/bin/swagger-codegen-cli.jar
    - chmod +x ${HOME}/bin/swagger-codegen-cli.jar
    - "${HOME}/bin/swagger-codegen-cli.jar version"
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH="${PATH}":$HOME/.asdf/bin:$HOME/.asdf/shims:$HOME/.brew/bin'
      >> "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - "# :circleci: attach_workspace "
    - if [ ! -d '/tmp/py_dist' ]; then mkdir '/tmp/py_dist'; fi
    - cd '/tmp/py_dist'
    - buildkite agent artifact download *
    - echo '~~~ Copy dist files'
    - mkdir -p clients/python/dist
    - cp /tmp/py_dist/bacalhau_apiclient* clients/python/dist
    - mkdir -p python/dist
    - cp /tmp/py_dist/bacalhau_sdk* python/dist
    - mkdir -p integration/airflow/dist
    - cp /tmp/py_dist/bacalhau_airflow* integration/airflow/dist
    - mkdir -p integration/airflow/dist
    - echo '~~~ Release python apiclient'
    - python -m poetry run make release-python-apiclient
    - echo '~~~ Release python sdk'
    - export RELEASE_PYTHON_PACKAGES=1
    - make release-python-sdk
    - echo '~~~ Release python Airflow integration'
    - export RELEASE_PYTHON_PACKAGES=1
    - make dist
    - echo '~~~ Release python Flyte integration'
    - echo "FLYTE BUILDING DISABLED"
    - "# No need for checkout, the agent takes care of that"
    - "# `add_ssh_keys` has no translation, your agent should have the keys to connect
      where it needs to"
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo '~~~ Build Swagger'
    - export GOBIN=${HOME}/bin
    - export PATH=$GOBIN:$PATH
    - go install golang.org/x/tools/cmd/stringer
    - go install go.uber.org/mock/gomock
    - go install github.com/golang/mock/mockgen
    - go install github.com/swaggo/swag/cmd/swag@latest
    - make generate
    - cd .
    - buildkite-agent artifact upload 'pkg/swagger/docs.go;webui/public/swagger/swagger.json'
    - cd -
    agents:
      resource_class: xlarge
      executor_type: machine
      executor_image: default
    env:
      GOPROXY: https://proxy.golang.org
      TARGET_COMMIT: "<< pipeline.git.revision >>"
    key: build-swagger-spec
    if: build.tag =~ /^v([0-9]+).([0-9]+).([0-9]+).*$/
  - commands:
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo '~~~ Build tarball'
    - source "${BASH_ENV}"
    - echo "$PRIVATE_PEM_B64" | base64 --decode > /tmp/private.pem
    - echo "$PUBLIC_PEM_B64" | base64 --decode > /tmp/public.pem
    - export PRIVATE_KEY_PASSPHRASE="$(echo $PRIVATE_KEY_PASSPHRASE_B64 | base64 --decode)"
    - "# Prevent rebuilding web ui, we should have already attached it"
    - find webui -exec touch -c '{}' +
    - GOOS=linux GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv6 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv7 make build-bacalhau-tgz
    - GOOS=windows GOARCH=amd64 make build-bacalhau-tgz
    - cd dist/
    - buildkite-agent artifact upload '*.tar.gz;*.sha256'
    - cd -
    - "# `store_artifacts` not implemented yet"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64
    - pushd bin/linux/amd64
    - tar -xvf ../../../bacalhau_*_linux_amd64.tar.gz
    - popd
    - cd test && bin/bashtub *.sh
    - "# No need for checkout, the agent takes care of that"
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo "CANARIES HAVE BEEN MOVED TO https://github.com/bacalhau-project/canaries"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d 'dist/' ]; then mkdir 'dist/'; fi
    - cd 'dist/'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64 && tar -xvf dist/bacalhau_*_linux_amd64.tar.gz -C bin/linux/amd64
    - mkdir -p bin/linux/arm64 && tar -xvf dist/bacalhau_*_linux_arm64.tar.gz -C bin/linux/arm64
    - docker context create buildx-build
    - docker buildx create --use buildx-build
    - make build-bacalhau-image
    - "# when condition translation may not be compatible with your shell"
    - if [ /^v([0-9]+).([0-9]+).([0-9]+).*$/ ~= << pipeline.git.tag >> ]; then
    - echo '~~~ Login to Github Container Registry'
    - echo $GHCR_PAT | docker login ghcr.io -u circleci --password-stdin
    - make push-bacalhau-image
    - fi
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install toolchain from .tool-versions'
    - asdf plugin-add python
    - asdf install python $(awk '/^python/ {print $2}' .tool-versions)
    - pip3 install --upgrade pip
    - 'pip3 install poetry # Install poetry in the newly created virtual environment'
    - python -m poetry install
    - echo '~~~ Install Python API client pre-requisites'
    - CODEGEN_BASE_URL="https://repo1.maven.org/maven2/io/swagger/codegen/v3"
    - wget ${CODEGEN_BASE_URL}/swagger-codegen-cli/3.0.52/swagger-codegen-cli-3.0.52.jar
      -O ${HOME}/bin/swagger-codegen-cli.jar
    - chmod +x ${HOME}/bin/swagger-codegen-cli.jar
    - "${HOME}/bin/swagger-codegen-cli.jar version"
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH="${PATH}":$HOME/.asdf/bin:$HOME/.asdf/shims:$HOME/.brew/bin'
      >> "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - "# :circleci: attach_workspace "
    - if [ ! -d '/tmp/swagger_spec/' ]; then mkdir '/tmp/swagger_spec/'; fi
    - cd '/tmp/swagger_spec/'
    - buildkite agent artifact download *
    - echo '~~~ Copy swagger.json from workspace'
    - cp /tmp/swagger_spec/webui/public/swagger/swagger.json ./docs/swagger.json
    - echo '~~~ Build Python API client'
    - source $BASH_ENV
    - make build-python-apiclient
    - cd clients/python/dist
    - buildkite-agent artifact upload 'bacalhau_apiclient-*.tar.gz;bacalhau_apiclient-*.whl'
    - cd -
    - echo '~~~ Build Python SDK'
    - make build-python-sdk
    - cd python/dist
    - buildkite-agent artifact upload 'bacalhau_sdk-*.tar.gz;bacalhau_sdk-*.whl'
    - cd -
    - echo '~~~ Build the airflow integration'
    - make build-bacalhau-airflow
    - cd integration/airflow/dist
    - buildkite-agent artifact upload 'bacalhau_airflow-*.tar.gz;bacalhau_airflow-*.whl'
    - cd -
    - echo '~~~ Disabled Flyte'
    - echo "FLYTE BUILDING DISABLED"
    depends_on:
    - build-swagger-spec
    agents:
      resource_class: xlarge
      executor_type: machine
      executor_image: default
    env:
      TARGET_COMMIT: "<< pipeline.git.revision >>"
    key: build-python-packages
    if: build.tag =~ /^v([0-9]+).([0-9]+).([0-9]+).*$/
  - commands:
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo '~~~ Build tarball'
    - source "${BASH_ENV}"
    - echo "$PRIVATE_PEM_B64" | base64 --decode > /tmp/private.pem
    - echo "$PUBLIC_PEM_B64" | base64 --decode > /tmp/public.pem
    - export PRIVATE_KEY_PASSPHRASE="$(echo $PRIVATE_KEY_PASSPHRASE_B64 | base64 --decode)"
    - "# Prevent rebuilding web ui, we should have already attached it"
    - find webui -exec touch -c '{}' +
    - GOOS=linux GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv6 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv7 make build-bacalhau-tgz
    - GOOS=windows GOARCH=amd64 make build-bacalhau-tgz
    - cd dist/
    - buildkite-agent artifact upload '*.tar.gz;*.sha256'
    - cd -
    - "# `store_artifacts` not implemented yet"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64
    - pushd bin/linux/amd64
    - tar -xvf ../../../bacalhau_*_linux_amd64.tar.gz
    - popd
    - cd test && bin/bashtub *.sh
    - "# No need for checkout, the agent takes care of that"
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo "CANARIES HAVE BEEN MOVED TO https://github.com/bacalhau-project/canaries"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d 'dist/' ]; then mkdir 'dist/'; fi
    - cd 'dist/'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64 && tar -xvf dist/bacalhau_*_linux_amd64.tar.gz -C bin/linux/amd64
    - mkdir -p bin/linux/arm64 && tar -xvf dist/bacalhau_*_linux_arm64.tar.gz -C bin/linux/arm64
    - docker context create buildx-build
    - docker buildx create --use buildx-build
    - make build-bacalhau-image
    - "# when condition translation may not be compatible with your shell"
    - if [ /^v([0-9]+).([0-9]+).([0-9]+).*$/ ~= << pipeline.git.tag >> ]; then
    - echo '~~~ Login to Github Container Registry'
    - echo $GHCR_PAT | docker login ghcr.io -u circleci --password-stdin
    - make push-bacalhau-image
    - fi
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install toolchain from .tool-versions'
    - asdf plugin-add python
    - asdf install python $(awk '/^python/ {print $2}' .tool-versions)
    - pip3 install --upgrade pip
    - 'pip3 install poetry # Install poetry in the newly created virtual environment'
    - python -m poetry install
    - echo '~~~ Install Python API client pre-requisites'
    - CODEGEN_BASE_URL="https://repo1.maven.org/maven2/io/swagger/codegen/v3"
    - wget ${CODEGEN_BASE_URL}/swagger-codegen-cli/3.0.52/swagger-codegen-cli-3.0.52.jar
      -O ${HOME}/bin/swagger-codegen-cli.jar
    - chmod +x ${HOME}/bin/swagger-codegen-cli.jar
    - "${HOME}/bin/swagger-codegen-cli.jar version"
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH="${PATH}":$HOME/.asdf/bin:$HOME/.asdf/shims:$HOME/.brew/bin'
      >> "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - "# :circleci: attach_workspace "
    - if [ ! -d '/tmp/swagger_spec/' ]; then mkdir '/tmp/swagger_spec/'; fi
    - cd '/tmp/swagger_spec/'
    - buildkite agent artifact download *
    - echo '~~~ Copy swagger.json from workspace'
    - cp /tmp/swagger_spec/webui/public/swagger/swagger.json ./docs/swagger.json
    - echo '~~~ Build Python API client'
    - source $BASH_ENV
    - make build-python-apiclient
    - cd clients/python/dist
    - buildkite-agent artifact upload 'bacalhau_apiclient-*.tar.gz;bacalhau_apiclient-*.whl'
    - cd -
    - echo '~~~ Build Python SDK'
    - make build-python-sdk
    - cd python/dist
    - buildkite-agent artifact upload 'bacalhau_sdk-*.tar.gz;bacalhau_sdk-*.whl'
    - cd -
    - echo '~~~ Build the airflow integration'
    - make build-bacalhau-airflow
    - cd integration/airflow/dist
    - buildkite-agent artifact upload 'bacalhau_airflow-*.tar.gz;bacalhau_airflow-*.whl'
    - cd -
    - echo '~~~ Disabled Flyte'
    - echo "FLYTE BUILDING DISABLED"
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - OLD_DIR="$PWD"
    - cd python
    - earthly --push +run-unittest
    - cd "$OLD_DIR"
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - OLD_DIR="$PWD"
    - cd integration/airflow
    - earthly --push +run-tests
    - cd "$OLD_DIR"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d 'coverage/' ]; then mkdir 'coverage/'; fi
    - cd 'coverage/'
    - buildkite agent artifact download *
    - echo '~~~ Install gocovmerge'
    - go install github.com/wadey/gocovmerge@latest
    - echo '~~~ Build coverage report'
    - make coverage-report
    - "# `store_artifacts` not implemented yet"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d 'dist/' ]; then mkdir 'dist/'; fi
    - cd 'dist/'
    - buildkite agent artifact download *
    - echo '~~~ Install gh'
    - wget https://github.com/cli/cli/releases/download/v2.14.7/gh_2.14.7_linux_amd64.deb
    - sudo dpkg -i gh_2.14.7_linux_amd64.deb
    - echo "$BACALHAU_RELEASE_TOKEN" | gh auth login --with-token
    - echo '~~~ Uploading to Release - << pipeline.git.tag >>'
    - TAG="<< pipeline.git.tag >>"
    - echo "TAG = ${TAG}"
    - find dist/
    - gh release upload $TAG dist/bacalhau_$TAG_*
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install toolchain from .tool-versions'
    - asdf plugin-add python
    - asdf install python $(awk '/^python/ {print $2}' .tool-versions)
    - pip3 install --upgrade pip
    - 'pip3 install poetry # Install poetry in the newly created virtual environment'
    - python -m poetry install
    - echo '~~~ Install Python API client pre-requisites'
    - CODEGEN_BASE_URL="https://repo1.maven.org/maven2/io/swagger/codegen/v3"
    - wget ${CODEGEN_BASE_URL}/swagger-codegen-cli/3.0.52/swagger-codegen-cli-3.0.52.jar
      -O ${HOME}/bin/swagger-codegen-cli.jar
    - chmod +x ${HOME}/bin/swagger-codegen-cli.jar
    - "${HOME}/bin/swagger-codegen-cli.jar version"
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH="${PATH}":$HOME/.asdf/bin:$HOME/.asdf/shims:$HOME/.brew/bin'
      >> "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - "# :circleci: attach_workspace "
    - if [ ! -d '/tmp/py_dist' ]; then mkdir '/tmp/py_dist'; fi
    - cd '/tmp/py_dist'
    - buildkite agent artifact download *
    - echo '~~~ Copy dist files'
    - mkdir -p clients/python/dist
    - cp /tmp/py_dist/bacalhau_apiclient* clients/python/dist
    - mkdir -p python/dist
    - cp /tmp/py_dist/bacalhau_sdk* python/dist
    - mkdir -p integration/airflow/dist
    - cp /tmp/py_dist/bacalhau_airflow* integration/airflow/dist
    - mkdir -p integration/airflow/dist
    - echo '~~~ Release python apiclient'
    - python -m poetry run make release-python-apiclient
    - echo '~~~ Release python sdk'
    - export RELEASE_PYTHON_PACKAGES=1
    - make release-python-sdk
    - echo '~~~ Release python Airflow integration'
    - export RELEASE_PYTHON_PACKAGES=1
    - make dist
    - echo '~~~ Release python Flyte integration'
    - echo "FLYTE BUILDING DISABLED"
    depends_on:
    - build-swagger-spec
    - build-python-packages
    agents:
      resource_class: xlarge
      executor_type: machine
      executor_image: default
    key: release-python-packages
    if: "(build.branch !~ /.*/) && (build.tag =~ /^v([0-9]+).([0-9]+).([0-9]+).*$/)"
- group: ":circleci: build_workflow"
  key: build_workflow
  if: "<< pipeline.parameters.GHA_Action >>"
  steps:
  - commands:
    - "# No need for checkout, the agent takes care of that"
    - "# No need to setup remote docker, use the host docker"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - echo '~~~ Build webui'
    - cd webui
    - earthly --push +all
    - cd .
    - buildkite-agent artifact upload 'webui/build/*;webui/node_modules/*'
    - cd -
    plugins:
    - docker-login#v3.0.0: *1
    - docker#v5.10.0: *2
    agents: *3
    key: build_webui
    if: build.tag =~ /^v([0-9]+).([0-9]+).([0-9]+).*$/
  - commands:
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo '~~~ Build tarball'
    - source "${BASH_ENV}"
    - echo "$PRIVATE_PEM_B64" | base64 --decode > /tmp/private.pem
    - echo "$PUBLIC_PEM_B64" | base64 --decode > /tmp/public.pem
    - export PRIVATE_KEY_PASSPHRASE="$(echo $PRIVATE_KEY_PASSPHRASE_B64 | base64 --decode)"
    - "# Prevent rebuilding web ui, we should have already attached it"
    - find webui -exec touch -c '{}' +
    - GOOS=linux GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv6 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv7 make build-bacalhau-tgz
    - GOOS=windows GOARCH=amd64 make build-bacalhau-tgz
    - cd dist/
    - buildkite-agent artifact upload '*.tar.gz;*.sha256'
    - cd -
    - "# `store_artifacts` not implemented yet"
    depends_on:
    - build_webui
    agents:
      resource_class: xlarge
      executor_type: machine
      executor_image: default
    key: build_cli
    if: build.tag =~ /^v([0-9]+).([0-9]+).([0-9]+).*$/
  - commands:
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo '~~~ Build tarball'
    - source "${BASH_ENV}"
    - echo "$PRIVATE_PEM_B64" | base64 --decode > /tmp/private.pem
    - echo "$PUBLIC_PEM_B64" | base64 --decode > /tmp/public.pem
    - export PRIVATE_KEY_PASSPHRASE="$(echo $PRIVATE_KEY_PASSPHRASE_B64 | base64 --decode)"
    - "# Prevent rebuilding web ui, we should have already attached it"
    - find webui -exec touch -c '{}' +
    - GOOS=linux GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv6 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv7 make build-bacalhau-tgz
    - GOOS=windows GOARCH=amd64 make build-bacalhau-tgz
    - cd dist/
    - buildkite-agent artifact upload '*.tar.gz;*.sha256'
    - cd -
    - "# `store_artifacts` not implemented yet"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64
    - pushd bin/linux/amd64
    - tar -xvf ../../../bacalhau_*_linux_amd64.tar.gz
    - popd
    - cd test && bin/bashtub *.sh
    depends_on:
    - build_cli
    agents:
      resource_class: xlarge
      executor_type: machine
      executor_image: default
    key: test_cli_bash
    if: build.tag =~ /^v([0-9]+).([0-9]+).([0-9]+).*$/
  - commands:
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo '~~~ Build tarball'
    - source "${BASH_ENV}"
    - echo "$PRIVATE_PEM_B64" | base64 --decode > /tmp/private.pem
    - echo "$PUBLIC_PEM_B64" | base64 --decode > /tmp/public.pem
    - export PRIVATE_KEY_PASSPHRASE="$(echo $PRIVATE_KEY_PASSPHRASE_B64 | base64 --decode)"
    - "# Prevent rebuilding web ui, we should have already attached it"
    - find webui -exec touch -c '{}' +
    - GOOS=linux GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv6 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv7 make build-bacalhau-tgz
    - GOOS=windows GOARCH=amd64 make build-bacalhau-tgz
    - cd dist/
    - buildkite-agent artifact upload '*.tar.gz;*.sha256'
    - cd -
    - "# `store_artifacts` not implemented yet"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64
    - pushd bin/linux/amd64
    - tar -xvf ../../../bacalhau_*_linux_amd64.tar.gz
    - popd
    - cd test && bin/bashtub *.sh
    - "# No need for checkout, the agent takes care of that"
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo "CANARIES HAVE BEEN MOVED TO https://github.com/bacalhau-project/canaries"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d 'dist/' ]; then mkdir 'dist/'; fi
    - cd 'dist/'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64 && tar -xvf dist/bacalhau_*_linux_amd64.tar.gz -C bin/linux/amd64
    - mkdir -p bin/linux/arm64 && tar -xvf dist/bacalhau_*_linux_arm64.tar.gz -C bin/linux/arm64
    - docker context create buildx-build
    - docker buildx create --use buildx-build
    - make build-bacalhau-image
    - "# when condition translation may not be compatible with your shell"
    - if [ /^v([0-9]+).([0-9]+).([0-9]+).*$/ ~= << pipeline.git.tag >> ]; then
    - echo '~~~ Login to Github Container Registry'
    - echo $GHCR_PAT | docker login ghcr.io -u circleci --password-stdin
    - make push-bacalhau-image
    - fi
    depends_on:
    - build_cli
    agents:
      resource_class: xlarge
      executor_type: machine
      executor_image: default
    key: build_docker
    if: build.tag =~ /^v([0-9]+).([0-9]+).([0-9]+).*$/
  - commands:
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo '~~~ Build tarball'
    - source "${BASH_ENV}"
    - echo "$PRIVATE_PEM_B64" | base64 --decode > /tmp/private.pem
    - echo "$PUBLIC_PEM_B64" | base64 --decode > /tmp/public.pem
    - export PRIVATE_KEY_PASSPHRASE="$(echo $PRIVATE_KEY_PASSPHRASE_B64 | base64 --decode)"
    - "# Prevent rebuilding web ui, we should have already attached it"
    - find webui -exec touch -c '{}' +
    - GOOS=linux GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=amd64 make build-bacalhau-tgz
    - GOOS=darwin GOARCH=arm64 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv6 make build-bacalhau-tgz
    - GOOS=linux GOARCH=armv7 make build-bacalhau-tgz
    - GOOS=windows GOARCH=amd64 make build-bacalhau-tgz
    - cd dist/
    - buildkite-agent artifact upload '*.tar.gz;*.sha256'
    - cd -
    - "# `store_artifacts` not implemented yet"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d '.' ]; then mkdir '.'; fi
    - cd '.'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64
    - pushd bin/linux/amd64
    - tar -xvf ../../../bacalhau_*_linux_amd64.tar.gz
    - popd
    - cd test && bin/bashtub *.sh
    - "# No need for checkout, the agent takes care of that"
    - echo '~~~ Set GOVER'
    - go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.work | cut -d' ' -f2)
    - version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all"
      | \
    - '  jq --arg v "$go_spec" --raw-output ''[.[] | select(.stable) | select(.version
      | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber))
      | reverse | .[0]'')'
    - echo "Latest Go version for $go_spec is $version"
    - echo "export GOVER=$version" >> $BASH_ENV
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "windows-amd64" ]; then
    - echo '~~~ Install Go'
    - "# shell is environment-dependent and should be configured in the agent"
    - rm -rf /c/Program\ Files/Go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.zip
      | tar --extract --gzip --file=- --directory=/c/Program\ Files
    - fi
    - "# when condition translation may not be compatible with your shell"
    - if [ "linux-amd64" == "darwin-amd64" || "linux-amd64" == "darwin-arm64" || "linux-amd64"
      == "linux-amd64" || "linux-amd64" == "linux-arm64" ]; then
    - echo '~~~ Install Go'
    - sudo rm -fr /usr/local/go /usr/local/bin/go
    - curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz
      | sudo tar --extract --gzip --file=- --directory=/usr/local
    - sudo ln -s /usr/local/go/bin/go /usr/local/bin/go
    - fi
    - echo '~~~ Set GOCACHE'
    - echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV
    - echo '~~~ Set GOPATH'
    - echo "export GOPATH=$HOME/go" >> $BASH_ENV
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install packages'
    - go mod tidy
    - "# `save_cache` not implemented yet"
    - echo "CANARIES HAVE BEEN MOVED TO https://github.com/bacalhau-project/canaries"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d 'dist/' ]; then mkdir 'dist/'; fi
    - cd 'dist/'
    - buildkite agent artifact download *
    - mkdir -p bin/linux/amd64 && tar -xvf dist/bacalhau_*_linux_amd64.tar.gz -C bin/linux/amd64
    - mkdir -p bin/linux/arm64 && tar -xvf dist/bacalhau_*_linux_arm64.tar.gz -C bin/linux/arm64
    - docker context create buildx-build
    - docker buildx create --use buildx-build
    - make build-bacalhau-image
    - "# when condition translation may not be compatible with your shell"
    - if [ /^v([0-9]+).([0-9]+).([0-9]+).*$/ ~= << pipeline.git.tag >> ]; then
    - echo '~~~ Login to Github Container Registry'
    - echo $GHCR_PAT | docker login ghcr.io -u circleci --password-stdin
    - make push-bacalhau-image
    - fi
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install toolchain from .tool-versions'
    - asdf plugin-add python
    - asdf install python $(awk '/^python/ {print $2}' .tool-versions)
    - pip3 install --upgrade pip
    - 'pip3 install poetry # Install poetry in the newly created virtual environment'
    - python -m poetry install
    - echo '~~~ Install Python API client pre-requisites'
    - CODEGEN_BASE_URL="https://repo1.maven.org/maven2/io/swagger/codegen/v3"
    - wget ${CODEGEN_BASE_URL}/swagger-codegen-cli/3.0.52/swagger-codegen-cli-3.0.52.jar
      -O ${HOME}/bin/swagger-codegen-cli.jar
    - chmod +x ${HOME}/bin/swagger-codegen-cli.jar
    - "${HOME}/bin/swagger-codegen-cli.jar version"
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH="${PATH}":$HOME/.asdf/bin:$HOME/.asdf/shims:$HOME/.brew/bin'
      >> "${BASH_ENV}"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - "# :circleci: attach_workspace "
    - if [ ! -d '/tmp/swagger_spec/' ]; then mkdir '/tmp/swagger_spec/'; fi
    - cd '/tmp/swagger_spec/'
    - buildkite agent artifact download *
    - echo '~~~ Copy swagger.json from workspace'
    - cp /tmp/swagger_spec/webui/public/swagger/swagger.json ./docs/swagger.json
    - echo '~~~ Build Python API client'
    - source $BASH_ENV
    - make build-python-apiclient
    - cd clients/python/dist
    - buildkite-agent artifact upload 'bacalhau_apiclient-*.tar.gz;bacalhau_apiclient-*.whl'
    - cd -
    - echo '~~~ Build Python SDK'
    - make build-python-sdk
    - cd python/dist
    - buildkite-agent artifact upload 'bacalhau_sdk-*.tar.gz;bacalhau_sdk-*.whl'
    - cd -
    - echo '~~~ Build the airflow integration'
    - make build-bacalhau-airflow
    - cd integration/airflow/dist
    - buildkite-agent artifact upload 'bacalhau_airflow-*.tar.gz;bacalhau_airflow-*.whl'
    - cd -
    - echo '~~~ Disabled Flyte'
    - echo "FLYTE BUILDING DISABLED"
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - OLD_DIR="$PWD"
    - cd python
    - earthly --push +run-unittest
    - cd "$OLD_DIR"
    - "# No need for checkout, the agent takes care of that"
    - "# `restore_cache` not implemented yet"
    - echo '~~~ Install asdf'
    - git config advice.detachedHead false
    - if [ ! -d $HOME/.asdf ]; then
    - "  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.14.0"
    - "  cd $HOME/.asdf"
    - else
    - "  cd $HOME/.asdf"
    - "  git fetch origin"
    - fi
    - git checkout master
    - git pull --all
    - git checkout tags/v0.14.0
    - cd -
    - "# `save_cache` not implemented yet"
    - echo '~~~ Set PATH'
    - echo 'export PATH=$HOME/.asdf/bin:$HOME/.asdf/shims:"${PATH}"' >> "${BASH_ENV}"
    - source "${BASH_ENV}"
    - echo '~~~ Install Earthly'
    - asdf plugin-add earthly
    - asdf install earthly $(awk '/^earthly/ {print $2}' .tool-versions)
    - earthly --version
    - echo '~~~ Select Earthly satellite'
    - earthly account login
    - earthly sat select << pipeline.parameters.earthly_satellite >>
    - OLD_DIR="$PWD"
    - cd integration/airflow
    - earthly --push +run-tests
    - cd "$OLD_DIR"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d 'coverage/' ]; then mkdir 'coverage/'; fi
    - cd 'coverage/'
    - buildkite agent artifact download *
    - echo '~~~ Install gocovmerge'
    - go install github.com/wadey/gocovmerge@latest
    - echo '~~~ Build coverage report'
    - make coverage-report
    - "# `store_artifacts` not implemented yet"
    - "# No need for checkout, the agent takes care of that"
    - "# :circleci: attach_workspace "
    - if [ ! -d 'dist/' ]; then mkdir 'dist/'; fi
    - cd 'dist/'
    - buildkite agent artifact download *
    - echo '~~~ Install gh'
    - wget https://github.com/cli/cli/releases/download/v2.14.7/gh_2.14.7_linux_amd64.deb
    - sudo dpkg -i gh_2.14.7_linux_amd64.deb
    - echo "$BACALHAU_RELEASE_TOKEN" | gh auth login --with-token
    - echo '~~~ Uploading to Release - << pipeline.git.tag >>'
    - TAG="<< pipeline.git.tag >>"
    - echo "TAG = ${TAG}"
    - find dist/
    - gh release upload $TAG dist/bacalhau_$TAG_*
    depends_on:
    - build_cli
    agents:
      resource_class: xlarge
      executor_type: machine
      executor_image: default
    key: release_cli
    if: "(build.branch !~ /.*/) && (build.tag =~ /^v([0-9]+).([0-9]+).([0-9]+).*$/)"
