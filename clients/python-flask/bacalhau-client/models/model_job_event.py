# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bacalhau-client.models.base_model_ import Model
from bacalhau-client.models.model_deal import ModelDeal  # noqa: F401,E501
from bacalhau-client.models.model_job_execution_plan import ModelJobExecutionPlan  # noqa: F401,E501
from bacalhau-client.models.model_run_command_result import ModelRunCommandResult  # noqa: F401,E501
from bacalhau-client.models.model_spec import ModelSpec  # noqa: F401,E501
from bacalhau-client.models.model_storage_spec import ModelStorageSpec  # noqa: F401,E501
from bacalhau-client.models.model_verification_result import ModelVerificationResult  # noqa: F401,E501
from bacalhau-client import util


class ModelJobEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, api_version: str=None, client_id: str=None, deal: ModelDeal=None, event_name: int=None, event_time: str=None, job_execution_plan: ModelJobExecutionPlan=None, job_id: str=None, published_result: ModelStorageSpec=None, run_output: ModelRunCommandResult=None, sender_public_key: List[int]=None, shard_index: int=None, source_node_id: str=None, spec: ModelSpec=None, status: str=None, target_node_id: str=None, verification_proposal: List[int]=None, verification_result: ModelVerificationResult=None):  # noqa: E501
        """ModelJobEvent - a model defined in Swagger

        :param api_version: The api_version of this ModelJobEvent.  # noqa: E501
        :type api_version: str
        :param client_id: The client_id of this ModelJobEvent.  # noqa: E501
        :type client_id: str
        :param deal: The deal of this ModelJobEvent.  # noqa: E501
        :type deal: ModelDeal
        :param event_name: The event_name of this ModelJobEvent.  # noqa: E501
        :type event_name: int
        :param event_time: The event_time of this ModelJobEvent.  # noqa: E501
        :type event_time: str
        :param job_execution_plan: The job_execution_plan of this ModelJobEvent.  # noqa: E501
        :type job_execution_plan: ModelJobExecutionPlan
        :param job_id: The job_id of this ModelJobEvent.  # noqa: E501
        :type job_id: str
        :param published_result: The published_result of this ModelJobEvent.  # noqa: E501
        :type published_result: ModelStorageSpec
        :param run_output: The run_output of this ModelJobEvent.  # noqa: E501
        :type run_output: ModelRunCommandResult
        :param sender_public_key: The sender_public_key of this ModelJobEvent.  # noqa: E501
        :type sender_public_key: List[int]
        :param shard_index: The shard_index of this ModelJobEvent.  # noqa: E501
        :type shard_index: int
        :param source_node_id: The source_node_id of this ModelJobEvent.  # noqa: E501
        :type source_node_id: str
        :param spec: The spec of this ModelJobEvent.  # noqa: E501
        :type spec: ModelSpec
        :param status: The status of this ModelJobEvent.  # noqa: E501
        :type status: str
        :param target_node_id: The target_node_id of this ModelJobEvent.  # noqa: E501
        :type target_node_id: str
        :param verification_proposal: The verification_proposal of this ModelJobEvent.  # noqa: E501
        :type verification_proposal: List[int]
        :param verification_result: The verification_result of this ModelJobEvent.  # noqa: E501
        :type verification_result: ModelVerificationResult
        """
        self.swagger_types = {
            'api_version': str,
            'client_id': str,
            'deal': ModelDeal,
            'event_name': int,
            'event_time': str,
            'job_execution_plan': ModelJobExecutionPlan,
            'job_id': str,
            'published_result': ModelStorageSpec,
            'run_output': ModelRunCommandResult,
            'sender_public_key': List[int],
            'shard_index': int,
            'source_node_id': str,
            'spec': ModelSpec,
            'status': str,
            'target_node_id': str,
            'verification_proposal': List[int],
            'verification_result': ModelVerificationResult
        }

        self.attribute_map = {
            'api_version': 'APIVersion',
            'client_id': 'ClientID',
            'deal': 'Deal',
            'event_name': 'EventName',
            'event_time': 'EventTime',
            'job_execution_plan': 'JobExecutionPlan',
            'job_id': 'JobID',
            'published_result': 'PublishedResult',
            'run_output': 'RunOutput',
            'sender_public_key': 'SenderPublicKey',
            'shard_index': 'ShardIndex',
            'source_node_id': 'SourceNodeID',
            'spec': 'Spec',
            'status': 'Status',
            'target_node_id': 'TargetNodeID',
            'verification_proposal': 'VerificationProposal',
            'verification_result': 'VerificationResult'
        }
        self._api_version = api_version
        self._client_id = client_id
        self._deal = deal
        self._event_name = event_name
        self._event_time = event_time
        self._job_execution_plan = job_execution_plan
        self._job_id = job_id
        self._published_result = published_result
        self._run_output = run_output
        self._sender_public_key = sender_public_key
        self._shard_index = shard_index
        self._source_node_id = source_node_id
        self._spec = spec
        self._status = status
        self._target_node_id = target_node_id
        self._verification_proposal = verification_proposal
        self._verification_result = verification_result

    @classmethod
    def from_dict(cls, dikt) -> 'ModelJobEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The model.JobEvent of this ModelJobEvent.  # noqa: E501
        :rtype: ModelJobEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self) -> str:
        """Gets the api_version of this ModelJobEvent.

        APIVersion of the Job  # noqa: E501

        :return: The api_version of this ModelJobEvent.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version: str):
        """Sets the api_version of this ModelJobEvent.

        APIVersion of the Job  # noqa: E501

        :param api_version: The api_version of this ModelJobEvent.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def client_id(self) -> str:
        """Gets the client_id of this ModelJobEvent.

        optional clientID if this is an externally triggered event (like create job)  # noqa: E501

        :return: The client_id of this ModelJobEvent.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id: str):
        """Sets the client_id of this ModelJobEvent.

        optional clientID if this is an externally triggered event (like create job)  # noqa: E501

        :param client_id: The client_id of this ModelJobEvent.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def deal(self) -> ModelDeal:
        """Gets the deal of this ModelJobEvent.


        :return: The deal of this ModelJobEvent.
        :rtype: ModelDeal
        """
        return self._deal

    @deal.setter
    def deal(self, deal: ModelDeal):
        """Sets the deal of this ModelJobEvent.


        :param deal: The deal of this ModelJobEvent.
        :type deal: ModelDeal
        """

        self._deal = deal

    @property
    def event_name(self) -> int:
        """Gets the event_name of this ModelJobEvent.


        :return: The event_name of this ModelJobEvent.
        :rtype: int
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name: int):
        """Sets the event_name of this ModelJobEvent.


        :param event_name: The event_name of this ModelJobEvent.
        :type event_name: int
        """

        self._event_name = event_name

    @property
    def event_time(self) -> str:
        """Gets the event_time of this ModelJobEvent.


        :return: The event_time of this ModelJobEvent.
        :rtype: str
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time: str):
        """Sets the event_time of this ModelJobEvent.


        :param event_time: The event_time of this ModelJobEvent.
        :type event_time: str
        """

        self._event_time = event_time

    @property
    def job_execution_plan(self) -> ModelJobExecutionPlan:
        """Gets the job_execution_plan of this ModelJobEvent.


        :return: The job_execution_plan of this ModelJobEvent.
        :rtype: ModelJobExecutionPlan
        """
        return self._job_execution_plan

    @job_execution_plan.setter
    def job_execution_plan(self, job_execution_plan: ModelJobExecutionPlan):
        """Sets the job_execution_plan of this ModelJobEvent.


        :param job_execution_plan: The job_execution_plan of this ModelJobEvent.
        :type job_execution_plan: ModelJobExecutionPlan
        """

        self._job_execution_plan = job_execution_plan

    @property
    def job_id(self) -> str:
        """Gets the job_id of this ModelJobEvent.


        :return: The job_id of this ModelJobEvent.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: str):
        """Sets the job_id of this ModelJobEvent.


        :param job_id: The job_id of this ModelJobEvent.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def published_result(self) -> ModelStorageSpec:
        """Gets the published_result of this ModelJobEvent.


        :return: The published_result of this ModelJobEvent.
        :rtype: ModelStorageSpec
        """
        return self._published_result

    @published_result.setter
    def published_result(self, published_result: ModelStorageSpec):
        """Sets the published_result of this ModelJobEvent.


        :param published_result: The published_result of this ModelJobEvent.
        :type published_result: ModelStorageSpec
        """

        self._published_result = published_result

    @property
    def run_output(self) -> ModelRunCommandResult:
        """Gets the run_output of this ModelJobEvent.


        :return: The run_output of this ModelJobEvent.
        :rtype: ModelRunCommandResult
        """
        return self._run_output

    @run_output.setter
    def run_output(self, run_output: ModelRunCommandResult):
        """Sets the run_output of this ModelJobEvent.


        :param run_output: The run_output of this ModelJobEvent.
        :type run_output: ModelRunCommandResult
        """

        self._run_output = run_output

    @property
    def sender_public_key(self) -> List[int]:
        """Gets the sender_public_key of this ModelJobEvent.


        :return: The sender_public_key of this ModelJobEvent.
        :rtype: List[int]
        """
        return self._sender_public_key

    @sender_public_key.setter
    def sender_public_key(self, sender_public_key: List[int]):
        """Sets the sender_public_key of this ModelJobEvent.


        :param sender_public_key: The sender_public_key of this ModelJobEvent.
        :type sender_public_key: List[int]
        """

        self._sender_public_key = sender_public_key

    @property
    def shard_index(self) -> int:
        """Gets the shard_index of this ModelJobEvent.

        what shard is this event for  # noqa: E501

        :return: The shard_index of this ModelJobEvent.
        :rtype: int
        """
        return self._shard_index

    @shard_index.setter
    def shard_index(self, shard_index: int):
        """Sets the shard_index of this ModelJobEvent.

        what shard is this event for  # noqa: E501

        :param shard_index: The shard_index of this ModelJobEvent.
        :type shard_index: int
        """

        self._shard_index = shard_index

    @property
    def source_node_id(self) -> str:
        """Gets the source_node_id of this ModelJobEvent.

        the node that emitted this event  # noqa: E501

        :return: The source_node_id of this ModelJobEvent.
        :rtype: str
        """
        return self._source_node_id

    @source_node_id.setter
    def source_node_id(self, source_node_id: str):
        """Sets the source_node_id of this ModelJobEvent.

        the node that emitted this event  # noqa: E501

        :param source_node_id: The source_node_id of this ModelJobEvent.
        :type source_node_id: str
        """

        self._source_node_id = source_node_id

    @property
    def spec(self) -> ModelSpec:
        """Gets the spec of this ModelJobEvent.


        :return: The spec of this ModelJobEvent.
        :rtype: ModelSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec: ModelSpec):
        """Sets the spec of this ModelJobEvent.


        :param spec: The spec of this ModelJobEvent.
        :type spec: ModelSpec
        """

        self._spec = spec

    @property
    def status(self) -> str:
        """Gets the status of this ModelJobEvent.


        :return: The status of this ModelJobEvent.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ModelJobEvent.


        :param status: The status of this ModelJobEvent.
        :type status: str
        """

        self._status = status

    @property
    def target_node_id(self) -> str:
        """Gets the target_node_id of this ModelJobEvent.

        the node that this event is for e.g. \"AcceptJobBid\" was emitted by Requester but it targeting compute node  # noqa: E501

        :return: The target_node_id of this ModelJobEvent.
        :rtype: str
        """
        return self._target_node_id

    @target_node_id.setter
    def target_node_id(self, target_node_id: str):
        """Sets the target_node_id of this ModelJobEvent.

        the node that this event is for e.g. \"AcceptJobBid\" was emitted by Requester but it targeting compute node  # noqa: E501

        :param target_node_id: The target_node_id of this ModelJobEvent.
        :type target_node_id: str
        """

        self._target_node_id = target_node_id

    @property
    def verification_proposal(self) -> List[int]:
        """Gets the verification_proposal of this ModelJobEvent.


        :return: The verification_proposal of this ModelJobEvent.
        :rtype: List[int]
        """
        return self._verification_proposal

    @verification_proposal.setter
    def verification_proposal(self, verification_proposal: List[int]):
        """Sets the verification_proposal of this ModelJobEvent.


        :param verification_proposal: The verification_proposal of this ModelJobEvent.
        :type verification_proposal: List[int]
        """

        self._verification_proposal = verification_proposal

    @property
    def verification_result(self) -> ModelVerificationResult:
        """Gets the verification_result of this ModelJobEvent.


        :return: The verification_result of this ModelJobEvent.
        :rtype: ModelVerificationResult
        """
        return self._verification_result

    @verification_result.setter
    def verification_result(self, verification_result: ModelVerificationResult):
        """Sets the verification_result of this ModelJobEvent.


        :param verification_result: The verification_result of this ModelJobEvent.
        :type verification_result: ModelVerificationResult
        """

        self._verification_result = verification_result
