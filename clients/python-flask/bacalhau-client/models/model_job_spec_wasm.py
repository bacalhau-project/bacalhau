# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bacalhau-client.models.base_model_ import Model
from bacalhau-client.models.model_storage_spec import ModelStorageSpec  # noqa: F401,E501
from bacalhau-client import util


class ModelJobSpecWasm(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, entry_point: str=None, environment_variables: Dict[str, str]=None, import_modules: List[ModelStorageSpec]=None, parameters: List[str]=None):  # noqa: E501
        """ModelJobSpecWasm - a model defined in Swagger

        :param entry_point: The entry_point of this ModelJobSpecWasm.  # noqa: E501
        :type entry_point: str
        :param environment_variables: The environment_variables of this ModelJobSpecWasm.  # noqa: E501
        :type environment_variables: Dict[str, str]
        :param import_modules: The import_modules of this ModelJobSpecWasm.  # noqa: E501
        :type import_modules: List[ModelStorageSpec]
        :param parameters: The parameters of this ModelJobSpecWasm.  # noqa: E501
        :type parameters: List[str]
        """
        self.swagger_types = {
            'entry_point': str,
            'environment_variables': Dict[str, str],
            'import_modules': List[ModelStorageSpec],
            'parameters': List[str]
        }

        self.attribute_map = {
            'entry_point': 'EntryPoint',
            'environment_variables': 'EnvironmentVariables',
            'import_modules': 'ImportModules',
            'parameters': 'Parameters'
        }
        self._entry_point = entry_point
        self._environment_variables = environment_variables
        self._import_modules = import_modules
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'ModelJobSpecWasm':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The model.JobSpecWasm of this ModelJobSpecWasm.  # noqa: E501
        :rtype: ModelJobSpecWasm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entry_point(self) -> str:
        """Gets the entry_point of this ModelJobSpecWasm.

        The name of the function in the EntryModule to call to run the job. For WASI jobs, this will always be `_start`, but jobs can choose to call other WASM functions instead. The EntryPoint must be a zero-parameter zero-result function.  # noqa: E501

        :return: The entry_point of this ModelJobSpecWasm.
        :rtype: str
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point: str):
        """Sets the entry_point of this ModelJobSpecWasm.

        The name of the function in the EntryModule to call to run the job. For WASI jobs, this will always be `_start`, but jobs can choose to call other WASM functions instead. The EntryPoint must be a zero-parameter zero-result function.  # noqa: E501

        :param entry_point: The entry_point of this ModelJobSpecWasm.
        :type entry_point: str
        """

        self._entry_point = entry_point

    @property
    def environment_variables(self) -> Dict[str, str]:
        """Gets the environment_variables of this ModelJobSpecWasm.

        The variables available in the environment of the running program.  # noqa: E501

        :return: The environment_variables of this ModelJobSpecWasm.
        :rtype: Dict[str, str]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables: Dict[str, str]):
        """Sets the environment_variables of this ModelJobSpecWasm.

        The variables available in the environment of the running program.  # noqa: E501

        :param environment_variables: The environment_variables of this ModelJobSpecWasm.
        :type environment_variables: Dict[str, str]
        """

        self._environment_variables = environment_variables

    @property
    def import_modules(self) -> List[ModelStorageSpec]:
        """Gets the import_modules of this ModelJobSpecWasm.

        TODO #880: Other WASM modules whose exports will be available as imports to the EntryModule.  # noqa: E501

        :return: The import_modules of this ModelJobSpecWasm.
        :rtype: List[ModelStorageSpec]
        """
        return self._import_modules

    @import_modules.setter
    def import_modules(self, import_modules: List[ModelStorageSpec]):
        """Sets the import_modules of this ModelJobSpecWasm.

        TODO #880: Other WASM modules whose exports will be available as imports to the EntryModule.  # noqa: E501

        :param import_modules: The import_modules of this ModelJobSpecWasm.
        :type import_modules: List[ModelStorageSpec]
        """

        self._import_modules = import_modules

    @property
    def parameters(self) -> List[str]:
        """Gets the parameters of this ModelJobSpecWasm.

        The arguments supplied to the program (i.e. as ARGV).  # noqa: E501

        :return: The parameters of this ModelJobSpecWasm.
        :rtype: List[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: List[str]):
        """Sets the parameters of this ModelJobSpecWasm.

        The arguments supplied to the program (i.e. as ARGV).  # noqa: E501

        :param parameters: The parameters of this ModelJobSpecWasm.
        :type parameters: List[str]
        """

        self._parameters = parameters
