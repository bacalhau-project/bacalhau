# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bacalhau-client.models.base_model_ import Model
from bacalhau-client import util


class ModelStorageSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cid: str=None, metadata: Dict[str, str]=None, name: str=None, storage_source: int=None, url: str=None, path: str=None):  # noqa: E501
        """ModelStorageSpec - a model defined in Swagger

        :param cid: The cid of this ModelStorageSpec.  # noqa: E501
        :type cid: str
        :param metadata: The metadata of this ModelStorageSpec.  # noqa: E501
        :type metadata: Dict[str, str]
        :param name: The name of this ModelStorageSpec.  # noqa: E501
        :type name: str
        :param storage_source: The storage_source of this ModelStorageSpec.  # noqa: E501
        :type storage_source: int
        :param url: The url of this ModelStorageSpec.  # noqa: E501
        :type url: str
        :param path: The path of this ModelStorageSpec.  # noqa: E501
        :type path: str
        """
        self.swagger_types = {
            'cid': str,
            'metadata': Dict[str, str],
            'name': str,
            'storage_source': int,
            'url': str,
            'path': str
        }

        self.attribute_map = {
            'cid': 'CID',
            'metadata': 'Metadata',
            'name': 'Name',
            'storage_source': 'StorageSource',
            'url': 'URL',
            'path': 'path'
        }
        self._cid = cid
        self._metadata = metadata
        self._name = name
        self._storage_source = storage_source
        self._url = url
        self._path = path

    @classmethod
    def from_dict(cls, dikt) -> 'ModelStorageSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The model.StorageSpec of this ModelStorageSpec.  # noqa: E501
        :rtype: ModelStorageSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cid(self) -> str:
        """Gets the cid of this ModelStorageSpec.

        The unique ID of the data, where it makes sense (for example, in an IPFS storage spec this will be the data's CID). NOTE: The below is capitalized to match IPFS & IPLD (even though it's out of golang fmt)  # noqa: E501

        :return: The cid of this ModelStorageSpec.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid: str):
        """Sets the cid of this ModelStorageSpec.

        The unique ID of the data, where it makes sense (for example, in an IPFS storage spec this will be the data's CID). NOTE: The below is capitalized to match IPFS & IPLD (even though it's out of golang fmt)  # noqa: E501

        :param cid: The cid of this ModelStorageSpec.
        :type cid: str
        """

        self._cid = cid

    @property
    def metadata(self) -> Dict[str, str]:
        """Gets the metadata of this ModelStorageSpec.

        Additional properties specific to each driver  # noqa: E501

        :return: The metadata of this ModelStorageSpec.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Dict[str, str]):
        """Sets the metadata of this ModelStorageSpec.

        Additional properties specific to each driver  # noqa: E501

        :param metadata: The metadata of this ModelStorageSpec.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def name(self) -> str:
        """Gets the name of this ModelStorageSpec.

        Name of the spec's data, for reference.  # noqa: E501

        :return: The name of this ModelStorageSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ModelStorageSpec.

        Name of the spec's data, for reference.  # noqa: E501

        :param name: The name of this ModelStorageSpec.
        :type name: str
        """

        self._name = name

    @property
    def storage_source(self) -> int:
        """Gets the storage_source of this ModelStorageSpec.

        StorageSource is the abstract source of the data. E.g. a storage source might be a URL download, but doesn't specify how the execution engine does the download or what it will do with the downloaded data.  # noqa: E501

        :return: The storage_source of this ModelStorageSpec.
        :rtype: int
        """
        return self._storage_source

    @storage_source.setter
    def storage_source(self, storage_source: int):
        """Sets the storage_source of this ModelStorageSpec.

        StorageSource is the abstract source of the data. E.g. a storage source might be a URL download, but doesn't specify how the execution engine does the download or what it will do with the downloaded data.  # noqa: E501

        :param storage_source: The storage_source of this ModelStorageSpec.
        :type storage_source: int
        """

        self._storage_source = storage_source

    @property
    def url(self) -> str:
        """Gets the url of this ModelStorageSpec.

        Source URL of the data  # noqa: E501

        :return: The url of this ModelStorageSpec.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this ModelStorageSpec.

        Source URL of the data  # noqa: E501

        :param url: The url of this ModelStorageSpec.
        :type url: str
        """

        self._url = url

    @property
    def path(self) -> str:
        """Gets the path of this ModelStorageSpec.

        The path that the spec's data should be mounted on, where it makes sense (for example, in a Docker storage spec this will be a filesystem path). TODO: #668 Replace with \"Path\" (note the caps) for yaml/json when we update the n.js file  # noqa: E501

        :return: The path of this ModelStorageSpec.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this ModelStorageSpec.

        The path that the spec's data should be mounted on, where it makes sense (for example, in a Docker storage spec this will be a filesystem path). TODO: #668 Replace with \"Path\" (note the caps) for yaml/json when we update the n.js file  # noqa: E501

        :param path: The path of this ModelStorageSpec.
        :type path: str
        """

        self._path = path
