# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bacalhau-client.models.base_model_ import Model
from bacalhau-client import util


class RequesternodeActiveJob(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, bidding_nodes_count: int=None, completed_nodes_count: int=None, shard_id: str=None, state: str=None):  # noqa: E501
        """RequesternodeActiveJob - a model defined in Swagger

        :param bidding_nodes_count: The bidding_nodes_count of this RequesternodeActiveJob.  # noqa: E501
        :type bidding_nodes_count: int
        :param completed_nodes_count: The completed_nodes_count of this RequesternodeActiveJob.  # noqa: E501
        :type completed_nodes_count: int
        :param shard_id: The shard_id of this RequesternodeActiveJob.  # noqa: E501
        :type shard_id: str
        :param state: The state of this RequesternodeActiveJob.  # noqa: E501
        :type state: str
        """
        self.swagger_types = {
            'bidding_nodes_count': int,
            'completed_nodes_count': int,
            'shard_id': str,
            'state': str
        }

        self.attribute_map = {
            'bidding_nodes_count': 'BiddingNodesCount',
            'completed_nodes_count': 'CompletedNodesCount',
            'shard_id': 'ShardID',
            'state': 'State'
        }
        self._bidding_nodes_count = bidding_nodes_count
        self._completed_nodes_count = completed_nodes_count
        self._shard_id = shard_id
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'RequesternodeActiveJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The requesternode.ActiveJob of this RequesternodeActiveJob.  # noqa: E501
        :rtype: RequesternodeActiveJob
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bidding_nodes_count(self) -> int:
        """Gets the bidding_nodes_count of this RequesternodeActiveJob.


        :return: The bidding_nodes_count of this RequesternodeActiveJob.
        :rtype: int
        """
        return self._bidding_nodes_count

    @bidding_nodes_count.setter
    def bidding_nodes_count(self, bidding_nodes_count: int):
        """Sets the bidding_nodes_count of this RequesternodeActiveJob.


        :param bidding_nodes_count: The bidding_nodes_count of this RequesternodeActiveJob.
        :type bidding_nodes_count: int
        """

        self._bidding_nodes_count = bidding_nodes_count

    @property
    def completed_nodes_count(self) -> int:
        """Gets the completed_nodes_count of this RequesternodeActiveJob.


        :return: The completed_nodes_count of this RequesternodeActiveJob.
        :rtype: int
        """
        return self._completed_nodes_count

    @completed_nodes_count.setter
    def completed_nodes_count(self, completed_nodes_count: int):
        """Sets the completed_nodes_count of this RequesternodeActiveJob.


        :param completed_nodes_count: The completed_nodes_count of this RequesternodeActiveJob.
        :type completed_nodes_count: int
        """

        self._completed_nodes_count = completed_nodes_count

    @property
    def shard_id(self) -> str:
        """Gets the shard_id of this RequesternodeActiveJob.


        :return: The shard_id of this RequesternodeActiveJob.
        :rtype: str
        """
        return self._shard_id

    @shard_id.setter
    def shard_id(self, shard_id: str):
        """Sets the shard_id of this RequesternodeActiveJob.


        :param shard_id: The shard_id of this RequesternodeActiveJob.
        :type shard_id: str
        """

        self._shard_id = shard_id

    @property
    def state(self) -> str:
        """Gets the state of this RequesternodeActiveJob.


        :return: The state of this RequesternodeActiveJob.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this RequesternodeActiveJob.


        :param state: The state of this RequesternodeActiveJob.
        :type state: str
        """

        self._state = state
