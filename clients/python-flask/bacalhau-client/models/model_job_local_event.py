# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bacalhau-client.models.base_model_ import Model
from bacalhau-client import util


class ModelJobLocalEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, event_name: int=None, job_id: str=None, shard_index: int=None, target_node_id: str=None):  # noqa: E501
        """ModelJobLocalEvent - a model defined in Swagger

        :param event_name: The event_name of this ModelJobLocalEvent.  # noqa: E501
        :type event_name: int
        :param job_id: The job_id of this ModelJobLocalEvent.  # noqa: E501
        :type job_id: str
        :param shard_index: The shard_index of this ModelJobLocalEvent.  # noqa: E501
        :type shard_index: int
        :param target_node_id: The target_node_id of this ModelJobLocalEvent.  # noqa: E501
        :type target_node_id: str
        """
        self.swagger_types = {
            'event_name': int,
            'job_id': str,
            'shard_index': int,
            'target_node_id': str
        }

        self.attribute_map = {
            'event_name': 'EventName',
            'job_id': 'JobID',
            'shard_index': 'ShardIndex',
            'target_node_id': 'TargetNodeID'
        }
        self._event_name = event_name
        self._job_id = job_id
        self._shard_index = shard_index
        self._target_node_id = target_node_id

    @classmethod
    def from_dict(cls, dikt) -> 'ModelJobLocalEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The model.JobLocalEvent of this ModelJobLocalEvent.  # noqa: E501
        :rtype: ModelJobLocalEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_name(self) -> int:
        """Gets the event_name of this ModelJobLocalEvent.


        :return: The event_name of this ModelJobLocalEvent.
        :rtype: int
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name: int):
        """Sets the event_name of this ModelJobLocalEvent.


        :param event_name: The event_name of this ModelJobLocalEvent.
        :type event_name: int
        """

        self._event_name = event_name

    @property
    def job_id(self) -> str:
        """Gets the job_id of this ModelJobLocalEvent.


        :return: The job_id of this ModelJobLocalEvent.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: str):
        """Sets the job_id of this ModelJobLocalEvent.


        :param job_id: The job_id of this ModelJobLocalEvent.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def shard_index(self) -> int:
        """Gets the shard_index of this ModelJobLocalEvent.


        :return: The shard_index of this ModelJobLocalEvent.
        :rtype: int
        """
        return self._shard_index

    @shard_index.setter
    def shard_index(self, shard_index: int):
        """Sets the shard_index of this ModelJobLocalEvent.


        :param shard_index: The shard_index of this ModelJobLocalEvent.
        :type shard_index: int
        """

        self._shard_index = shard_index

    @property
    def target_node_id(self) -> str:
        """Gets the target_node_id of this ModelJobLocalEvent.


        :return: The target_node_id of this ModelJobLocalEvent.
        :rtype: str
        """
        return self._target_node_id

    @target_node_id.setter
    def target_node_id(self, target_node_id: str):
        """Sets the target_node_id of this ModelJobLocalEvent.


        :param target_node_id: The target_node_id of this ModelJobLocalEvent.
        :type target_node_id: str
        """

        self._target_node_id = target_node_id
