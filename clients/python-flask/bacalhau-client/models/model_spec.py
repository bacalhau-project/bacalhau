# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bacalhau-client.models.base_model_ import Model
from bacalhau-client.models.model_job_sharding_config import ModelJobShardingConfig  # noqa: F401,E501
from bacalhau-client.models.model_job_spec_docker import ModelJobSpecDocker  # noqa: F401,E501
from bacalhau-client.models.model_job_spec_language import ModelJobSpecLanguage  # noqa: F401,E501
from bacalhau-client.models.model_job_spec_wasm import ModelJobSpecWasm  # noqa: F401,E501
from bacalhau-client.models.model_resource_usage_config import ModelResourceUsageConfig  # noqa: F401,E501
from bacalhau-client.models.model_storage_spec import ModelStorageSpec  # noqa: F401,E501
from bacalhau-client import util


class ModelSpec(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, annotations: List[str]=None, contexts: List[ModelStorageSpec]=None, do_not_track: bool=None, docker: ModelJobSpecDocker=None, engine: int=None, language: ModelJobSpecLanguage=None, publisher: int=None, resources: ModelResourceUsageConfig=None, sharding: ModelJobShardingConfig=None, timeout: float=None, verifier: int=None, wasm: ModelJobSpecWasm=None, inputs: List[ModelStorageSpec]=None, outputs: List[ModelStorageSpec]=None):  # noqa: E501
        """ModelSpec - a model defined in Swagger

        :param annotations: The annotations of this ModelSpec.  # noqa: E501
        :type annotations: List[str]
        :param contexts: The contexts of this ModelSpec.  # noqa: E501
        :type contexts: List[ModelStorageSpec]
        :param do_not_track: The do_not_track of this ModelSpec.  # noqa: E501
        :type do_not_track: bool
        :param docker: The docker of this ModelSpec.  # noqa: E501
        :type docker: ModelJobSpecDocker
        :param engine: The engine of this ModelSpec.  # noqa: E501
        :type engine: int
        :param language: The language of this ModelSpec.  # noqa: E501
        :type language: ModelJobSpecLanguage
        :param publisher: The publisher of this ModelSpec.  # noqa: E501
        :type publisher: int
        :param resources: The resources of this ModelSpec.  # noqa: E501
        :type resources: ModelResourceUsageConfig
        :param sharding: The sharding of this ModelSpec.  # noqa: E501
        :type sharding: ModelJobShardingConfig
        :param timeout: The timeout of this ModelSpec.  # noqa: E501
        :type timeout: float
        :param verifier: The verifier of this ModelSpec.  # noqa: E501
        :type verifier: int
        :param wasm: The wasm of this ModelSpec.  # noqa: E501
        :type wasm: ModelJobSpecWasm
        :param inputs: The inputs of this ModelSpec.  # noqa: E501
        :type inputs: List[ModelStorageSpec]
        :param outputs: The outputs of this ModelSpec.  # noqa: E501
        :type outputs: List[ModelStorageSpec]
        """
        self.swagger_types = {
            'annotations': List[str],
            'contexts': List[ModelStorageSpec],
            'do_not_track': bool,
            'docker': ModelJobSpecDocker,
            'engine': int,
            'language': ModelJobSpecLanguage,
            'publisher': int,
            'resources': ModelResourceUsageConfig,
            'sharding': ModelJobShardingConfig,
            'timeout': float,
            'verifier': int,
            'wasm': ModelJobSpecWasm,
            'inputs': List[ModelStorageSpec],
            'outputs': List[ModelStorageSpec]
        }

        self.attribute_map = {
            'annotations': 'Annotations',
            'contexts': 'Contexts',
            'do_not_track': 'DoNotTrack',
            'docker': 'Docker',
            'engine': 'Engine',
            'language': 'Language',
            'publisher': 'Publisher',
            'resources': 'Resources',
            'sharding': 'Sharding',
            'timeout': 'Timeout',
            'verifier': 'Verifier',
            'wasm': 'Wasm',
            'inputs': 'inputs',
            'outputs': 'outputs'
        }
        self._annotations = annotations
        self._contexts = contexts
        self._do_not_track = do_not_track
        self._docker = docker
        self._engine = engine
        self._language = language
        self._publisher = publisher
        self._resources = resources
        self._sharding = sharding
        self._timeout = timeout
        self._verifier = verifier
        self._wasm = wasm
        self._inputs = inputs
        self._outputs = outputs

    @classmethod
    def from_dict(cls, dikt) -> 'ModelSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The model.Spec of this ModelSpec.  # noqa: E501
        :rtype: ModelSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self) -> List[str]:
        """Gets the annotations of this ModelSpec.

        Annotations on the job - could be user or machine assigned  # noqa: E501

        :return: The annotations of this ModelSpec.
        :rtype: List[str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations: List[str]):
        """Sets the annotations of this ModelSpec.

        Annotations on the job - could be user or machine assigned  # noqa: E501

        :param annotations: The annotations of this ModelSpec.
        :type annotations: List[str]
        """

        self._annotations = annotations

    @property
    def contexts(self) -> List[ModelStorageSpec]:
        """Gets the contexts of this ModelSpec.

        Input volumes that will not be sharded for example to upload code into a base image every shard will get the full range of context volumes  # noqa: E501

        :return: The contexts of this ModelSpec.
        :rtype: List[ModelStorageSpec]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts: List[ModelStorageSpec]):
        """Sets the contexts of this ModelSpec.

        Input volumes that will not be sharded for example to upload code into a base image every shard will get the full range of context volumes  # noqa: E501

        :param contexts: The contexts of this ModelSpec.
        :type contexts: List[ModelStorageSpec]
        """

        self._contexts = contexts

    @property
    def do_not_track(self) -> bool:
        """Gets the do_not_track of this ModelSpec.

        Do not track specified by the client  # noqa: E501

        :return: The do_not_track of this ModelSpec.
        :rtype: bool
        """
        return self._do_not_track

    @do_not_track.setter
    def do_not_track(self, do_not_track: bool):
        """Sets the do_not_track of this ModelSpec.

        Do not track specified by the client  # noqa: E501

        :param do_not_track: The do_not_track of this ModelSpec.
        :type do_not_track: bool
        """

        self._do_not_track = do_not_track

    @property
    def docker(self) -> ModelJobSpecDocker:
        """Gets the docker of this ModelSpec.


        :return: The docker of this ModelSpec.
        :rtype: ModelJobSpecDocker
        """
        return self._docker

    @docker.setter
    def docker(self, docker: ModelJobSpecDocker):
        """Sets the docker of this ModelSpec.


        :param docker: The docker of this ModelSpec.
        :type docker: ModelJobSpecDocker
        """

        self._docker = docker

    @property
    def engine(self) -> int:
        """Gets the engine of this ModelSpec.

        e.g. docker or language  # noqa: E501

        :return: The engine of this ModelSpec.
        :rtype: int
        """
        return self._engine

    @engine.setter
    def engine(self, engine: int):
        """Sets the engine of this ModelSpec.

        e.g. docker or language  # noqa: E501

        :param engine: The engine of this ModelSpec.
        :type engine: int
        """

        self._engine = engine

    @property
    def language(self) -> ModelJobSpecLanguage:
        """Gets the language of this ModelSpec.


        :return: The language of this ModelSpec.
        :rtype: ModelJobSpecLanguage
        """
        return self._language

    @language.setter
    def language(self, language: ModelJobSpecLanguage):
        """Sets the language of this ModelSpec.


        :param language: The language of this ModelSpec.
        :type language: ModelJobSpecLanguage
        """

        self._language = language

    @property
    def publisher(self) -> int:
        """Gets the publisher of this ModelSpec.

        there can be multiple publishers for the job  # noqa: E501

        :return: The publisher of this ModelSpec.
        :rtype: int
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher: int):
        """Sets the publisher of this ModelSpec.

        there can be multiple publishers for the job  # noqa: E501

        :param publisher: The publisher of this ModelSpec.
        :type publisher: int
        """

        self._publisher = publisher

    @property
    def resources(self) -> ModelResourceUsageConfig:
        """Gets the resources of this ModelSpec.


        :return: The resources of this ModelSpec.
        :rtype: ModelResourceUsageConfig
        """
        return self._resources

    @resources.setter
    def resources(self, resources: ModelResourceUsageConfig):
        """Sets the resources of this ModelSpec.


        :param resources: The resources of this ModelSpec.
        :type resources: ModelResourceUsageConfig
        """

        self._resources = resources

    @property
    def sharding(self) -> ModelJobShardingConfig:
        """Gets the sharding of this ModelSpec.


        :return: The sharding of this ModelSpec.
        :rtype: ModelJobShardingConfig
        """
        return self._sharding

    @sharding.setter
    def sharding(self, sharding: ModelJobShardingConfig):
        """Sets the sharding of this ModelSpec.


        :param sharding: The sharding of this ModelSpec.
        :type sharding: ModelJobShardingConfig
        """

        self._sharding = sharding

    @property
    def timeout(self) -> float:
        """Gets the timeout of this ModelSpec.

        How long a job can run in seconds before it is killed. This includes the time required to run, verify and publish results  # noqa: E501

        :return: The timeout of this ModelSpec.
        :rtype: float
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout: float):
        """Sets the timeout of this ModelSpec.

        How long a job can run in seconds before it is killed. This includes the time required to run, verify and publish results  # noqa: E501

        :param timeout: The timeout of this ModelSpec.
        :type timeout: float
        """

        self._timeout = timeout

    @property
    def verifier(self) -> int:
        """Gets the verifier of this ModelSpec.


        :return: The verifier of this ModelSpec.
        :rtype: int
        """
        return self._verifier

    @verifier.setter
    def verifier(self, verifier: int):
        """Sets the verifier of this ModelSpec.


        :param verifier: The verifier of this ModelSpec.
        :type verifier: int
        """

        self._verifier = verifier

    @property
    def wasm(self) -> ModelJobSpecWasm:
        """Gets the wasm of this ModelSpec.


        :return: The wasm of this ModelSpec.
        :rtype: ModelJobSpecWasm
        """
        return self._wasm

    @wasm.setter
    def wasm(self, wasm: ModelJobSpecWasm):
        """Sets the wasm of this ModelSpec.


        :param wasm: The wasm of this ModelSpec.
        :type wasm: ModelJobSpecWasm
        """

        self._wasm = wasm

    @property
    def inputs(self) -> List[ModelStorageSpec]:
        """Gets the inputs of this ModelSpec.

        the data volumes we will read in the job for example \"read this ipfs cid\" TODO: #667 Replace with \"Inputs\", \"Outputs\" (note the caps) for yaml/json when we update the n.js file  # noqa: E501

        :return: The inputs of this ModelSpec.
        :rtype: List[ModelStorageSpec]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs: List[ModelStorageSpec]):
        """Sets the inputs of this ModelSpec.

        the data volumes we will read in the job for example \"read this ipfs cid\" TODO: #667 Replace with \"Inputs\", \"Outputs\" (note the caps) for yaml/json when we update the n.js file  # noqa: E501

        :param inputs: The inputs of this ModelSpec.
        :type inputs: List[ModelStorageSpec]
        """

        self._inputs = inputs

    @property
    def outputs(self) -> List[ModelStorageSpec]:
        """Gets the outputs of this ModelSpec.

        the data volumes we will write in the job for example \"write the results to ipfs\"  # noqa: E501

        :return: The outputs of this ModelSpec.
        :rtype: List[ModelStorageSpec]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs: List[ModelStorageSpec]):
        """Sets the outputs of this ModelSpec.

        the data volumes we will write in the job for example \"write the results to ipfs\"  # noqa: E501

        :param outputs: The outputs of this ModelSpec.
        :type outputs: List[ModelStorageSpec]
        """

        self._outputs = outputs
