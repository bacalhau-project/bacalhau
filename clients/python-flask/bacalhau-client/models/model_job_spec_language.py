# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bacalhau-client.models.base_model_ import Model
from bacalhau-client.models.model_storage_spec import ModelStorageSpec  # noqa: F401,E501
from bacalhau-client import util


class ModelJobSpecLanguage(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, command: str=None, deterministic_execution: bool=None, job_context: ModelStorageSpec=None, language: str=None, language_version: str=None, program_path: str=None, requirements_path: str=None):  # noqa: E501
        """ModelJobSpecLanguage - a model defined in Swagger

        :param command: The command of this ModelJobSpecLanguage.  # noqa: E501
        :type command: str
        :param deterministic_execution: The deterministic_execution of this ModelJobSpecLanguage.  # noqa: E501
        :type deterministic_execution: bool
        :param job_context: The job_context of this ModelJobSpecLanguage.  # noqa: E501
        :type job_context: ModelStorageSpec
        :param language: The language of this ModelJobSpecLanguage.  # noqa: E501
        :type language: str
        :param language_version: The language_version of this ModelJobSpecLanguage.  # noqa: E501
        :type language_version: str
        :param program_path: The program_path of this ModelJobSpecLanguage.  # noqa: E501
        :type program_path: str
        :param requirements_path: The requirements_path of this ModelJobSpecLanguage.  # noqa: E501
        :type requirements_path: str
        """
        self.swagger_types = {
            'command': str,
            'deterministic_execution': bool,
            'job_context': ModelStorageSpec,
            'language': str,
            'language_version': str,
            'program_path': str,
            'requirements_path': str
        }

        self.attribute_map = {
            'command': 'Command',
            'deterministic_execution': 'DeterministicExecution',
            'job_context': 'JobContext',
            'language': 'Language',
            'language_version': 'LanguageVersion',
            'program_path': 'ProgramPath',
            'requirements_path': 'RequirementsPath'
        }
        self._command = command
        self._deterministic_execution = deterministic_execution
        self._job_context = job_context
        self._language = language
        self._language_version = language_version
        self._program_path = program_path
        self._requirements_path = requirements_path

    @classmethod
    def from_dict(cls, dikt) -> 'ModelJobSpecLanguage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The model.JobSpecLanguage of this ModelJobSpecLanguage.  # noqa: E501
        :rtype: ModelJobSpecLanguage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self) -> str:
        """Gets the command of this ModelJobSpecLanguage.

        optional program specified on commandline, like python -c \"print(1+1)\"  # noqa: E501

        :return: The command of this ModelJobSpecLanguage.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: str):
        """Sets the command of this ModelJobSpecLanguage.

        optional program specified on commandline, like python -c \"print(1+1)\"  # noqa: E501

        :param command: The command of this ModelJobSpecLanguage.
        :type command: str
        """

        self._command = command

    @property
    def deterministic_execution(self) -> bool:
        """Gets the deterministic_execution of this ModelJobSpecLanguage.

        must this job be run in a deterministic context?  # noqa: E501

        :return: The deterministic_execution of this ModelJobSpecLanguage.
        :rtype: bool
        """
        return self._deterministic_execution

    @deterministic_execution.setter
    def deterministic_execution(self, deterministic_execution: bool):
        """Sets the deterministic_execution of this ModelJobSpecLanguage.

        must this job be run in a deterministic context?  # noqa: E501

        :param deterministic_execution: The deterministic_execution of this ModelJobSpecLanguage.
        :type deterministic_execution: bool
        """

        self._deterministic_execution = deterministic_execution

    @property
    def job_context(self) -> ModelStorageSpec:
        """Gets the job_context of this ModelJobSpecLanguage.


        :return: The job_context of this ModelJobSpecLanguage.
        :rtype: ModelStorageSpec
        """
        return self._job_context

    @job_context.setter
    def job_context(self, job_context: ModelStorageSpec):
        """Sets the job_context of this ModelJobSpecLanguage.


        :param job_context: The job_context of this ModelJobSpecLanguage.
        :type job_context: ModelStorageSpec
        """

        self._job_context = job_context

    @property
    def language(self) -> str:
        """Gets the language of this ModelJobSpecLanguage.

        e.g. python  # noqa: E501

        :return: The language of this ModelJobSpecLanguage.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this ModelJobSpecLanguage.

        e.g. python  # noqa: E501

        :param language: The language of this ModelJobSpecLanguage.
        :type language: str
        """

        self._language = language

    @property
    def language_version(self) -> str:
        """Gets the language_version of this ModelJobSpecLanguage.

        e.g. 3.8  # noqa: E501

        :return: The language_version of this ModelJobSpecLanguage.
        :rtype: str
        """
        return self._language_version

    @language_version.setter
    def language_version(self, language_version: str):
        """Sets the language_version of this ModelJobSpecLanguage.

        e.g. 3.8  # noqa: E501

        :param language_version: The language_version of this ModelJobSpecLanguage.
        :type language_version: str
        """

        self._language_version = language_version

    @property
    def program_path(self) -> str:
        """Gets the program_path of this ModelJobSpecLanguage.

        optional program path relative to the context dir. one of Command or ProgramPath must be specified  # noqa: E501

        :return: The program_path of this ModelJobSpecLanguage.
        :rtype: str
        """
        return self._program_path

    @program_path.setter
    def program_path(self, program_path: str):
        """Sets the program_path of this ModelJobSpecLanguage.

        optional program path relative to the context dir. one of Command or ProgramPath must be specified  # noqa: E501

        :param program_path: The program_path of this ModelJobSpecLanguage.
        :type program_path: str
        """

        self._program_path = program_path

    @property
    def requirements_path(self) -> str:
        """Gets the requirements_path of this ModelJobSpecLanguage.

        optional requirements.txt (or equivalent) path relative to the context dir  # noqa: E501

        :return: The requirements_path of this ModelJobSpecLanguage.
        :rtype: str
        """
        return self._requirements_path

    @requirements_path.setter
    def requirements_path(self, requirements_path: str):
        """Sets the requirements_path of this ModelJobSpecLanguage.

        optional requirements.txt (or equivalent) path relative to the context dir  # noqa: E501

        :param requirements_path: The requirements_path of this ModelJobSpecLanguage.
        :type requirements_path: str
        """

        self._requirements_path = requirements_path
