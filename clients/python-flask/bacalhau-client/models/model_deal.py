# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bacalhau-client.models.base_model_ import Model
from bacalhau-client import util


class ModelDeal(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, concurrency: int=None, confidence: int=None, min_bids: int=None):  # noqa: E501
        """ModelDeal - a model defined in Swagger

        :param concurrency: The concurrency of this ModelDeal.  # noqa: E501
        :type concurrency: int
        :param confidence: The confidence of this ModelDeal.  # noqa: E501
        :type confidence: int
        :param min_bids: The min_bids of this ModelDeal.  # noqa: E501
        :type min_bids: int
        """
        self.swagger_types = {
            'concurrency': int,
            'confidence': int,
            'min_bids': int
        }

        self.attribute_map = {
            'concurrency': 'Concurrency',
            'confidence': 'Confidence',
            'min_bids': 'MinBids'
        }
        self._concurrency = concurrency
        self._confidence = confidence
        self._min_bids = min_bids

    @classmethod
    def from_dict(cls, dikt) -> 'ModelDeal':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The model.Deal of this ModelDeal.  # noqa: E501
        :rtype: ModelDeal
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concurrency(self) -> int:
        """Gets the concurrency of this ModelDeal.

        The maximum number of concurrent compute node bids that will be accepted by the requester node on behalf of the client.  # noqa: E501

        :return: The concurrency of this ModelDeal.
        :rtype: int
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency: int):
        """Sets the concurrency of this ModelDeal.

        The maximum number of concurrent compute node bids that will be accepted by the requester node on behalf of the client.  # noqa: E501

        :param concurrency: The concurrency of this ModelDeal.
        :type concurrency: int
        """

        self._concurrency = concurrency

    @property
    def confidence(self) -> int:
        """Gets the confidence of this ModelDeal.

        The number of nodes that must agree on a verification result this is used by the different verifiers - for example the deterministic verifier requires the winning group size to be at least this size  # noqa: E501

        :return: The confidence of this ModelDeal.
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence: int):
        """Sets the confidence of this ModelDeal.

        The number of nodes that must agree on a verification result this is used by the different verifiers - for example the deterministic verifier requires the winning group size to be at least this size  # noqa: E501

        :param confidence: The confidence of this ModelDeal.
        :type confidence: int
        """

        self._confidence = confidence

    @property
    def min_bids(self) -> int:
        """Gets the min_bids of this ModelDeal.

        The minimum number of bids that must be received before the Requester node will randomly accept concurrency-many of them. This allows the Requester node to get some level of guarantee that the execution of the jobs will be spread evenly across the network (assuming that this value is some large proportion of the size of the network).  # noqa: E501

        :return: The min_bids of this ModelDeal.
        :rtype: int
        """
        return self._min_bids

    @min_bids.setter
    def min_bids(self, min_bids: int):
        """Sets the min_bids of this ModelDeal.

        The minimum number of bids that must be received before the Requester node will randomly accept concurrency-many of them. This allows the Requester node to get some level of guarantee that the execution of the jobs will be spread evenly across the network (assuming that this value is some large proportion of the size of the network).  # noqa: E501

        :param min_bids: The min_bids of this ModelDeal.
        :type min_bids: int
        """

        self._min_bids = min_bids
