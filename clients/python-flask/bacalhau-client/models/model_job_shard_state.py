# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bacalhau-client.models.base_model_ import Model
from bacalhau-client.models.model_run_command_result import ModelRunCommandResult  # noqa: F401,E501
from bacalhau-client.models.model_storage_spec import ModelStorageSpec  # noqa: F401,E501
from bacalhau-client.models.model_verification_result import ModelVerificationResult  # noqa: F401,E501
from bacalhau-client import util


class ModelJobShardState(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, node_id: str=None, published_results: ModelStorageSpec=None, run_output: ModelRunCommandResult=None, shard_index: int=None, state: int=None, status: str=None, verification_proposal: List[int]=None, verification_result: ModelVerificationResult=None):  # noqa: E501
        """ModelJobShardState - a model defined in Swagger

        :param node_id: The node_id of this ModelJobShardState.  # noqa: E501
        :type node_id: str
        :param published_results: The published_results of this ModelJobShardState.  # noqa: E501
        :type published_results: ModelStorageSpec
        :param run_output: The run_output of this ModelJobShardState.  # noqa: E501
        :type run_output: ModelRunCommandResult
        :param shard_index: The shard_index of this ModelJobShardState.  # noqa: E501
        :type shard_index: int
        :param state: The state of this ModelJobShardState.  # noqa: E501
        :type state: int
        :param status: The status of this ModelJobShardState.  # noqa: E501
        :type status: str
        :param verification_proposal: The verification_proposal of this ModelJobShardState.  # noqa: E501
        :type verification_proposal: List[int]
        :param verification_result: The verification_result of this ModelJobShardState.  # noqa: E501
        :type verification_result: ModelVerificationResult
        """
        self.swagger_types = {
            'node_id': str,
            'published_results': ModelStorageSpec,
            'run_output': ModelRunCommandResult,
            'shard_index': int,
            'state': int,
            'status': str,
            'verification_proposal': List[int],
            'verification_result': ModelVerificationResult
        }

        self.attribute_map = {
            'node_id': 'NodeId',
            'published_results': 'PublishedResults',
            'run_output': 'RunOutput',
            'shard_index': 'ShardIndex',
            'state': 'State',
            'status': 'Status',
            'verification_proposal': 'VerificationProposal',
            'verification_result': 'VerificationResult'
        }
        self._node_id = node_id
        self._published_results = published_results
        self._run_output = run_output
        self._shard_index = shard_index
        self._state = state
        self._status = status
        self._verification_proposal = verification_proposal
        self._verification_result = verification_result

    @classmethod
    def from_dict(cls, dikt) -> 'ModelJobShardState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The model.JobShardState of this ModelJobShardState.  # noqa: E501
        :rtype: ModelJobShardState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_id(self) -> str:
        """Gets the node_id of this ModelJobShardState.

        which node is running this shard  # noqa: E501

        :return: The node_id of this ModelJobShardState.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id: str):
        """Sets the node_id of this ModelJobShardState.

        which node is running this shard  # noqa: E501

        :param node_id: The node_id of this ModelJobShardState.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def published_results(self) -> ModelStorageSpec:
        """Gets the published_results of this ModelJobShardState.


        :return: The published_results of this ModelJobShardState.
        :rtype: ModelStorageSpec
        """
        return self._published_results

    @published_results.setter
    def published_results(self, published_results: ModelStorageSpec):
        """Sets the published_results of this ModelJobShardState.


        :param published_results: The published_results of this ModelJobShardState.
        :type published_results: ModelStorageSpec
        """

        self._published_results = published_results

    @property
    def run_output(self) -> ModelRunCommandResult:
        """Gets the run_output of this ModelJobShardState.


        :return: The run_output of this ModelJobShardState.
        :rtype: ModelRunCommandResult
        """
        return self._run_output

    @run_output.setter
    def run_output(self, run_output: ModelRunCommandResult):
        """Sets the run_output of this ModelJobShardState.


        :param run_output: The run_output of this ModelJobShardState.
        :type run_output: ModelRunCommandResult
        """

        self._run_output = run_output

    @property
    def shard_index(self) -> int:
        """Gets the shard_index of this ModelJobShardState.

        what shard is this we are running  # noqa: E501

        :return: The shard_index of this ModelJobShardState.
        :rtype: int
        """
        return self._shard_index

    @shard_index.setter
    def shard_index(self, shard_index: int):
        """Sets the shard_index of this ModelJobShardState.

        what shard is this we are running  # noqa: E501

        :param shard_index: The shard_index of this ModelJobShardState.
        :type shard_index: int
        """

        self._shard_index = shard_index

    @property
    def state(self) -> int:
        """Gets the state of this ModelJobShardState.

        what is the state of the shard on this node  # noqa: E501

        :return: The state of this ModelJobShardState.
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state: int):
        """Sets the state of this ModelJobShardState.

        what is the state of the shard on this node  # noqa: E501

        :param state: The state of this ModelJobShardState.
        :type state: int
        """

        self._state = state

    @property
    def status(self) -> str:
        """Gets the status of this ModelJobShardState.

        an arbitrary status message  # noqa: E501

        :return: The status of this ModelJobShardState.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ModelJobShardState.

        an arbitrary status message  # noqa: E501

        :param status: The status of this ModelJobShardState.
        :type status: str
        """

        self._status = status

    @property
    def verification_proposal(self) -> List[int]:
        """Gets the verification_proposal of this ModelJobShardState.

        the proposed results for this shard this will be resolved by the verifier somehow  # noqa: E501

        :return: The verification_proposal of this ModelJobShardState.
        :rtype: List[int]
        """
        return self._verification_proposal

    @verification_proposal.setter
    def verification_proposal(self, verification_proposal: List[int]):
        """Sets the verification_proposal of this ModelJobShardState.

        the proposed results for this shard this will be resolved by the verifier somehow  # noqa: E501

        :param verification_proposal: The verification_proposal of this ModelJobShardState.
        :type verification_proposal: List[int]
        """

        self._verification_proposal = verification_proposal

    @property
    def verification_result(self) -> ModelVerificationResult:
        """Gets the verification_result of this ModelJobShardState.


        :return: The verification_result of this ModelJobShardState.
        :rtype: ModelVerificationResult
        """
        return self._verification_result

    @verification_result.setter
    def verification_result(self, verification_result: ModelVerificationResult):
        """Sets the verification_result of this ModelJobShardState.


        :param verification_result: The verification_result of this ModelJobShardState.
        :type verification_result: ModelVerificationResult
        """

        self._verification_result = verification_result
