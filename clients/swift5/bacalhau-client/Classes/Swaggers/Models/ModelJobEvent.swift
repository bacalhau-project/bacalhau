//
// ModelJobEvent.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct ModelJobEvent: Codable {

    /** APIVersion of the Job */
    public var aPIVersion: String?
    /** optional clientID if this is an externally triggered event (like create job) */
    public var clientID: String?
    public var deal: ModelDeal?
    public var eventName: Int?
    public var eventTime: String?
    public var jobExecutionPlan: ModelJobExecutionPlan?
    public var jobID: String?
    public var publishedResult: ModelStorageSpec?
    public var runOutput: ModelRunCommandResult?
    public var senderPublicKey: [Int]?
    /** what shard is this event for */
    public var shardIndex: Int?
    /** the node that emitted this event */
    public var sourceNodeID: String?
    public var spec: ModelSpec?
    public var status: String?
    /** the node that this event is for e.g. \&quot;AcceptJobBid\&quot; was emitted by Requester but it targeting compute node */
    public var targetNodeID: String?
    public var verificationProposal: [Int]?
    public var verificationResult: ModelVerificationResult?

    public init(aPIVersion: String? = nil, clientID: String? = nil, deal: ModelDeal? = nil, eventName: Int? = nil, eventTime: String? = nil, jobExecutionPlan: ModelJobExecutionPlan? = nil, jobID: String? = nil, publishedResult: ModelStorageSpec? = nil, runOutput: ModelRunCommandResult? = nil, senderPublicKey: [Int]? = nil, shardIndex: Int? = nil, sourceNodeID: String? = nil, spec: ModelSpec? = nil, status: String? = nil, targetNodeID: String? = nil, verificationProposal: [Int]? = nil, verificationResult: ModelVerificationResult? = nil) {
        self.aPIVersion = aPIVersion
        self.clientID = clientID
        self.deal = deal
        self.eventName = eventName
        self.eventTime = eventTime
        self.jobExecutionPlan = jobExecutionPlan
        self.jobID = jobID
        self.publishedResult = publishedResult
        self.runOutput = runOutput
        self.senderPublicKey = senderPublicKey
        self.shardIndex = shardIndex
        self.sourceNodeID = sourceNodeID
        self.spec = spec
        self.status = status
        self.targetNodeID = targetNodeID
        self.verificationProposal = verificationProposal
        self.verificationResult = verificationResult
    }

    public enum CodingKeys: String, CodingKey { 
        case aPIVersion = "APIVersion"
        case clientID = "ClientID"
        case deal = "Deal"
        case eventName = "EventName"
        case eventTime = "EventTime"
        case jobExecutionPlan = "JobExecutionPlan"
        case jobID = "JobID"
        case publishedResult = "PublishedResult"
        case runOutput = "RunOutput"
        case senderPublicKey = "SenderPublicKey"
        case shardIndex = "ShardIndex"
        case sourceNodeID = "SourceNodeID"
        case spec = "Spec"
        case status = "Status"
        case targetNodeID = "TargetNodeID"
        case verificationProposal = "VerificationProposal"
        case verificationResult = "VerificationResult"
    }

}
