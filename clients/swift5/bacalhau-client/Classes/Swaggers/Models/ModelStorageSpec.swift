//
// ModelStorageSpec.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct ModelStorageSpec: Codable {

    /** The unique ID of the data, where it makes sense (for example, in an IPFS storage spec this will be the data&#x27;s CID). NOTE: The below is capitalized to match IPFS &amp; IPLD (even though it&#x27;s out of golang fmt) */
    public var CID: String?
    /** Additional properties specific to each driver */
    public var metadata: [String:String]?
    /** Name of the spec&#x27;s data, for reference. */
    public var name: String?
    /** StorageSource is the abstract source of the data. E.g. a storage source might be a URL download, but doesn&#x27;t specify how the execution engine does the download or what it will do with the downloaded data. */
    public var storageSource: Int?
    /** Source URL of the data */
    public var URL: String?
    /** The path that the spec&#x27;s data should be mounted on, where it makes sense (for example, in a Docker storage spec this will be a filesystem path). TODO: #668 Replace with \&quot;Path\&quot; (note the caps) for yaml/json when we update the n.js file */
    public var path: String?

    public init(CID: String? = nil, metadata: [String:String]? = nil, name: String? = nil, storageSource: Int? = nil, URL: String? = nil, path: String? = nil) {
        self.CID = CID
        self.metadata = metadata
        self.name = name
        self.storageSource = storageSource
        self.URL = URL
        self.path = path
    }

    public enum CodingKeys: String, CodingKey { 
        case CID
        case metadata = "Metadata"
        case name = "Name"
        case storageSource = "StorageSource"
        case URL
        case path
    }

}
