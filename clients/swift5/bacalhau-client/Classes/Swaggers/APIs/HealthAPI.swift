//
// HealthAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class HealthAPI {
    /**
     Returns debug information on what the current node is doing.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiServerdebug(completion: @escaping ((_ data: PublicapiDebugResponse?,_ error: Error?) -> Void)) {
        apiServerdebugWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns debug information on what the current node is doing.
     - GET /debug
     - 

     - examples: [{contentType=application/json, example={
  "ComputeJobs" : [ {
    "ShardID" : "ShardID",
    "State" : "State"
  }, {
    "ShardID" : "ShardID",
    "State" : "State"
  } ],
  "AvailableComputeCapacity" : {
    "Memory" : 27487790694,
    "CPU" : 9.600000000000001,
    "Disk" : 212663867801,
    "GPU" : 1
  },
  "RequesterJobs" : [ {
    "ShardID" : "ShardID",
    "State" : "State",
    "CompletedNodesCount" : 6,
    "BiddingNodesCount" : 0
  }, {
    "ShardID" : "ShardID",
    "State" : "State",
    "CompletedNodesCount" : 6,
    "BiddingNodesCount" : 0
  } ]
}}]

     - returns: RequestBuilder<PublicapiDebugResponse> 
     */
    open class func apiServerdebugWithRequestBuilder() -> RequestBuilder<PublicapiDebugResponse> {
        let path = "/debug"
        let URLString = bacalhau-clientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PublicapiDebugResponse>.Type = bacalhau-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiServerhealthz(completion: @escaping ((_ data: TypesHealthInfo?,_ error: Error?) -> Void)) {
        apiServerhealthzWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /healthz
     - 

     - examples: [{contentType=application/json, example={
  "FreeSpace" : {
    "IPFSMount" : {
      "All" : 0,
      "Used" : 1,
      "Free" : 6
    }
  }
}}]

     - returns: RequestBuilder<TypesHealthInfo> 
     */
    open class func apiServerhealthzWithRequestBuilder() -> RequestBuilder<TypesHealthInfo> {
        let path = "/healthz"
        let URLString = bacalhau-clientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TypesHealthInfo>.Type = bacalhau-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiServerlivez(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiServerlivezWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /livez
     - 

     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func apiServerlivezWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/livez"
        let URLString = bacalhau-clientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = bacalhau-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiServerlogz(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiServerlogzWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /logz
     - 

     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func apiServerlogzWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/logz"
        let URLString = bacalhau-clientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = bacalhau-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiServerreadyz(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiServerreadyzWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /readyz
     - 

     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func apiServerreadyzWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/readyz"
        let URLString = bacalhau-clientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = bacalhau-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiServervarz(completion: @escaping ((_ data: [Int]?,_ error: Error?) -> Void)) {
        apiServervarzWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /varz
     - 

     - examples: [{contentType=application/json, example=[ 0, 0 ]}]

     - returns: RequestBuilder<[Int]> 
     */
    open class func apiServervarzWithRequestBuilder() -> RequestBuilder<[Int]> {
        let path = "/varz"
        let URLString = bacalhau-clientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Int]>.Type = bacalhau-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
