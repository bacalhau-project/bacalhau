/*
 * Bacalhau API
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BacalhauClient);
  }
}(this, function(expect, BacalhauClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelJobEvent', function() {
      beforeEach(function() {
        instance = new BacalhauClient.ModelJobEvent();
      });

      it('should create an instance of ModelJobEvent', function() {
        // TODO: update the code to test ModelJobEvent
        expect(instance).to.be.a(BacalhauClient.ModelJobEvent);
      });

      it('should have the property aPIVersion (base name: "APIVersion")', function() {
        // TODO: update the code to test the property aPIVersion
        expect(instance).to.have.property('aPIVersion');
        // expect(instance.aPIVersion).to.be(expectedValueLiteral);
      });

      it('should have the property clientID (base name: "ClientID")', function() {
        // TODO: update the code to test the property clientID
        expect(instance).to.have.property('clientID');
        // expect(instance.clientID).to.be(expectedValueLiteral);
      });

      it('should have the property deal (base name: "Deal")', function() {
        // TODO: update the code to test the property deal
        expect(instance).to.have.property('deal');
        // expect(instance.deal).to.be(expectedValueLiteral);
      });

      it('should have the property eventName (base name: "EventName")', function() {
        // TODO: update the code to test the property eventName
        expect(instance).to.have.property('eventName');
        // expect(instance.eventName).to.be(expectedValueLiteral);
      });

      it('should have the property eventTime (base name: "EventTime")', function() {
        // TODO: update the code to test the property eventTime
        expect(instance).to.have.property('eventTime');
        // expect(instance.eventTime).to.be(expectedValueLiteral);
      });

      it('should have the property jobExecutionPlan (base name: "JobExecutionPlan")', function() {
        // TODO: update the code to test the property jobExecutionPlan
        expect(instance).to.have.property('jobExecutionPlan');
        // expect(instance.jobExecutionPlan).to.be(expectedValueLiteral);
      });

      it('should have the property jobID (base name: "JobID")', function() {
        // TODO: update the code to test the property jobID
        expect(instance).to.have.property('jobID');
        // expect(instance.jobID).to.be(expectedValueLiteral);
      });

      it('should have the property publishedResult (base name: "PublishedResult")', function() {
        // TODO: update the code to test the property publishedResult
        expect(instance).to.have.property('publishedResult');
        // expect(instance.publishedResult).to.be(expectedValueLiteral);
      });

      it('should have the property runOutput (base name: "RunOutput")', function() {
        // TODO: update the code to test the property runOutput
        expect(instance).to.have.property('runOutput');
        // expect(instance.runOutput).to.be(expectedValueLiteral);
      });

      it('should have the property senderPublicKey (base name: "SenderPublicKey")', function() {
        // TODO: update the code to test the property senderPublicKey
        expect(instance).to.have.property('senderPublicKey');
        // expect(instance.senderPublicKey).to.be(expectedValueLiteral);
      });

      it('should have the property shardIndex (base name: "ShardIndex")', function() {
        // TODO: update the code to test the property shardIndex
        expect(instance).to.have.property('shardIndex');
        // expect(instance.shardIndex).to.be(expectedValueLiteral);
      });

      it('should have the property sourceNodeID (base name: "SourceNodeID")', function() {
        // TODO: update the code to test the property sourceNodeID
        expect(instance).to.have.property('sourceNodeID');
        // expect(instance.sourceNodeID).to.be(expectedValueLiteral);
      });

      it('should have the property spec (base name: "Spec")', function() {
        // TODO: update the code to test the property spec
        expect(instance).to.have.property('spec');
        // expect(instance.spec).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "Status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property targetNodeID (base name: "TargetNodeID")', function() {
        // TODO: update the code to test the property targetNodeID
        expect(instance).to.have.property('targetNodeID');
        // expect(instance.targetNodeID).to.be(expectedValueLiteral);
      });

      it('should have the property verificationProposal (base name: "VerificationProposal")', function() {
        // TODO: update the code to test the property verificationProposal
        expect(instance).to.have.property('verificationProposal');
        // expect(instance.verificationProposal).to.be(expectedValueLiteral);
      });

      it('should have the property verificationResult (base name: "VerificationResult")', function() {
        // TODO: update the code to test the property verificationResult
        expect(instance).to.have.property('verificationResult');
        // expect(instance.verificationResult).to.be(expectedValueLiteral);
      });

    });
  });

}));
