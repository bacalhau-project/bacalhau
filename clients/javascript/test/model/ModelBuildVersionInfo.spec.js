/*
 * Bacalhau API
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BacalhauClient);
  }
}(this, function(expect, BacalhauClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelBuildVersionInfo', function() {
      beforeEach(function() {
        instance = new BacalhauClient.ModelBuildVersionInfo();
      });

      it('should create an instance of ModelBuildVersionInfo', function() {
        // TODO: update the code to test ModelBuildVersionInfo
        expect(instance).to.be.a(BacalhauClient.ModelBuildVersionInfo);
      });

      it('should have the property builddate (base name: "builddate")', function() {
        // TODO: update the code to test the property builddate
        expect(instance).to.have.property('builddate');
        // expect(instance.builddate).to.be(expectedValueLiteral);
      });

      it('should have the property gitcommit (base name: "gitcommit")', function() {
        // TODO: update the code to test the property gitcommit
        expect(instance).to.have.property('gitcommit');
        // expect(instance.gitcommit).to.be(expectedValueLiteral);
      });

      it('should have the property gitversion (base name: "gitversion")', function() {
        // TODO: update the code to test the property gitversion
        expect(instance).to.have.property('gitversion');
        // expect(instance.gitversion).to.be(expectedValueLiteral);
      });

      it('should have the property goarch (base name: "goarch")', function() {
        // TODO: update the code to test the property goarch
        expect(instance).to.have.property('goarch');
        // expect(instance.goarch).to.be(expectedValueLiteral);
      });

      it('should have the property goos (base name: "goos")', function() {
        // TODO: update the code to test the property goos
        expect(instance).to.have.property('goos');
        // expect(instance.goos).to.be(expectedValueLiteral);
      });

      it('should have the property major (base name: "major")', function() {
        // TODO: update the code to test the property major
        expect(instance).to.have.property('major');
        // expect(instance.major).to.be(expectedValueLiteral);
      });

      it('should have the property minor (base name: "minor")', function() {
        // TODO: update the code to test the property minor
        expect(instance).to.have.property('minor');
        // expect(instance.minor).to.be(expectedValueLiteral);
      });

    });
  });

}));
