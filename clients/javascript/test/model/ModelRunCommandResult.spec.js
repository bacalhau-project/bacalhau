/*
 * Bacalhau API
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BacalhauClient);
  }
}(this, function(expect, BacalhauClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelRunCommandResult', function() {
      beforeEach(function() {
        instance = new BacalhauClient.ModelRunCommandResult();
      });

      it('should create an instance of ModelRunCommandResult', function() {
        // TODO: update the code to test ModelRunCommandResult
        expect(instance).to.be.a(BacalhauClient.ModelRunCommandResult);
      });

      it('should have the property exitCode (base name: "exitCode")', function() {
        // TODO: update the code to test the property exitCode
        expect(instance).to.have.property('exitCode');
        // expect(instance.exitCode).to.be(expectedValueLiteral);
      });

      it('should have the property runnerError (base name: "runnerError")', function() {
        // TODO: update the code to test the property runnerError
        expect(instance).to.have.property('runnerError');
        // expect(instance.runnerError).to.be(expectedValueLiteral);
      });

      it('should have the property stderr (base name: "stderr")', function() {
        // TODO: update the code to test the property stderr
        expect(instance).to.have.property('stderr');
        // expect(instance.stderr).to.be(expectedValueLiteral);
      });

      it('should have the property stderrtruncated (base name: "stderrtruncated")', function() {
        // TODO: update the code to test the property stderrtruncated
        expect(instance).to.have.property('stderrtruncated');
        // expect(instance.stderrtruncated).to.be(expectedValueLiteral);
      });

      it('should have the property stdout (base name: "stdout")', function() {
        // TODO: update the code to test the property stdout
        expect(instance).to.have.property('stdout');
        // expect(instance.stdout).to.be(expectedValueLiteral);
      });

      it('should have the property stdouttruncated (base name: "stdouttruncated")', function() {
        // TODO: update the code to test the property stdouttruncated
        expect(instance).to.have.property('stdouttruncated');
        // expect(instance.stdouttruncated).to.be(expectedValueLiteral);
      });

    });
  });

}));
