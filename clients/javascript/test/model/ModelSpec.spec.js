/*
 * Bacalhau API
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BacalhauClient);
  }
}(this, function(expect, BacalhauClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelSpec', function() {
      beforeEach(function() {
        instance = new BacalhauClient.ModelSpec();
      });

      it('should create an instance of ModelSpec', function() {
        // TODO: update the code to test ModelSpec
        expect(instance).to.be.a(BacalhauClient.ModelSpec);
      });

      it('should have the property annotations (base name: "Annotations")', function() {
        // TODO: update the code to test the property annotations
        expect(instance).to.have.property('annotations');
        // expect(instance.annotations).to.be(expectedValueLiteral);
      });

      it('should have the property contexts (base name: "Contexts")', function() {
        // TODO: update the code to test the property contexts
        expect(instance).to.have.property('contexts');
        // expect(instance.contexts).to.be(expectedValueLiteral);
      });

      it('should have the property doNotTrack (base name: "DoNotTrack")', function() {
        // TODO: update the code to test the property doNotTrack
        expect(instance).to.have.property('doNotTrack');
        // expect(instance.doNotTrack).to.be(expectedValueLiteral);
      });

      it('should have the property docker (base name: "Docker")', function() {
        // TODO: update the code to test the property docker
        expect(instance).to.have.property('docker');
        // expect(instance.docker).to.be(expectedValueLiteral);
      });

      it('should have the property engine (base name: "Engine")', function() {
        // TODO: update the code to test the property engine
        expect(instance).to.have.property('engine');
        // expect(instance.engine).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "Language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property publisher (base name: "Publisher")', function() {
        // TODO: update the code to test the property publisher
        expect(instance).to.have.property('publisher');
        // expect(instance.publisher).to.be(expectedValueLiteral);
      });

      it('should have the property resources (base name: "Resources")', function() {
        // TODO: update the code to test the property resources
        expect(instance).to.have.property('resources');
        // expect(instance.resources).to.be(expectedValueLiteral);
      });

      it('should have the property sharding (base name: "Sharding")', function() {
        // TODO: update the code to test the property sharding
        expect(instance).to.have.property('sharding');
        // expect(instance.sharding).to.be(expectedValueLiteral);
      });

      it('should have the property timeout (base name: "Timeout")', function() {
        // TODO: update the code to test the property timeout
        expect(instance).to.have.property('timeout');
        // expect(instance.timeout).to.be(expectedValueLiteral);
      });

      it('should have the property verifier (base name: "Verifier")', function() {
        // TODO: update the code to test the property verifier
        expect(instance).to.have.property('verifier');
        // expect(instance.verifier).to.be(expectedValueLiteral);
      });

      it('should have the property wasm (base name: "Wasm")', function() {
        // TODO: update the code to test the property wasm
        expect(instance).to.have.property('wasm');
        // expect(instance.wasm).to.be(expectedValueLiteral);
      });

      it('should have the property inputs (base name: "inputs")', function() {
        // TODO: update the code to test the property inputs
        expect(instance).to.have.property('inputs');
        // expect(instance.inputs).to.be(expectedValueLiteral);
      });

      it('should have the property outputs (base name: "outputs")', function() {
        // TODO: update the code to test the property outputs
        expect(instance).to.have.property('outputs');
        // expect(instance.outputs).to.be(expectedValueLiteral);
      });

    });
  });

}));
