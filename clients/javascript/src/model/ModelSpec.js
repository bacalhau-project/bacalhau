/*
 * Bacalhau API
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {ModelJobShardingConfig} from './ModelJobShardingConfig';
import {ModelJobSpecDocker} from './ModelJobSpecDocker';
import {ModelJobSpecLanguage} from './ModelJobSpecLanguage';
import {ModelJobSpecWasm} from './ModelJobSpecWasm';
import {ModelResourceUsageConfig} from './ModelResourceUsageConfig';
import {ModelStorageSpec} from './ModelStorageSpec';

/**
 * The ModelSpec model module.
 * @module model/ModelSpec
 * @version 0.3.13
 */
export class ModelSpec {
  /**
   * Constructs a new <code>ModelSpec</code>.
   * @alias module:model/ModelSpec
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ModelSpec</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ModelSpec} obj Optional instance to populate.
   * @return {module:model/ModelSpec} The populated <code>ModelSpec</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ModelSpec();
      if (data.hasOwnProperty('Annotations'))
        obj.annotations = ApiClient.convertToType(data['Annotations'], ['String']);
      if (data.hasOwnProperty('Contexts'))
        obj.contexts = ApiClient.convertToType(data['Contexts'], [ModelStorageSpec]);
      if (data.hasOwnProperty('DoNotTrack'))
        obj.doNotTrack = ApiClient.convertToType(data['DoNotTrack'], 'Boolean');
      if (data.hasOwnProperty('Docker'))
        obj.docker = ModelJobSpecDocker.constructFromObject(data['Docker']);
      if (data.hasOwnProperty('Engine'))
        obj.engine = ApiClient.convertToType(data['Engine'], 'Number');
      if (data.hasOwnProperty('Language'))
        obj.language = ModelJobSpecLanguage.constructFromObject(data['Language']);
      if (data.hasOwnProperty('Publisher'))
        obj.publisher = ApiClient.convertToType(data['Publisher'], 'Number');
      if (data.hasOwnProperty('Resources'))
        obj.resources = ModelResourceUsageConfig.constructFromObject(data['Resources']);
      if (data.hasOwnProperty('Sharding'))
        obj.sharding = ModelJobShardingConfig.constructFromObject(data['Sharding']);
      if (data.hasOwnProperty('Timeout'))
        obj.timeout = ApiClient.convertToType(data['Timeout'], 'Number');
      if (data.hasOwnProperty('Verifier'))
        obj.verifier = ApiClient.convertToType(data['Verifier'], 'Number');
      if (data.hasOwnProperty('Wasm'))
        obj.wasm = ModelJobSpecWasm.constructFromObject(data['Wasm']);
      if (data.hasOwnProperty('inputs'))
        obj.inputs = ApiClient.convertToType(data['inputs'], [ModelStorageSpec]);
      if (data.hasOwnProperty('outputs'))
        obj.outputs = ApiClient.convertToType(data['outputs'], [ModelStorageSpec]);
    }
    return obj;
  }
}

/**
 * Annotations on the job - could be user or machine assigned
 * @member {Array.<String>} annotations
 */
ModelSpec.prototype.annotations = undefined;

/**
 * Input volumes that will not be sharded for example to upload code into a base image every shard will get the full range of context volumes
 * @member {Array.<module:model/ModelStorageSpec>} contexts
 */
ModelSpec.prototype.contexts = undefined;

/**
 * Do not track specified by the client
 * @member {Boolean} doNotTrack
 */
ModelSpec.prototype.doNotTrack = undefined;

/**
 * @member {module:model/ModelJobSpecDocker} docker
 */
ModelSpec.prototype.docker = undefined;

/**
 * e.g. docker or language
 * @member {Number} engine
 */
ModelSpec.prototype.engine = undefined;

/**
 * @member {module:model/ModelJobSpecLanguage} language
 */
ModelSpec.prototype.language = undefined;

/**
 * there can be multiple publishers for the job
 * @member {Number} publisher
 */
ModelSpec.prototype.publisher = undefined;

/**
 * @member {module:model/ModelResourceUsageConfig} resources
 */
ModelSpec.prototype.resources = undefined;

/**
 * @member {module:model/ModelJobShardingConfig} sharding
 */
ModelSpec.prototype.sharding = undefined;

/**
 * How long a job can run in seconds before it is killed. This includes the time required to run, verify and publish results
 * @member {Number} timeout
 */
ModelSpec.prototype.timeout = undefined;

/**
 * @member {Number} verifier
 */
ModelSpec.prototype.verifier = undefined;

/**
 * @member {module:model/ModelJobSpecWasm} wasm
 */
ModelSpec.prototype.wasm = undefined;

/**
 * the data volumes we will read in the job for example \"read this ipfs cid\" TODO: #667 Replace with \"Inputs\", \"Outputs\" (note the caps) for yaml/json when we update the n.js file
 * @member {Array.<module:model/ModelStorageSpec>} inputs
 */
ModelSpec.prototype.inputs = undefined;

/**
 * the data volumes we will write in the job for example \"write the results to ipfs\"
 * @member {Array.<module:model/ModelStorageSpec>} outputs
 */
ModelSpec.prototype.outputs = undefined;

