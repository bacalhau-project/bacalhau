/*
 * Bacalhau API
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The ModelDeal model module.
 * @module model/ModelDeal
 * @version 0.3.13
 */
export class ModelDeal {
  /**
   * Constructs a new <code>ModelDeal</code>.
   * @alias module:model/ModelDeal
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ModelDeal</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ModelDeal} obj Optional instance to populate.
   * @return {module:model/ModelDeal} The populated <code>ModelDeal</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ModelDeal();
      if (data.hasOwnProperty('Concurrency'))
        obj.concurrency = ApiClient.convertToType(data['Concurrency'], 'Number');
      if (data.hasOwnProperty('Confidence'))
        obj.confidence = ApiClient.convertToType(data['Confidence'], 'Number');
      if (data.hasOwnProperty('MinBids'))
        obj.minBids = ApiClient.convertToType(data['MinBids'], 'Number');
    }
    return obj;
  }
}

/**
 * The maximum number of concurrent compute node bids that will be accepted by the requester node on behalf of the client.
 * @member {Number} concurrency
 */
ModelDeal.prototype.concurrency = undefined;

/**
 * The number of nodes that must agree on a verification result this is used by the different verifiers - for example the deterministic verifier requires the winning group size to be at least this size
 * @member {Number} confidence
 */
ModelDeal.prototype.confidence = undefined;

/**
 * The minimum number of bids that must be received before the Requester node will randomly accept concurrency-many of them. This allows the Requester node to get some level of guarantee that the execution of the jobs will be spread evenly across the network (assuming that this value is some large proportion of the size of the network).
 * @member {Number} minBids
 */
ModelDeal.prototype.minBids = undefined;

