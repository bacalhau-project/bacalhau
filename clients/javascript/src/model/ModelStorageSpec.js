/*
 * Bacalhau API
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The ModelStorageSpec model module.
 * @module model/ModelStorageSpec
 * @version 0.3.13
 */
export class ModelStorageSpec {
  /**
   * Constructs a new <code>ModelStorageSpec</code>.
   * @alias module:model/ModelStorageSpec
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ModelStorageSpec</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ModelStorageSpec} obj Optional instance to populate.
   * @return {module:model/ModelStorageSpec} The populated <code>ModelStorageSpec</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ModelStorageSpec();
      if (data.hasOwnProperty('CID'))
        obj.CID = ApiClient.convertToType(data['CID'], 'String');
      if (data.hasOwnProperty('Metadata'))
        obj.metadata = ApiClient.convertToType(data['Metadata'], {'String': 'String'});
      if (data.hasOwnProperty('Name'))
        obj.name = ApiClient.convertToType(data['Name'], 'String');
      if (data.hasOwnProperty('StorageSource'))
        obj.storageSource = ApiClient.convertToType(data['StorageSource'], 'Number');
      if (data.hasOwnProperty('URL'))
        obj.URL = ApiClient.convertToType(data['URL'], 'String');
      if (data.hasOwnProperty('path'))
        obj.path = ApiClient.convertToType(data['path'], 'String');
    }
    return obj;
  }
}

/**
 * The unique ID of the data, where it makes sense (for example, in an IPFS storage spec this will be the data's CID). NOTE: The below is capitalized to match IPFS & IPLD (even though it's out of golang fmt)
 * @member {String} CID
 */
ModelStorageSpec.prototype.CID = undefined;

/**
 * Additional properties specific to each driver
 * @member {Object.<String, String>} metadata
 */
ModelStorageSpec.prototype.metadata = undefined;

/**
 * Name of the spec's data, for reference.
 * @member {String} name
 */
ModelStorageSpec.prototype.name = undefined;

/**
 * StorageSource is the abstract source of the data. E.g. a storage source might be a URL download, but doesn't specify how the execution engine does the download or what it will do with the downloaded data.
 * @member {Number} storageSource
 */
ModelStorageSpec.prototype.storageSource = undefined;

/**
 * Source URL of the data
 * @member {String} URL
 */
ModelStorageSpec.prototype.URL = undefined;

/**
 * The path that the spec's data should be mounted on, where it makes sense (for example, in a Docker storage spec this will be a filesystem path). TODO: #668 Replace with \"Path\" (note the caps) for yaml/json when we update the n.js file
 * @member {String} path
 */
ModelStorageSpec.prototype.path = undefined;

