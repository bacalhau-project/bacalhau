/*
 * Bacalhau API
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The ModelJobShardingConfig model module.
 * @module model/ModelJobShardingConfig
 * @version 0.3.13
 */
export class ModelJobShardingConfig {
  /**
   * Constructs a new <code>ModelJobShardingConfig</code>.
   * @alias module:model/ModelJobShardingConfig
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ModelJobShardingConfig</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ModelJobShardingConfig} obj Optional instance to populate.
   * @return {module:model/ModelJobShardingConfig} The populated <code>ModelJobShardingConfig</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ModelJobShardingConfig();
      if (data.hasOwnProperty('BatchSize'))
        obj.batchSize = ApiClient.convertToType(data['BatchSize'], 'Number');
      if (data.hasOwnProperty('GlobPattern'))
        obj.globPattern = ApiClient.convertToType(data['GlobPattern'], 'String');
      if (data.hasOwnProperty('GlobPatternBasePath'))
        obj.globPatternBasePath = ApiClient.convertToType(data['GlobPatternBasePath'], 'String');
    }
    return obj;
  }
}

/**
 * how many \"items\" are to be processed in each shard we first apply the glob pattern which will result in a flat list of items this number decides how to group that flat list into actual shards run by compute nodes
 * @member {Number} batchSize
 */
ModelJobShardingConfig.prototype.batchSize = undefined;

/**
 * divide the inputs up into the smallest possible unit for example /_* would mean \"all top level files or folders\" this being an empty string means \"no sharding\"
 * @member {String} globPattern
 */
ModelJobShardingConfig.prototype.globPattern = undefined;

/**
 * when using multiple input volumes what path do we treat as the common mount path to apply the glob pattern to
 * @member {String} globPatternBasePath
 */
ModelJobShardingConfig.prototype.globPatternBasePath = undefined;

