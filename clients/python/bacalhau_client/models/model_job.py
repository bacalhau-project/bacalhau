# coding: utf-8

"""
    Bacalhau API

    This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: team@bacalhau.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_version': 'str',
        'client_id': 'str',
        'created_at': 'str',
        'deal': 'ModelDeal',
        'execution_plan': 'ModelJobExecutionPlan',
        'id': 'str',
        'job_events': 'list[ModelJobEvent]',
        'job_state': 'ModelJobState',
        'local_job_events': 'list[ModelJobLocalEvent]',
        'requester_node_id': 'str',
        'requester_public_key': 'list[int]',
        'spec': 'ModelSpec'
    }

    attribute_map = {
        'api_version': 'APIVersion',
        'client_id': 'ClientID',
        'created_at': 'CreatedAt',
        'deal': 'Deal',
        'execution_plan': 'ExecutionPlan',
        'id': 'ID',
        'job_events': 'JobEvents',
        'job_state': 'JobState',
        'local_job_events': 'LocalJobEvents',
        'requester_node_id': 'RequesterNodeID',
        'requester_public_key': 'RequesterPublicKey',
        'spec': 'Spec'
    }

    def __init__(self, api_version=None, client_id=None, created_at=None, deal=None, execution_plan=None, id=None, job_events=None, job_state=None, local_job_events=None, requester_node_id=None, requester_public_key=None, spec=None):  # noqa: E501
        """ModelJob - a model defined in Swagger"""  # noqa: E501
        self._api_version = None
        self._client_id = None
        self._created_at = None
        self._deal = None
        self._execution_plan = None
        self._id = None
        self._job_events = None
        self._job_state = None
        self._local_job_events = None
        self._requester_node_id = None
        self._requester_public_key = None
        self._spec = None
        self.discriminator = None
        if api_version is not None:
            self.api_version = api_version
        if client_id is not None:
            self.client_id = client_id
        if created_at is not None:
            self.created_at = created_at
        if deal is not None:
            self.deal = deal
        if execution_plan is not None:
            self.execution_plan = execution_plan
        if id is not None:
            self.id = id
        if job_events is not None:
            self.job_events = job_events
        if job_state is not None:
            self.job_state = job_state
        if local_job_events is not None:
            self.local_job_events = local_job_events
        if requester_node_id is not None:
            self.requester_node_id = requester_node_id
        if requester_public_key is not None:
            self.requester_public_key = requester_public_key
        if spec is not None:
            self.spec = spec

    @property
    def api_version(self):
        """Gets the api_version of this ModelJob.  # noqa: E501


        :return: The api_version of this ModelJob.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ModelJob.


        :param api_version: The api_version of this ModelJob.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def client_id(self):
        """Gets the client_id of this ModelJob.  # noqa: E501

        The ID of the client that created this job.  # noqa: E501

        :return: The client_id of this ModelJob.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ModelJob.

        The ID of the client that created this job.  # noqa: E501

        :param client_id: The client_id of this ModelJob.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def created_at(self):
        """Gets the created_at of this ModelJob.  # noqa: E501

        Time the job was submitted to the bacalhau network.  # noqa: E501

        :return: The created_at of this ModelJob.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelJob.

        Time the job was submitted to the bacalhau network.  # noqa: E501

        :param created_at: The created_at of this ModelJob.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def deal(self):
        """Gets the deal of this ModelJob.  # noqa: E501


        :return: The deal of this ModelJob.  # noqa: E501
        :rtype: ModelDeal
        """
        return self._deal

    @deal.setter
    def deal(self, deal):
        """Sets the deal of this ModelJob.


        :param deal: The deal of this ModelJob.  # noqa: E501
        :type: ModelDeal
        """

        self._deal = deal

    @property
    def execution_plan(self):
        """Gets the execution_plan of this ModelJob.  # noqa: E501


        :return: The execution_plan of this ModelJob.  # noqa: E501
        :rtype: ModelJobExecutionPlan
        """
        return self._execution_plan

    @execution_plan.setter
    def execution_plan(self, execution_plan):
        """Sets the execution_plan of this ModelJob.


        :param execution_plan: The execution_plan of this ModelJob.  # noqa: E501
        :type: ModelJobExecutionPlan
        """

        self._execution_plan = execution_plan

    @property
    def id(self):
        """Gets the id of this ModelJob.  # noqa: E501

        The unique global ID of this job in the bacalhau network.  # noqa: E501

        :return: The id of this ModelJob.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelJob.

        The unique global ID of this job in the bacalhau network.  # noqa: E501

        :param id: The id of this ModelJob.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def job_events(self):
        """Gets the job_events of this ModelJob.  # noqa: E501

        All events associated with the job  # noqa: E501

        :return: The job_events of this ModelJob.  # noqa: E501
        :rtype: list[ModelJobEvent]
        """
        return self._job_events

    @job_events.setter
    def job_events(self, job_events):
        """Sets the job_events of this ModelJob.

        All events associated with the job  # noqa: E501

        :param job_events: The job_events of this ModelJob.  # noqa: E501
        :type: list[ModelJobEvent]
        """

        self._job_events = job_events

    @property
    def job_state(self):
        """Gets the job_state of this ModelJob.  # noqa: E501


        :return: The job_state of this ModelJob.  # noqa: E501
        :rtype: ModelJobState
        """
        return self._job_state

    @job_state.setter
    def job_state(self, job_state):
        """Sets the job_state of this ModelJob.


        :param job_state: The job_state of this ModelJob.  # noqa: E501
        :type: ModelJobState
        """

        self._job_state = job_state

    @property
    def local_job_events(self):
        """Gets the local_job_events of this ModelJob.  # noqa: E501

        All local events associated with the job  # noqa: E501

        :return: The local_job_events of this ModelJob.  # noqa: E501
        :rtype: list[ModelJobLocalEvent]
        """
        return self._local_job_events

    @local_job_events.setter
    def local_job_events(self, local_job_events):
        """Sets the local_job_events of this ModelJob.

        All local events associated with the job  # noqa: E501

        :param local_job_events: The local_job_events of this ModelJob.  # noqa: E501
        :type: list[ModelJobLocalEvent]
        """

        self._local_job_events = local_job_events

    @property
    def requester_node_id(self):
        """Gets the requester_node_id of this ModelJob.  # noqa: E501

        The ID of the requester node that owns this job.  # noqa: E501

        :return: The requester_node_id of this ModelJob.  # noqa: E501
        :rtype: str
        """
        return self._requester_node_id

    @requester_node_id.setter
    def requester_node_id(self, requester_node_id):
        """Sets the requester_node_id of this ModelJob.

        The ID of the requester node that owns this job.  # noqa: E501

        :param requester_node_id: The requester_node_id of this ModelJob.  # noqa: E501
        :type: str
        """

        self._requester_node_id = requester_node_id

    @property
    def requester_public_key(self):
        """Gets the requester_public_key of this ModelJob.  # noqa: E501

        The public key of the Requester node that created this job This can be used to encrypt messages back to the creator  # noqa: E501

        :return: The requester_public_key of this ModelJob.  # noqa: E501
        :rtype: list[int]
        """
        return self._requester_public_key

    @requester_public_key.setter
    def requester_public_key(self, requester_public_key):
        """Sets the requester_public_key of this ModelJob.

        The public key of the Requester node that created this job This can be used to encrypt messages back to the creator  # noqa: E501

        :param requester_public_key: The requester_public_key of this ModelJob.  # noqa: E501
        :type: list[int]
        """

        self._requester_public_key = requester_public_key

    @property
    def spec(self):
        """Gets the spec of this ModelJob.  # noqa: E501


        :return: The spec of this ModelJob.  # noqa: E501
        :rtype: ModelSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this ModelJob.


        :param spec: The spec of this ModelJob.  # noqa: E501
        :type: ModelSpec
        """

        self._spec = spec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
