# coding: utf-8

"""
    Bacalhau API

    This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: team@bacalhau.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComputenodeActiveJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity_requirements': 'ModelResourceUsageData',
        'shard_id': 'str',
        'state': 'str'
    }

    attribute_map = {
        'capacity_requirements': 'CapacityRequirements',
        'shard_id': 'ShardID',
        'state': 'State'
    }

    def __init__(self, capacity_requirements=None, shard_id=None, state=None):  # noqa: E501
        """ComputenodeActiveJob - a model defined in Swagger"""  # noqa: E501
        self._capacity_requirements = None
        self._shard_id = None
        self._state = None
        self.discriminator = None
        if capacity_requirements is not None:
            self.capacity_requirements = capacity_requirements
        if shard_id is not None:
            self.shard_id = shard_id
        if state is not None:
            self.state = state

    @property
    def capacity_requirements(self):
        """Gets the capacity_requirements of this ComputenodeActiveJob.  # noqa: E501


        :return: The capacity_requirements of this ComputenodeActiveJob.  # noqa: E501
        :rtype: ModelResourceUsageData
        """
        return self._capacity_requirements

    @capacity_requirements.setter
    def capacity_requirements(self, capacity_requirements):
        """Sets the capacity_requirements of this ComputenodeActiveJob.


        :param capacity_requirements: The capacity_requirements of this ComputenodeActiveJob.  # noqa: E501
        :type: ModelResourceUsageData
        """

        self._capacity_requirements = capacity_requirements

    @property
    def shard_id(self):
        """Gets the shard_id of this ComputenodeActiveJob.  # noqa: E501


        :return: The shard_id of this ComputenodeActiveJob.  # noqa: E501
        :rtype: str
        """
        return self._shard_id

    @shard_id.setter
    def shard_id(self, shard_id):
        """Sets the shard_id of this ComputenodeActiveJob.


        :param shard_id: The shard_id of this ComputenodeActiveJob.  # noqa: E501
        :type: str
        """

        self._shard_id = shard_id

    @property
    def state(self):
        """Gets the state of this ComputenodeActiveJob.  # noqa: E501


        :return: The state of this ComputenodeActiveJob.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ComputenodeActiveJob.


        :param state: The state of this ComputenodeActiveJob.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComputenodeActiveJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputenodeActiveJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
