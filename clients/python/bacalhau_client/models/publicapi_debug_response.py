# coding: utf-8

"""
    Bacalhau API

    This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: team@bacalhau.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublicapiDebugResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_compute_capacity': 'ModelResourceUsageData',
        'compute_jobs': 'list[ComputenodeActiveJob]',
        'requester_jobs': 'list[RequesternodeActiveJob]'
    }

    attribute_map = {
        'available_compute_capacity': 'AvailableComputeCapacity',
        'compute_jobs': 'ComputeJobs',
        'requester_jobs': 'RequesterJobs'
    }

    def __init__(self, available_compute_capacity=None, compute_jobs=None, requester_jobs=None):  # noqa: E501
        """PublicapiDebugResponse - a model defined in Swagger"""  # noqa: E501
        self._available_compute_capacity = None
        self._compute_jobs = None
        self._requester_jobs = None
        self.discriminator = None
        if available_compute_capacity is not None:
            self.available_compute_capacity = available_compute_capacity
        if compute_jobs is not None:
            self.compute_jobs = compute_jobs
        if requester_jobs is not None:
            self.requester_jobs = requester_jobs

    @property
    def available_compute_capacity(self):
        """Gets the available_compute_capacity of this PublicapiDebugResponse.  # noqa: E501


        :return: The available_compute_capacity of this PublicapiDebugResponse.  # noqa: E501
        :rtype: ModelResourceUsageData
        """
        return self._available_compute_capacity

    @available_compute_capacity.setter
    def available_compute_capacity(self, available_compute_capacity):
        """Sets the available_compute_capacity of this PublicapiDebugResponse.


        :param available_compute_capacity: The available_compute_capacity of this PublicapiDebugResponse.  # noqa: E501
        :type: ModelResourceUsageData
        """

        self._available_compute_capacity = available_compute_capacity

    @property
    def compute_jobs(self):
        """Gets the compute_jobs of this PublicapiDebugResponse.  # noqa: E501


        :return: The compute_jobs of this PublicapiDebugResponse.  # noqa: E501
        :rtype: list[ComputenodeActiveJob]
        """
        return self._compute_jobs

    @compute_jobs.setter
    def compute_jobs(self, compute_jobs):
        """Sets the compute_jobs of this PublicapiDebugResponse.


        :param compute_jobs: The compute_jobs of this PublicapiDebugResponse.  # noqa: E501
        :type: list[ComputenodeActiveJob]
        """

        self._compute_jobs = compute_jobs

    @property
    def requester_jobs(self):
        """Gets the requester_jobs of this PublicapiDebugResponse.  # noqa: E501


        :return: The requester_jobs of this PublicapiDebugResponse.  # noqa: E501
        :rtype: list[RequesternodeActiveJob]
        """
        return self._requester_jobs

    @requester_jobs.setter
    def requester_jobs(self, requester_jobs):
        """Sets the requester_jobs of this PublicapiDebugResponse.


        :param requester_jobs: The requester_jobs of this PublicapiDebugResponse.  # noqa: E501
        :type: list[RequesternodeActiveJob]
        """

        self._requester_jobs = requester_jobs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicapiDebugResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicapiDebugResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
