# coding: utf-8

"""
    Bacalhau API

    This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/bacalhau-project/bacalhau.  # noqa: E501

    OpenAPI spec version: ${PYPI_VERSION}
    Contact: team@bacalhau.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LegacyEventFilterOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exclude_execution_level': 'bool',
        'exclude_job_level': 'bool',
        'execution_id': 'str',
        'node_id': 'str',
        'since': 'int'
    }

    attribute_map = {
        'exclude_execution_level': 'exclude_execution_level',
        'exclude_job_level': 'exclude_job_level',
        'execution_id': 'execution_id',
        'node_id': 'node_id',
        'since': 'since'
    }

    def __init__(self, exclude_execution_level=None, exclude_job_level=None, execution_id=None, node_id=None, since=None):  # noqa: E501
        """LegacyEventFilterOptions - a model defined in Swagger"""  # noqa: E501
        self._exclude_execution_level = None
        self._exclude_job_level = None
        self._execution_id = None
        self._node_id = None
        self._since = None
        self.discriminator = None
        if exclude_execution_level is not None:
            self.exclude_execution_level = exclude_execution_level
        if exclude_job_level is not None:
            self.exclude_job_level = exclude_job_level
        if execution_id is not None:
            self.execution_id = execution_id
        if node_id is not None:
            self.node_id = node_id
        if since is not None:
            self.since = since

    @property
    def exclude_execution_level(self):
        """Gets the exclude_execution_level of this LegacyEventFilterOptions.  # noqa: E501


        :return: The exclude_execution_level of this LegacyEventFilterOptions.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_execution_level

    @exclude_execution_level.setter
    def exclude_execution_level(self, exclude_execution_level):
        """Sets the exclude_execution_level of this LegacyEventFilterOptions.


        :param exclude_execution_level: The exclude_execution_level of this LegacyEventFilterOptions.  # noqa: E501
        :type: bool
        """

        self._exclude_execution_level = exclude_execution_level

    @property
    def exclude_job_level(self):
        """Gets the exclude_job_level of this LegacyEventFilterOptions.  # noqa: E501


        :return: The exclude_job_level of this LegacyEventFilterOptions.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_job_level

    @exclude_job_level.setter
    def exclude_job_level(self, exclude_job_level):
        """Sets the exclude_job_level of this LegacyEventFilterOptions.


        :param exclude_job_level: The exclude_job_level of this LegacyEventFilterOptions.  # noqa: E501
        :type: bool
        """

        self._exclude_job_level = exclude_job_level

    @property
    def execution_id(self):
        """Gets the execution_id of this LegacyEventFilterOptions.  # noqa: E501


        :return: The execution_id of this LegacyEventFilterOptions.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this LegacyEventFilterOptions.


        :param execution_id: The execution_id of this LegacyEventFilterOptions.  # noqa: E501
        :type: str
        """

        self._execution_id = execution_id

    @property
    def node_id(self):
        """Gets the node_id of this LegacyEventFilterOptions.  # noqa: E501


        :return: The node_id of this LegacyEventFilterOptions.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this LegacyEventFilterOptions.


        :param node_id: The node_id of this LegacyEventFilterOptions.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def since(self):
        """Gets the since of this LegacyEventFilterOptions.  # noqa: E501


        :return: The since of this LegacyEventFilterOptions.  # noqa: E501
        :rtype: int
        """
        return self._since

    @since.setter
    def since(self, since):
        """Sets the since of this LegacyEventFilterOptions.


        :param since: The since of this LegacyEventFilterOptions.  # noqa: E501
        :type: int
        """

        self._since = since

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LegacyEventFilterOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegacyEventFilterOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
