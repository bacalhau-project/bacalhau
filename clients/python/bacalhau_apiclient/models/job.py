# coding: utf-8

"""
    Bacalhau API

    This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/bacalhau-project/bacalhau.  # noqa: E501

    OpenAPI spec version: ${PYPI_VERSION}
    Contact: team@bacalhau.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "api_version": "str",
        "metadata": "Metadata",
        "spec": "AllOfJobSpec",
    }

    attribute_map = {
        "api_version": "APIVersion",
        "metadata": "Metadata",
        "spec": "Spec",
    }

    def __init__(self, api_version=None, metadata=None, spec=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501
        self._api_version = None
        self._metadata = None
        self._spec = None
        self.discriminator = None
        if api_version is not None:
            self.api_version = api_version
        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec

    @property
    def api_version(self):
        """Gets the api_version of this Job.  # noqa: E501


        :return: The api_version of this Job.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this Job.


        :param api_version: The api_version of this Job.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def metadata(self):
        """Gets the metadata of this Job.  # noqa: E501


        :return: The metadata of this Job.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Job.


        :param metadata: The metadata of this Job.  # noqa: E501
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def spec(self):
        """Gets the spec of this Job.  # noqa: E501

        The specification of this job.  # noqa: E501

        :return: The spec of this Job.  # noqa: E501
        :rtype: AllOfJobSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this Job.

        The specification of this job.  # noqa: E501

        :param spec: The spec of this Job.  # noqa: E501
        :type: AllOfJobSpec
        """

        self._spec = spec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
