# coding: utf-8

"""
    Bacalhau API

    This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/bacalhau-project/bacalhau.  # noqa: E501

    OpenAPI spec version: ${PYPI_VERSION}
    Contact: team@bacalhau.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JobWithInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "history": "list[JobHistory]",
        "job": "AllOfJobWithInfoJob",
        "state": "AllOfJobWithInfoState",
    }

    attribute_map = {"history": "History", "job": "Job", "state": "State"}

    def __init__(self, history=None, job=None, state=None):  # noqa: E501
        """JobWithInfo - a model defined in Swagger"""  # noqa: E501
        self._history = None
        self._job = None
        self._state = None
        self.discriminator = None
        if history is not None:
            self.history = history
        if job is not None:
            self.job = job
        if state is not None:
            self.state = state

    @property
    def history(self):
        """Gets the history of this JobWithInfo.  # noqa: E501

        History of changes to the job state. Not always populated in the job description  # noqa: E501

        :return: The history of this JobWithInfo.  # noqa: E501
        :rtype: list[JobHistory]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this JobWithInfo.

        History of changes to the job state. Not always populated in the job description  # noqa: E501

        :param history: The history of this JobWithInfo.  # noqa: E501
        :type: list[JobHistory]
        """

        self._history = history

    @property
    def job(self):
        """Gets the job of this JobWithInfo.  # noqa: E501

        Job info  # noqa: E501

        :return: The job of this JobWithInfo.  # noqa: E501
        :rtype: AllOfJobWithInfoJob
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this JobWithInfo.

        Job info  # noqa: E501

        :param job: The job of this JobWithInfo.  # noqa: E501
        :type: AllOfJobWithInfoJob
        """

        self._job = job

    @property
    def state(self):
        """Gets the state of this JobWithInfo.  # noqa: E501

        The current state of the job  # noqa: E501

        :return: The state of this JobWithInfo.  # noqa: E501
        :rtype: AllOfJobWithInfoState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobWithInfo.

        The current state of the job  # noqa: E501

        :param state: The state of this JobWithInfo.  # noqa: E501
        :type: AllOfJobWithInfoState
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(JobWithInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobWithInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
