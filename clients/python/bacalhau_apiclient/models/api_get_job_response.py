# coding: utf-8

"""
    Bacalhau API

    This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/bacalhau-project/bacalhau.  # noqa: E501

    OpenAPI spec version: ${VERSION}
    Contact: team@bacalhau.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiGetJobResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'executions': 'ApiListJobExecutionsResponse',
        'history': 'ApiListJobHistoryResponse',
        'job': 'Job'
    }

    attribute_map = {
        'executions': 'Executions',
        'history': 'History',
        'job': 'Job'
    }

    def __init__(self, executions=None, history=None, job=None):  # noqa: E501
        """ApiGetJobResponse - a model defined in Swagger"""  # noqa: E501
        self._executions = None
        self._history = None
        self._job = None
        self.discriminator = None
        if executions is not None:
            self.executions = executions
        if history is not None:
            self.history = history
        if job is not None:
            self.job = job

    @property
    def executions(self):
        """Gets the executions of this ApiGetJobResponse.  # noqa: E501


        :return: The executions of this ApiGetJobResponse.  # noqa: E501
        :rtype: ApiListJobExecutionsResponse
        """
        return self._executions

    @executions.setter
    def executions(self, executions):
        """Sets the executions of this ApiGetJobResponse.


        :param executions: The executions of this ApiGetJobResponse.  # noqa: E501
        :type: ApiListJobExecutionsResponse
        """

        self._executions = executions

    @property
    def history(self):
        """Gets the history of this ApiGetJobResponse.  # noqa: E501


        :return: The history of this ApiGetJobResponse.  # noqa: E501
        :rtype: ApiListJobHistoryResponse
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this ApiGetJobResponse.


        :param history: The history of this ApiGetJobResponse.  # noqa: E501
        :type: ApiListJobHistoryResponse
        """

        self._history = history

    @property
    def job(self):
        """Gets the job of this ApiGetJobResponse.  # noqa: E501


        :return: The job of this ApiGetJobResponse.  # noqa: E501
        :rtype: Job
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this ApiGetJobResponse.


        :param job: The job of this ApiGetJobResponse.  # noqa: E501
        :type: Job
        """

        self._job = job

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiGetJobResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiGetJobResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
