# coding: utf-8

"""
    Bacalhau API

    This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/bacalhau-project/bacalhau.  # noqa: E501

    OpenAPI spec version: ${VERSION}
    Contact: team@bacalhau.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiPutJobRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job': 'Job',
        'credential': 'ApiHTTPCredential',
        'idempotency_token': 'str',
        'namespace': 'str'
    }

    attribute_map = {
        'job': 'Job',
        'credential': 'credential',
        'idempotency_token': 'idempotencyToken',
        'namespace': 'namespace'
    }

    def __init__(self, job=None, credential=None, idempotency_token=None, namespace=None):  # noqa: E501
        """ApiPutJobRequest - a model defined in Swagger"""  # noqa: E501
        self._job = None
        self._credential = None
        self._idempotency_token = None
        self._namespace = None
        self.discriminator = None
        if job is not None:
            self.job = job
        if credential is not None:
            self.credential = credential
        if idempotency_token is not None:
            self.idempotency_token = idempotency_token
        if namespace is not None:
            self.namespace = namespace

    @property
    def job(self):
        """Gets the job of this ApiPutJobRequest.  # noqa: E501


        :return: The job of this ApiPutJobRequest.  # noqa: E501
        :rtype: Job
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this ApiPutJobRequest.


        :param job: The job of this ApiPutJobRequest.  # noqa: E501
        :type: Job
        """

        self._job = job

    @property
    def credential(self):
        """Gets the credential of this ApiPutJobRequest.  # noqa: E501


        :return: The credential of this ApiPutJobRequest.  # noqa: E501
        :rtype: ApiHTTPCredential
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this ApiPutJobRequest.


        :param credential: The credential of this ApiPutJobRequest.  # noqa: E501
        :type: ApiHTTPCredential
        """

        self._credential = credential

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this ApiPutJobRequest.  # noqa: E501


        :return: The idempotency_token of this ApiPutJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this ApiPutJobRequest.


        :param idempotency_token: The idempotency_token of this ApiPutJobRequest.  # noqa: E501
        :type: str
        """

        self._idempotency_token = idempotency_token

    @property
    def namespace(self):
        """Gets the namespace of this ApiPutJobRequest.  # noqa: E501


        :return: The namespace of this ApiPutJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ApiPutJobRequest.


        :param namespace: The namespace of this ApiPutJobRequest.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiPutJobRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiPutJobRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
