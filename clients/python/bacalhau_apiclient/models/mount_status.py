# coding: utf-8

"""
    Bacalhau API

    This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/bacalhau-project/bacalhau.  # noqa: E501

    OpenAPI spec version: ${PYPI_VERSION}
    Contact: team@bacalhau.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MountStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"all": "int", "free": "int", "used": "int"}

    attribute_map = {"all": "All", "free": "Free", "used": "Used"}

    def __init__(self, all=None, free=None, used=None):  # noqa: E501
        """MountStatus - a model defined in Swagger"""  # noqa: E501
        self._all = None
        self._free = None
        self._used = None
        self.discriminator = None
        if all is not None:
            self.all = all
        if free is not None:
            self.free = free
        if used is not None:
            self.used = used

    @property
    def all(self):
        """Gets the all of this MountStatus.  # noqa: E501


        :return: The all of this MountStatus.  # noqa: E501
        :rtype: int
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this MountStatus.


        :param all: The all of this MountStatus.  # noqa: E501
        :type: int
        """

        self._all = all

    @property
    def free(self):
        """Gets the free of this MountStatus.  # noqa: E501


        :return: The free of this MountStatus.  # noqa: E501
        :rtype: int
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this MountStatus.


        :param free: The free of this MountStatus.  # noqa: E501
        :type: int
        """

        self._free = free

    @property
    def used(self):
        """Gets the used of this MountStatus.  # noqa: E501


        :return: The used of this MountStatus.  # noqa: E501
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this MountStatus.


        :param used: The used of this MountStatus.  # noqa: E501
        :type: int
        """

        self._used = used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(MountStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MountStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
