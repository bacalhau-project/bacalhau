/* 
 * Bacalhau API
 *
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using bacalhau-client.Client;
using bacalhau-client.Api;
using bacalhau-client.Model;

namespace bacalhau-client.Test
{
    /// <summary>
    ///  Class for testing HealthApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class HealthApiTests
    {
        private HealthApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new HealthApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of HealthApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' HealthApi
            //Assert.IsInstanceOfType(typeof(HealthApi), instance, "instance is a HealthApi");
        }

        /// <summary>
        /// Test ApiServerdebug
        /// </summary>
        [Test]
        public void ApiServerdebugTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiServerdebug();
            //Assert.IsInstanceOf<PublicapiDebugResponse> (response, "response is PublicapiDebugResponse");
        }
        /// <summary>
        /// Test ApiServerhealthz
        /// </summary>
        [Test]
        public void ApiServerhealthzTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiServerhealthz();
            //Assert.IsInstanceOf<TypesHealthInfo> (response, "response is TypesHealthInfo");
        }
        /// <summary>
        /// Test ApiServerlivez
        /// </summary>
        [Test]
        public void ApiServerlivezTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiServerlivez();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test ApiServerlogz
        /// </summary>
        [Test]
        public void ApiServerlogzTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiServerlogz();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test ApiServerreadyz
        /// </summary>
        [Test]
        public void ApiServerreadyzTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiServerreadyz();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        /// <summary>
        /// Test ApiServervarz
        /// </summary>
        [Test]
        public void ApiServervarzTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiServervarz();
            //Assert.IsInstanceOf<List<int?>> (response, "response is List<int?>");
        }
    }

}
