/* 
 * Bacalhau API
 *
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = bacalhau-client.Client.SwaggerDateConverter;

namespace bacalhau-client.Model
{
    /// <summary>
    /// ModelJobSpecLanguage
    /// </summary>
    [DataContract]
        public partial class ModelJobSpecLanguage :  IEquatable<ModelJobSpecLanguage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelJobSpecLanguage" /> class.
        /// </summary>
        /// <param name="command">optional program specified on commandline, like python -c \&quot;print(1+1)\&quot;.</param>
        /// <param name="deterministicExecution">must this job be run in a deterministic context?.</param>
        /// <param name="jobContext">jobContext.</param>
        /// <param name="language">e.g. python.</param>
        /// <param name="languageVersion">e.g. 3.8.</param>
        /// <param name="programPath">optional program path relative to the context dir. one of Command or ProgramPath must be specified.</param>
        /// <param name="requirementsPath">optional requirements.txt (or equivalent) path relative to the context dir.</param>
        public ModelJobSpecLanguage(string command = default(string), bool? deterministicExecution = default(bool?), ModelStorageSpec jobContext = default(ModelStorageSpec), string language = default(string), string languageVersion = default(string), string programPath = default(string), string requirementsPath = default(string))
        {
            this.Command = command;
            this.DeterministicExecution = deterministicExecution;
            this.JobContext = jobContext;
            this.Language = language;
            this.LanguageVersion = languageVersion;
            this.ProgramPath = programPath;
            this.RequirementsPath = requirementsPath;
        }
        
        /// <summary>
        /// optional program specified on commandline, like python -c \&quot;print(1+1)\&quot;
        /// </summary>
        /// <value>optional program specified on commandline, like python -c \&quot;print(1+1)\&quot;</value>
        [DataMember(Name="Command", EmitDefaultValue=false)]
        public string Command { get; set; }

        /// <summary>
        /// must this job be run in a deterministic context?
        /// </summary>
        /// <value>must this job be run in a deterministic context?</value>
        [DataMember(Name="DeterministicExecution", EmitDefaultValue=false)]
        public bool? DeterministicExecution { get; set; }

        /// <summary>
        /// Gets or Sets JobContext
        /// </summary>
        [DataMember(Name="JobContext", EmitDefaultValue=false)]
        public ModelStorageSpec JobContext { get; set; }

        /// <summary>
        /// e.g. python
        /// </summary>
        /// <value>e.g. python</value>
        [DataMember(Name="Language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// e.g. 3.8
        /// </summary>
        /// <value>e.g. 3.8</value>
        [DataMember(Name="LanguageVersion", EmitDefaultValue=false)]
        public string LanguageVersion { get; set; }

        /// <summary>
        /// optional program path relative to the context dir. one of Command or ProgramPath must be specified
        /// </summary>
        /// <value>optional program path relative to the context dir. one of Command or ProgramPath must be specified</value>
        [DataMember(Name="ProgramPath", EmitDefaultValue=false)]
        public string ProgramPath { get; set; }

        /// <summary>
        /// optional requirements.txt (or equivalent) path relative to the context dir
        /// </summary>
        /// <value>optional requirements.txt (or equivalent) path relative to the context dir</value>
        [DataMember(Name="RequirementsPath", EmitDefaultValue=false)]
        public string RequirementsPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelJobSpecLanguage {\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  DeterministicExecution: ").Append(DeterministicExecution).Append("\n");
            sb.Append("  JobContext: ").Append(JobContext).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LanguageVersion: ").Append(LanguageVersion).Append("\n");
            sb.Append("  ProgramPath: ").Append(ProgramPath).Append("\n");
            sb.Append("  RequirementsPath: ").Append(RequirementsPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelJobSpecLanguage);
        }

        /// <summary>
        /// Returns true if ModelJobSpecLanguage instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelJobSpecLanguage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelJobSpecLanguage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Command == input.Command ||
                    (this.Command != null &&
                    this.Command.Equals(input.Command))
                ) && 
                (
                    this.DeterministicExecution == input.DeterministicExecution ||
                    (this.DeterministicExecution != null &&
                    this.DeterministicExecution.Equals(input.DeterministicExecution))
                ) && 
                (
                    this.JobContext == input.JobContext ||
                    (this.JobContext != null &&
                    this.JobContext.Equals(input.JobContext))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.LanguageVersion == input.LanguageVersion ||
                    (this.LanguageVersion != null &&
                    this.LanguageVersion.Equals(input.LanguageVersion))
                ) && 
                (
                    this.ProgramPath == input.ProgramPath ||
                    (this.ProgramPath != null &&
                    this.ProgramPath.Equals(input.ProgramPath))
                ) && 
                (
                    this.RequirementsPath == input.RequirementsPath ||
                    (this.RequirementsPath != null &&
                    this.RequirementsPath.Equals(input.RequirementsPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Command != null)
                    hashCode = hashCode * 59 + this.Command.GetHashCode();
                if (this.DeterministicExecution != null)
                    hashCode = hashCode * 59 + this.DeterministicExecution.GetHashCode();
                if (this.JobContext != null)
                    hashCode = hashCode * 59 + this.JobContext.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.LanguageVersion != null)
                    hashCode = hashCode * 59 + this.LanguageVersion.GetHashCode();
                if (this.ProgramPath != null)
                    hashCode = hashCode * 59 + this.ProgramPath.GetHashCode();
                if (this.RequirementsPath != null)
                    hashCode = hashCode * 59 + this.RequirementsPath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
