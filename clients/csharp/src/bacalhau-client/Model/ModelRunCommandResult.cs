/* 
 * Bacalhau API
 *
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = bacalhau-client.Client.SwaggerDateConverter;

namespace bacalhau-client.Model
{
    /// <summary>
    /// ModelRunCommandResult
    /// </summary>
    [DataContract]
        public partial class ModelRunCommandResult :  IEquatable<ModelRunCommandResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelRunCommandResult" /> class.
        /// </summary>
        /// <param name="exitCode">exit code of the run..</param>
        /// <param name="runnerError">Runner error.</param>
        /// <param name="stderr">stderr of the run..</param>
        /// <param name="stderrtruncated">bool describing if stderr was truncated.</param>
        /// <param name="stdout">stdout of the run. Yaml provided for &#x60;describe&#x60; output.</param>
        /// <param name="stdouttruncated">bool describing if stdout was truncated.</param>
        public ModelRunCommandResult(int? exitCode = default(int?), string runnerError = default(string), string stderr = default(string), bool? stderrtruncated = default(bool?), string stdout = default(string), bool? stdouttruncated = default(bool?))
        {
            this.ExitCode = exitCode;
            this.RunnerError = runnerError;
            this.Stderr = stderr;
            this.Stderrtruncated = stderrtruncated;
            this.Stdout = stdout;
            this.Stdouttruncated = stdouttruncated;
        }
        
        /// <summary>
        /// exit code of the run.
        /// </summary>
        /// <value>exit code of the run.</value>
        [DataMember(Name="exitCode", EmitDefaultValue=false)]
        public int? ExitCode { get; set; }

        /// <summary>
        /// Runner error
        /// </summary>
        /// <value>Runner error</value>
        [DataMember(Name="runnerError", EmitDefaultValue=false)]
        public string RunnerError { get; set; }

        /// <summary>
        /// stderr of the run.
        /// </summary>
        /// <value>stderr of the run.</value>
        [DataMember(Name="stderr", EmitDefaultValue=false)]
        public string Stderr { get; set; }

        /// <summary>
        /// bool describing if stderr was truncated
        /// </summary>
        /// <value>bool describing if stderr was truncated</value>
        [DataMember(Name="stderrtruncated", EmitDefaultValue=false)]
        public bool? Stderrtruncated { get; set; }

        /// <summary>
        /// stdout of the run. Yaml provided for &#x60;describe&#x60; output
        /// </summary>
        /// <value>stdout of the run. Yaml provided for &#x60;describe&#x60; output</value>
        [DataMember(Name="stdout", EmitDefaultValue=false)]
        public string Stdout { get; set; }

        /// <summary>
        /// bool describing if stdout was truncated
        /// </summary>
        /// <value>bool describing if stdout was truncated</value>
        [DataMember(Name="stdouttruncated", EmitDefaultValue=false)]
        public bool? Stdouttruncated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelRunCommandResult {\n");
            sb.Append("  ExitCode: ").Append(ExitCode).Append("\n");
            sb.Append("  RunnerError: ").Append(RunnerError).Append("\n");
            sb.Append("  Stderr: ").Append(Stderr).Append("\n");
            sb.Append("  Stderrtruncated: ").Append(Stderrtruncated).Append("\n");
            sb.Append("  Stdout: ").Append(Stdout).Append("\n");
            sb.Append("  Stdouttruncated: ").Append(Stdouttruncated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelRunCommandResult);
        }

        /// <summary>
        /// Returns true if ModelRunCommandResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelRunCommandResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelRunCommandResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExitCode == input.ExitCode ||
                    (this.ExitCode != null &&
                    this.ExitCode.Equals(input.ExitCode))
                ) && 
                (
                    this.RunnerError == input.RunnerError ||
                    (this.RunnerError != null &&
                    this.RunnerError.Equals(input.RunnerError))
                ) && 
                (
                    this.Stderr == input.Stderr ||
                    (this.Stderr != null &&
                    this.Stderr.Equals(input.Stderr))
                ) && 
                (
                    this.Stderrtruncated == input.Stderrtruncated ||
                    (this.Stderrtruncated != null &&
                    this.Stderrtruncated.Equals(input.Stderrtruncated))
                ) && 
                (
                    this.Stdout == input.Stdout ||
                    (this.Stdout != null &&
                    this.Stdout.Equals(input.Stdout))
                ) && 
                (
                    this.Stdouttruncated == input.Stdouttruncated ||
                    (this.Stdouttruncated != null &&
                    this.Stdouttruncated.Equals(input.Stdouttruncated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExitCode != null)
                    hashCode = hashCode * 59 + this.ExitCode.GetHashCode();
                if (this.RunnerError != null)
                    hashCode = hashCode * 59 + this.RunnerError.GetHashCode();
                if (this.Stderr != null)
                    hashCode = hashCode * 59 + this.Stderr.GetHashCode();
                if (this.Stderrtruncated != null)
                    hashCode = hashCode * 59 + this.Stderrtruncated.GetHashCode();
                if (this.Stdout != null)
                    hashCode = hashCode * 59 + this.Stdout.GetHashCode();
                if (this.Stdouttruncated != null)
                    hashCode = hashCode * 59 + this.Stdouttruncated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
