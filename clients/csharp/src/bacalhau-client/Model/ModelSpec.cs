/* 
 * Bacalhau API
 *
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = bacalhau-client.Client.SwaggerDateConverter;

namespace bacalhau-client.Model
{
    /// <summary>
    /// ModelSpec
    /// </summary>
    [DataContract]
        public partial class ModelSpec :  IEquatable<ModelSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelSpec" /> class.
        /// </summary>
        /// <param name="annotations">Annotations on the job - could be user or machine assigned.</param>
        /// <param name="contexts">Input volumes that will not be sharded for example to upload code into a base image every shard will get the full range of context volumes.</param>
        /// <param name="doNotTrack">Do not track specified by the client.</param>
        /// <param name="docker">docker.</param>
        /// <param name="engine">e.g. docker or language.</param>
        /// <param name="language">language.</param>
        /// <param name="publisher">there can be multiple publishers for the job.</param>
        /// <param name="resources">resources.</param>
        /// <param name="sharding">sharding.</param>
        /// <param name="timeout">How long a job can run in seconds before it is killed. This includes the time required to run, verify and publish results.</param>
        /// <param name="verifier">verifier.</param>
        /// <param name="wasm">wasm.</param>
        /// <param name="inputs">the data volumes we will read in the job for example \&quot;read this ipfs cid\&quot; TODO: #667 Replace with \&quot;Inputs\&quot;, \&quot;Outputs\&quot; (note the caps) for yaml/json when we update the n.js file.</param>
        /// <param name="outputs">the data volumes we will write in the job for example \&quot;write the results to ipfs\&quot;.</param>
        public ModelSpec(List<string> annotations = default(List<string>), List<ModelStorageSpec> contexts = default(List<ModelStorageSpec>), bool? doNotTrack = default(bool?), ModelJobSpecDocker docker = default(ModelJobSpecDocker), int? engine = default(int?), ModelJobSpecLanguage language = default(ModelJobSpecLanguage), int? publisher = default(int?), ModelResourceUsageConfig resources = default(ModelResourceUsageConfig), ModelJobShardingConfig sharding = default(ModelJobShardingConfig), decimal? timeout = default(decimal?), int? verifier = default(int?), ModelJobSpecWasm wasm = default(ModelJobSpecWasm), List<ModelStorageSpec> inputs = default(List<ModelStorageSpec>), List<ModelStorageSpec> outputs = default(List<ModelStorageSpec>))
        {
            this.Annotations = annotations;
            this.Contexts = contexts;
            this.DoNotTrack = doNotTrack;
            this.Docker = docker;
            this.Engine = engine;
            this.Language = language;
            this.Publisher = publisher;
            this.Resources = resources;
            this.Sharding = sharding;
            this.Timeout = timeout;
            this.Verifier = verifier;
            this.Wasm = wasm;
            this.Inputs = inputs;
            this.Outputs = outputs;
        }
        
        /// <summary>
        /// Annotations on the job - could be user or machine assigned
        /// </summary>
        /// <value>Annotations on the job - could be user or machine assigned</value>
        [DataMember(Name="Annotations", EmitDefaultValue=false)]
        public List<string> Annotations { get; set; }

        /// <summary>
        /// Input volumes that will not be sharded for example to upload code into a base image every shard will get the full range of context volumes
        /// </summary>
        /// <value>Input volumes that will not be sharded for example to upload code into a base image every shard will get the full range of context volumes</value>
        [DataMember(Name="Contexts", EmitDefaultValue=false)]
        public List<ModelStorageSpec> Contexts { get; set; }

        /// <summary>
        /// Do not track specified by the client
        /// </summary>
        /// <value>Do not track specified by the client</value>
        [DataMember(Name="DoNotTrack", EmitDefaultValue=false)]
        public bool? DoNotTrack { get; set; }

        /// <summary>
        /// Gets or Sets Docker
        /// </summary>
        [DataMember(Name="Docker", EmitDefaultValue=false)]
        public ModelJobSpecDocker Docker { get; set; }

        /// <summary>
        /// e.g. docker or language
        /// </summary>
        /// <value>e.g. docker or language</value>
        [DataMember(Name="Engine", EmitDefaultValue=false)]
        public int? Engine { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="Language", EmitDefaultValue=false)]
        public ModelJobSpecLanguage Language { get; set; }

        /// <summary>
        /// there can be multiple publishers for the job
        /// </summary>
        /// <value>there can be multiple publishers for the job</value>
        [DataMember(Name="Publisher", EmitDefaultValue=false)]
        public int? Publisher { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name="Resources", EmitDefaultValue=false)]
        public ModelResourceUsageConfig Resources { get; set; }

        /// <summary>
        /// Gets or Sets Sharding
        /// </summary>
        [DataMember(Name="Sharding", EmitDefaultValue=false)]
        public ModelJobShardingConfig Sharding { get; set; }

        /// <summary>
        /// How long a job can run in seconds before it is killed. This includes the time required to run, verify and publish results
        /// </summary>
        /// <value>How long a job can run in seconds before it is killed. This includes the time required to run, verify and publish results</value>
        [DataMember(Name="Timeout", EmitDefaultValue=false)]
        public decimal? Timeout { get; set; }

        /// <summary>
        /// Gets or Sets Verifier
        /// </summary>
        [DataMember(Name="Verifier", EmitDefaultValue=false)]
        public int? Verifier { get; set; }

        /// <summary>
        /// Gets or Sets Wasm
        /// </summary>
        [DataMember(Name="Wasm", EmitDefaultValue=false)]
        public ModelJobSpecWasm Wasm { get; set; }

        /// <summary>
        /// the data volumes we will read in the job for example \&quot;read this ipfs cid\&quot; TODO: #667 Replace with \&quot;Inputs\&quot;, \&quot;Outputs\&quot; (note the caps) for yaml/json when we update the n.js file
        /// </summary>
        /// <value>the data volumes we will read in the job for example \&quot;read this ipfs cid\&quot; TODO: #667 Replace with \&quot;Inputs\&quot;, \&quot;Outputs\&quot; (note the caps) for yaml/json when we update the n.js file</value>
        [DataMember(Name="inputs", EmitDefaultValue=false)]
        public List<ModelStorageSpec> Inputs { get; set; }

        /// <summary>
        /// the data volumes we will write in the job for example \&quot;write the results to ipfs\&quot;
        /// </summary>
        /// <value>the data volumes we will write in the job for example \&quot;write the results to ipfs\&quot;</value>
        [DataMember(Name="outputs", EmitDefaultValue=false)]
        public List<ModelStorageSpec> Outputs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelSpec {\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  Contexts: ").Append(Contexts).Append("\n");
            sb.Append("  DoNotTrack: ").Append(DoNotTrack).Append("\n");
            sb.Append("  Docker: ").Append(Docker).Append("\n");
            sb.Append("  Engine: ").Append(Engine).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Publisher: ").Append(Publisher).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Sharding: ").Append(Sharding).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Verifier: ").Append(Verifier).Append("\n");
            sb.Append("  Wasm: ").Append(Wasm).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelSpec);
        }

        /// <summary>
        /// Returns true if ModelSpec instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelSpec input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Annotations == input.Annotations ||
                    this.Annotations != null &&
                    input.Annotations != null &&
                    this.Annotations.SequenceEqual(input.Annotations)
                ) && 
                (
                    this.Contexts == input.Contexts ||
                    this.Contexts != null &&
                    input.Contexts != null &&
                    this.Contexts.SequenceEqual(input.Contexts)
                ) && 
                (
                    this.DoNotTrack == input.DoNotTrack ||
                    (this.DoNotTrack != null &&
                    this.DoNotTrack.Equals(input.DoNotTrack))
                ) && 
                (
                    this.Docker == input.Docker ||
                    (this.Docker != null &&
                    this.Docker.Equals(input.Docker))
                ) && 
                (
                    this.Engine == input.Engine ||
                    (this.Engine != null &&
                    this.Engine.Equals(input.Engine))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Publisher == input.Publisher ||
                    (this.Publisher != null &&
                    this.Publisher.Equals(input.Publisher))
                ) && 
                (
                    this.Resources == input.Resources ||
                    (this.Resources != null &&
                    this.Resources.Equals(input.Resources))
                ) && 
                (
                    this.Sharding == input.Sharding ||
                    (this.Sharding != null &&
                    this.Sharding.Equals(input.Sharding))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                ) && 
                (
                    this.Verifier == input.Verifier ||
                    (this.Verifier != null &&
                    this.Verifier.Equals(input.Verifier))
                ) && 
                (
                    this.Wasm == input.Wasm ||
                    (this.Wasm != null &&
                    this.Wasm.Equals(input.Wasm))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.Outputs == input.Outputs ||
                    this.Outputs != null &&
                    input.Outputs != null &&
                    this.Outputs.SequenceEqual(input.Outputs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Annotations != null)
                    hashCode = hashCode * 59 + this.Annotations.GetHashCode();
                if (this.Contexts != null)
                    hashCode = hashCode * 59 + this.Contexts.GetHashCode();
                if (this.DoNotTrack != null)
                    hashCode = hashCode * 59 + this.DoNotTrack.GetHashCode();
                if (this.Docker != null)
                    hashCode = hashCode * 59 + this.Docker.GetHashCode();
                if (this.Engine != null)
                    hashCode = hashCode * 59 + this.Engine.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Publisher != null)
                    hashCode = hashCode * 59 + this.Publisher.GetHashCode();
                if (this.Resources != null)
                    hashCode = hashCode * 59 + this.Resources.GetHashCode();
                if (this.Sharding != null)
                    hashCode = hashCode * 59 + this.Sharding.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                if (this.Verifier != null)
                    hashCode = hashCode * 59 + this.Verifier.GetHashCode();
                if (this.Wasm != null)
                    hashCode = hashCode * 59 + this.Wasm.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.Outputs != null)
                    hashCode = hashCode * 59 + this.Outputs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
