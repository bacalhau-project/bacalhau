/* 
 * Bacalhau API
 *
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = bacalhau-client.Client.SwaggerDateConverter;

namespace bacalhau-client.Model
{
    /// <summary>
    /// ModelJobSpecDocker
    /// </summary>
    [DataContract]
        public partial class ModelJobSpecDocker :  IEquatable<ModelJobSpecDocker>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelJobSpecDocker" /> class.
        /// </summary>
        /// <param name="entrypoint">optionally override the default entrypoint.</param>
        /// <param name="environmentVariables">a map of env to run the container with.</param>
        /// <param name="image">this should be pullable by docker.</param>
        /// <param name="workingDirectory">working directory inside the container.</param>
        public ModelJobSpecDocker(List<string> entrypoint = default(List<string>), List<string> environmentVariables = default(List<string>), string image = default(string), string workingDirectory = default(string))
        {
            this.Entrypoint = entrypoint;
            this.EnvironmentVariables = environmentVariables;
            this.Image = image;
            this.WorkingDirectory = workingDirectory;
        }
        
        /// <summary>
        /// optionally override the default entrypoint
        /// </summary>
        /// <value>optionally override the default entrypoint</value>
        [DataMember(Name="Entrypoint", EmitDefaultValue=false)]
        public List<string> Entrypoint { get; set; }

        /// <summary>
        /// a map of env to run the container with
        /// </summary>
        /// <value>a map of env to run the container with</value>
        [DataMember(Name="EnvironmentVariables", EmitDefaultValue=false)]
        public List<string> EnvironmentVariables { get; set; }

        /// <summary>
        /// this should be pullable by docker
        /// </summary>
        /// <value>this should be pullable by docker</value>
        [DataMember(Name="Image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// working directory inside the container
        /// </summary>
        /// <value>working directory inside the container</value>
        [DataMember(Name="WorkingDirectory", EmitDefaultValue=false)]
        public string WorkingDirectory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelJobSpecDocker {\n");
            sb.Append("  Entrypoint: ").Append(Entrypoint).Append("\n");
            sb.Append("  EnvironmentVariables: ").Append(EnvironmentVariables).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  WorkingDirectory: ").Append(WorkingDirectory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelJobSpecDocker);
        }

        /// <summary>
        /// Returns true if ModelJobSpecDocker instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelJobSpecDocker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelJobSpecDocker input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Entrypoint == input.Entrypoint ||
                    this.Entrypoint != null &&
                    input.Entrypoint != null &&
                    this.Entrypoint.SequenceEqual(input.Entrypoint)
                ) && 
                (
                    this.EnvironmentVariables == input.EnvironmentVariables ||
                    this.EnvironmentVariables != null &&
                    input.EnvironmentVariables != null &&
                    this.EnvironmentVariables.SequenceEqual(input.EnvironmentVariables)
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.WorkingDirectory == input.WorkingDirectory ||
                    (this.WorkingDirectory != null &&
                    this.WorkingDirectory.Equals(input.WorkingDirectory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Entrypoint != null)
                    hashCode = hashCode * 59 + this.Entrypoint.GetHashCode();
                if (this.EnvironmentVariables != null)
                    hashCode = hashCode * 59 + this.EnvironmentVariables.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.WorkingDirectory != null)
                    hashCode = hashCode * 59 + this.WorkingDirectory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
