/* 
 * Bacalhau API
 *
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = bacalhau-client.Client.SwaggerDateConverter;

namespace bacalhau-client.Model
{
    /// <summary>
    /// ModelJob
    /// </summary>
    [DataContract]
        public partial class ModelJob :  IEquatable<ModelJob>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelJob" /> class.
        /// </summary>
        /// <param name="aPIVersion">aPIVersion.</param>
        /// <param name="clientID">The ID of the client that created this job..</param>
        /// <param name="createdAt">Time the job was submitted to the bacalhau network..</param>
        /// <param name="deal">deal.</param>
        /// <param name="executionPlan">executionPlan.</param>
        /// <param name="iD">The unique global ID of this job in the bacalhau network..</param>
        /// <param name="jobEvents">All events associated with the job.</param>
        /// <param name="jobState">jobState.</param>
        /// <param name="localJobEvents">All local events associated with the job.</param>
        /// <param name="requesterNodeID">The ID of the requester node that owns this job..</param>
        /// <param name="requesterPublicKey">The public key of the Requester node that created this job This can be used to encrypt messages back to the creator.</param>
        /// <param name="spec">spec.</param>
        public ModelJob(string aPIVersion = default(string), string clientID = default(string), string createdAt = default(string), ModelDeal deal = default(ModelDeal), ModelJobExecutionPlan executionPlan = default(ModelJobExecutionPlan), string iD = default(string), List<ModelJobEvent> jobEvents = default(List<ModelJobEvent>), ModelJobState jobState = default(ModelJobState), List<ModelJobLocalEvent> localJobEvents = default(List<ModelJobLocalEvent>), string requesterNodeID = default(string), List<int?> requesterPublicKey = default(List<int?>), ModelSpec spec = default(ModelSpec))
        {
            this.APIVersion = aPIVersion;
            this.ClientID = clientID;
            this.CreatedAt = createdAt;
            this.Deal = deal;
            this.ExecutionPlan = executionPlan;
            this.ID = iD;
            this.JobEvents = jobEvents;
            this.JobState = jobState;
            this.LocalJobEvents = localJobEvents;
            this.RequesterNodeID = requesterNodeID;
            this.RequesterPublicKey = requesterPublicKey;
            this.Spec = spec;
        }
        
        /// <summary>
        /// Gets or Sets APIVersion
        /// </summary>
        [DataMember(Name="APIVersion", EmitDefaultValue=false)]
        public string APIVersion { get; set; }

        /// <summary>
        /// The ID of the client that created this job.
        /// </summary>
        /// <value>The ID of the client that created this job.</value>
        [DataMember(Name="ClientID", EmitDefaultValue=false)]
        public string ClientID { get; set; }

        /// <summary>
        /// Time the job was submitted to the bacalhau network.
        /// </summary>
        /// <value>Time the job was submitted to the bacalhau network.</value>
        [DataMember(Name="CreatedAt", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Deal
        /// </summary>
        [DataMember(Name="Deal", EmitDefaultValue=false)]
        public ModelDeal Deal { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionPlan
        /// </summary>
        [DataMember(Name="ExecutionPlan", EmitDefaultValue=false)]
        public ModelJobExecutionPlan ExecutionPlan { get; set; }

        /// <summary>
        /// The unique global ID of this job in the bacalhau network.
        /// </summary>
        /// <value>The unique global ID of this job in the bacalhau network.</value>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }

        /// <summary>
        /// All events associated with the job
        /// </summary>
        /// <value>All events associated with the job</value>
        [DataMember(Name="JobEvents", EmitDefaultValue=false)]
        public List<ModelJobEvent> JobEvents { get; set; }

        /// <summary>
        /// Gets or Sets JobState
        /// </summary>
        [DataMember(Name="JobState", EmitDefaultValue=false)]
        public ModelJobState JobState { get; set; }

        /// <summary>
        /// All local events associated with the job
        /// </summary>
        /// <value>All local events associated with the job</value>
        [DataMember(Name="LocalJobEvents", EmitDefaultValue=false)]
        public List<ModelJobLocalEvent> LocalJobEvents { get; set; }

        /// <summary>
        /// The ID of the requester node that owns this job.
        /// </summary>
        /// <value>The ID of the requester node that owns this job.</value>
        [DataMember(Name="RequesterNodeID", EmitDefaultValue=false)]
        public string RequesterNodeID { get; set; }

        /// <summary>
        /// The public key of the Requester node that created this job This can be used to encrypt messages back to the creator
        /// </summary>
        /// <value>The public key of the Requester node that created this job This can be used to encrypt messages back to the creator</value>
        [DataMember(Name="RequesterPublicKey", EmitDefaultValue=false)]
        public List<int?> RequesterPublicKey { get; set; }

        /// <summary>
        /// Gets or Sets Spec
        /// </summary>
        [DataMember(Name="Spec", EmitDefaultValue=false)]
        public ModelSpec Spec { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelJob {\n");
            sb.Append("  APIVersion: ").Append(APIVersion).Append("\n");
            sb.Append("  ClientID: ").Append(ClientID).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Deal: ").Append(Deal).Append("\n");
            sb.Append("  ExecutionPlan: ").Append(ExecutionPlan).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  JobEvents: ").Append(JobEvents).Append("\n");
            sb.Append("  JobState: ").Append(JobState).Append("\n");
            sb.Append("  LocalJobEvents: ").Append(LocalJobEvents).Append("\n");
            sb.Append("  RequesterNodeID: ").Append(RequesterNodeID).Append("\n");
            sb.Append("  RequesterPublicKey: ").Append(RequesterPublicKey).Append("\n");
            sb.Append("  Spec: ").Append(Spec).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelJob);
        }

        /// <summary>
        /// Returns true if ModelJob instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.APIVersion == input.APIVersion ||
                    (this.APIVersion != null &&
                    this.APIVersion.Equals(input.APIVersion))
                ) && 
                (
                    this.ClientID == input.ClientID ||
                    (this.ClientID != null &&
                    this.ClientID.Equals(input.ClientID))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Deal == input.Deal ||
                    (this.Deal != null &&
                    this.Deal.Equals(input.Deal))
                ) && 
                (
                    this.ExecutionPlan == input.ExecutionPlan ||
                    (this.ExecutionPlan != null &&
                    this.ExecutionPlan.Equals(input.ExecutionPlan))
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.JobEvents == input.JobEvents ||
                    this.JobEvents != null &&
                    input.JobEvents != null &&
                    this.JobEvents.SequenceEqual(input.JobEvents)
                ) && 
                (
                    this.JobState == input.JobState ||
                    (this.JobState != null &&
                    this.JobState.Equals(input.JobState))
                ) && 
                (
                    this.LocalJobEvents == input.LocalJobEvents ||
                    this.LocalJobEvents != null &&
                    input.LocalJobEvents != null &&
                    this.LocalJobEvents.SequenceEqual(input.LocalJobEvents)
                ) && 
                (
                    this.RequesterNodeID == input.RequesterNodeID ||
                    (this.RequesterNodeID != null &&
                    this.RequesterNodeID.Equals(input.RequesterNodeID))
                ) && 
                (
                    this.RequesterPublicKey == input.RequesterPublicKey ||
                    this.RequesterPublicKey != null &&
                    input.RequesterPublicKey != null &&
                    this.RequesterPublicKey.SequenceEqual(input.RequesterPublicKey)
                ) && 
                (
                    this.Spec == input.Spec ||
                    (this.Spec != null &&
                    this.Spec.Equals(input.Spec))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.APIVersion != null)
                    hashCode = hashCode * 59 + this.APIVersion.GetHashCode();
                if (this.ClientID != null)
                    hashCode = hashCode * 59 + this.ClientID.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Deal != null)
                    hashCode = hashCode * 59 + this.Deal.GetHashCode();
                if (this.ExecutionPlan != null)
                    hashCode = hashCode * 59 + this.ExecutionPlan.GetHashCode();
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.JobEvents != null)
                    hashCode = hashCode * 59 + this.JobEvents.GetHashCode();
                if (this.JobState != null)
                    hashCode = hashCode * 59 + this.JobState.GetHashCode();
                if (this.LocalJobEvents != null)
                    hashCode = hashCode * 59 + this.LocalJobEvents.GetHashCode();
                if (this.RequesterNodeID != null)
                    hashCode = hashCode * 59 + this.RequesterNodeID.GetHashCode();
                if (this.RequesterPublicKey != null)
                    hashCode = hashCode * 59 + this.RequesterPublicKey.GetHashCode();
                if (this.Spec != null)
                    hashCode = hashCode * 59 + this.Spec.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
