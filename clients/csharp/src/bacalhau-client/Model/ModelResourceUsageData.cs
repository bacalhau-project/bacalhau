/* 
 * Bacalhau API
 *
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = bacalhau-client.Client.SwaggerDateConverter;

namespace bacalhau-client.Model
{
    /// <summary>
    /// ModelResourceUsageData
    /// </summary>
    [DataContract]
        public partial class ModelResourceUsageData :  IEquatable<ModelResourceUsageData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelResourceUsageData" /> class.
        /// </summary>
        /// <param name="cPU">cpu units.</param>
        /// <param name="disk">bytes.</param>
        /// <param name="gPU">gPU.</param>
        /// <param name="memory">bytes.</param>
        public ModelResourceUsageData(decimal? cPU = default(decimal?), int? disk = default(int?), int? gPU = default(int?), int? memory = default(int?))
        {
            this.CPU = cPU;
            this.Disk = disk;
            this.GPU = gPU;
            this.Memory = memory;
        }
        
        /// <summary>
        /// cpu units
        /// </summary>
        /// <value>cpu units</value>
        [DataMember(Name="CPU", EmitDefaultValue=false)]
        public decimal? CPU { get; set; }

        /// <summary>
        /// bytes
        /// </summary>
        /// <value>bytes</value>
        [DataMember(Name="Disk", EmitDefaultValue=false)]
        public int? Disk { get; set; }

        /// <summary>
        /// Gets or Sets GPU
        /// </summary>
        [DataMember(Name="GPU", EmitDefaultValue=false)]
        public int? GPU { get; set; }

        /// <summary>
        /// bytes
        /// </summary>
        /// <value>bytes</value>
        [DataMember(Name="Memory", EmitDefaultValue=false)]
        public int? Memory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelResourceUsageData {\n");
            sb.Append("  CPU: ").Append(CPU).Append("\n");
            sb.Append("  Disk: ").Append(Disk).Append("\n");
            sb.Append("  GPU: ").Append(GPU).Append("\n");
            sb.Append("  Memory: ").Append(Memory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelResourceUsageData);
        }

        /// <summary>
        /// Returns true if ModelResourceUsageData instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelResourceUsageData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelResourceUsageData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CPU == input.CPU ||
                    (this.CPU != null &&
                    this.CPU.Equals(input.CPU))
                ) && 
                (
                    this.Disk == input.Disk ||
                    (this.Disk != null &&
                    this.Disk.Equals(input.Disk))
                ) && 
                (
                    this.GPU == input.GPU ||
                    (this.GPU != null &&
                    this.GPU.Equals(input.GPU))
                ) && 
                (
                    this.Memory == input.Memory ||
                    (this.Memory != null &&
                    this.Memory.Equals(input.Memory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CPU != null)
                    hashCode = hashCode * 59 + this.CPU.GetHashCode();
                if (this.Disk != null)
                    hashCode = hashCode * 59 + this.Disk.GetHashCode();
                if (this.GPU != null)
                    hashCode = hashCode * 59 + this.GPU.GetHashCode();
                if (this.Memory != null)
                    hashCode = hashCode * 59 + this.Memory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
