/* 
 * Bacalhau API
 *
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = bacalhau-client.Client.SwaggerDateConverter;

namespace bacalhau-client.Model
{
    /// <summary>
    /// TypesFreeSpace
    /// </summary>
    [DataContract]
        public partial class TypesFreeSpace :  IEquatable<TypesFreeSpace>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TypesFreeSpace" /> class.
        /// </summary>
        /// <param name="iPFSMount">iPFSMount.</param>
        /// <param name="root">root.</param>
        /// <param name="tmp">tmp.</param>
        public TypesFreeSpace(TypesMountStatus iPFSMount = default(TypesMountStatus), TypesMountStatus root = default(TypesMountStatus), TypesMountStatus tmp = default(TypesMountStatus))
        {
            this.IPFSMount = iPFSMount;
            this.Root = root;
            this.Tmp = tmp;
        }
        
        /// <summary>
        /// Gets or Sets IPFSMount
        /// </summary>
        [DataMember(Name="IPFSMount", EmitDefaultValue=false)]
        public TypesMountStatus IPFSMount { get; set; }

        /// <summary>
        /// Gets or Sets Root
        /// </summary>
        [DataMember(Name="root", EmitDefaultValue=false)]
        public TypesMountStatus Root { get; set; }

        /// <summary>
        /// Gets or Sets Tmp
        /// </summary>
        [DataMember(Name="tmp", EmitDefaultValue=false)]
        public TypesMountStatus Tmp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TypesFreeSpace {\n");
            sb.Append("  IPFSMount: ").Append(IPFSMount).Append("\n");
            sb.Append("  Root: ").Append(Root).Append("\n");
            sb.Append("  Tmp: ").Append(Tmp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TypesFreeSpace);
        }

        /// <summary>
        /// Returns true if TypesFreeSpace instances are equal
        /// </summary>
        /// <param name="input">Instance of TypesFreeSpace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TypesFreeSpace input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IPFSMount == input.IPFSMount ||
                    (this.IPFSMount != null &&
                    this.IPFSMount.Equals(input.IPFSMount))
                ) && 
                (
                    this.Root == input.Root ||
                    (this.Root != null &&
                    this.Root.Equals(input.Root))
                ) && 
                (
                    this.Tmp == input.Tmp ||
                    (this.Tmp != null &&
                    this.Tmp.Equals(input.Tmp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IPFSMount != null)
                    hashCode = hashCode * 59 + this.IPFSMount.GetHashCode();
                if (this.Root != null)
                    hashCode = hashCode * 59 + this.Root.GetHashCode();
                if (this.Tmp != null)
                    hashCode = hashCode * 59 + this.Tmp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
