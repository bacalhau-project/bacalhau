/* 
 * Bacalhau API
 *
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = bacalhau-client.Client.SwaggerDateConverter;

namespace bacalhau-client.Model
{
    /// <summary>
    /// ModelStorageSpec
    /// </summary>
    [DataContract]
        public partial class ModelStorageSpec :  IEquatable<ModelStorageSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelStorageSpec" /> class.
        /// </summary>
        /// <param name="cID">The unique ID of the data, where it makes sense (for example, in an IPFS storage spec this will be the data&#x27;s CID). NOTE: The below is capitalized to match IPFS &amp; IPLD (even though it&#x27;s out of golang fmt).</param>
        /// <param name="metadata">Additional properties specific to each driver.</param>
        /// <param name="name">Name of the spec&#x27;s data, for reference..</param>
        /// <param name="storageSource">StorageSource is the abstract source of the data. E.g. a storage source might be a URL download, but doesn&#x27;t specify how the execution engine does the download or what it will do with the downloaded data..</param>
        /// <param name="uRL">Source URL of the data.</param>
        /// <param name="path">The path that the spec&#x27;s data should be mounted on, where it makes sense (for example, in a Docker storage spec this will be a filesystem path). TODO: #668 Replace with \&quot;Path\&quot; (note the caps) for yaml/json when we update the n.js file.</param>
        public ModelStorageSpec(string cID = default(string), Dictionary<string, string> metadata = default(Dictionary<string, string>), string name = default(string), int? storageSource = default(int?), string uRL = default(string), string path = default(string))
        {
            this.CID = cID;
            this.Metadata = metadata;
            this.Name = name;
            this.StorageSource = storageSource;
            this.URL = uRL;
            this.Path = path;
        }
        
        /// <summary>
        /// The unique ID of the data, where it makes sense (for example, in an IPFS storage spec this will be the data&#x27;s CID). NOTE: The below is capitalized to match IPFS &amp; IPLD (even though it&#x27;s out of golang fmt)
        /// </summary>
        /// <value>The unique ID of the data, where it makes sense (for example, in an IPFS storage spec this will be the data&#x27;s CID). NOTE: The below is capitalized to match IPFS &amp; IPLD (even though it&#x27;s out of golang fmt)</value>
        [DataMember(Name="CID", EmitDefaultValue=false)]
        public string CID { get; set; }

        /// <summary>
        /// Additional properties specific to each driver
        /// </summary>
        /// <value>Additional properties specific to each driver</value>
        [DataMember(Name="Metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Name of the spec&#x27;s data, for reference.
        /// </summary>
        /// <value>Name of the spec&#x27;s data, for reference.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// StorageSource is the abstract source of the data. E.g. a storage source might be a URL download, but doesn&#x27;t specify how the execution engine does the download or what it will do with the downloaded data.
        /// </summary>
        /// <value>StorageSource is the abstract source of the data. E.g. a storage source might be a URL download, but doesn&#x27;t specify how the execution engine does the download or what it will do with the downloaded data.</value>
        [DataMember(Name="StorageSource", EmitDefaultValue=false)]
        public int? StorageSource { get; set; }

        /// <summary>
        /// Source URL of the data
        /// </summary>
        /// <value>Source URL of the data</value>
        [DataMember(Name="URL", EmitDefaultValue=false)]
        public string URL { get; set; }

        /// <summary>
        /// The path that the spec&#x27;s data should be mounted on, where it makes sense (for example, in a Docker storage spec this will be a filesystem path). TODO: #668 Replace with \&quot;Path\&quot; (note the caps) for yaml/json when we update the n.js file
        /// </summary>
        /// <value>The path that the spec&#x27;s data should be mounted on, where it makes sense (for example, in a Docker storage spec this will be a filesystem path). TODO: #668 Replace with \&quot;Path\&quot; (note the caps) for yaml/json when we update the n.js file</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelStorageSpec {\n");
            sb.Append("  CID: ").Append(CID).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StorageSource: ").Append(StorageSource).Append("\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelStorageSpec);
        }

        /// <summary>
        /// Returns true if ModelStorageSpec instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelStorageSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelStorageSpec input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CID == input.CID ||
                    (this.CID != null &&
                    this.CID.Equals(input.CID))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StorageSource == input.StorageSource ||
                    (this.StorageSource != null &&
                    this.StorageSource.Equals(input.StorageSource))
                ) && 
                (
                    this.URL == input.URL ||
                    (this.URL != null &&
                    this.URL.Equals(input.URL))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CID != null)
                    hashCode = hashCode * 59 + this.CID.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StorageSource != null)
                    hashCode = hashCode * 59 + this.StorageSource.GetHashCode();
                if (this.URL != null)
                    hashCode = hashCode * 59 + this.URL.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
