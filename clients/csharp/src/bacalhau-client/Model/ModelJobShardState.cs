/* 
 * Bacalhau API
 *
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = bacalhau-client.Client.SwaggerDateConverter;

namespace bacalhau-client.Model
{
    /// <summary>
    /// ModelJobShardState
    /// </summary>
    [DataContract]
        public partial class ModelJobShardState :  IEquatable<ModelJobShardState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelJobShardState" /> class.
        /// </summary>
        /// <param name="nodeId">which node is running this shard.</param>
        /// <param name="publishedResults">publishedResults.</param>
        /// <param name="runOutput">runOutput.</param>
        /// <param name="shardIndex">what shard is this we are running.</param>
        /// <param name="state">what is the state of the shard on this node.</param>
        /// <param name="status">an arbitrary status message.</param>
        /// <param name="verificationProposal">the proposed results for this shard this will be resolved by the verifier somehow.</param>
        /// <param name="verificationResult">verificationResult.</param>
        public ModelJobShardState(string nodeId = default(string), ModelStorageSpec publishedResults = default(ModelStorageSpec), ModelRunCommandResult runOutput = default(ModelRunCommandResult), int? shardIndex = default(int?), int? state = default(int?), string status = default(string), List<int?> verificationProposal = default(List<int?>), ModelVerificationResult verificationResult = default(ModelVerificationResult))
        {
            this.NodeId = nodeId;
            this.PublishedResults = publishedResults;
            this.RunOutput = runOutput;
            this.ShardIndex = shardIndex;
            this.State = state;
            this.Status = status;
            this.VerificationProposal = verificationProposal;
            this.VerificationResult = verificationResult;
        }
        
        /// <summary>
        /// which node is running this shard
        /// </summary>
        /// <value>which node is running this shard</value>
        [DataMember(Name="NodeId", EmitDefaultValue=false)]
        public string NodeId { get; set; }

        /// <summary>
        /// Gets or Sets PublishedResults
        /// </summary>
        [DataMember(Name="PublishedResults", EmitDefaultValue=false)]
        public ModelStorageSpec PublishedResults { get; set; }

        /// <summary>
        /// Gets or Sets RunOutput
        /// </summary>
        [DataMember(Name="RunOutput", EmitDefaultValue=false)]
        public ModelRunCommandResult RunOutput { get; set; }

        /// <summary>
        /// what shard is this we are running
        /// </summary>
        /// <value>what shard is this we are running</value>
        [DataMember(Name="ShardIndex", EmitDefaultValue=false)]
        public int? ShardIndex { get; set; }

        /// <summary>
        /// what is the state of the shard on this node
        /// </summary>
        /// <value>what is the state of the shard on this node</value>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public int? State { get; set; }

        /// <summary>
        /// an arbitrary status message
        /// </summary>
        /// <value>an arbitrary status message</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// the proposed results for this shard this will be resolved by the verifier somehow
        /// </summary>
        /// <value>the proposed results for this shard this will be resolved by the verifier somehow</value>
        [DataMember(Name="VerificationProposal", EmitDefaultValue=false)]
        public List<int?> VerificationProposal { get; set; }

        /// <summary>
        /// Gets or Sets VerificationResult
        /// </summary>
        [DataMember(Name="VerificationResult", EmitDefaultValue=false)]
        public ModelVerificationResult VerificationResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelJobShardState {\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  PublishedResults: ").Append(PublishedResults).Append("\n");
            sb.Append("  RunOutput: ").Append(RunOutput).Append("\n");
            sb.Append("  ShardIndex: ").Append(ShardIndex).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  VerificationProposal: ").Append(VerificationProposal).Append("\n");
            sb.Append("  VerificationResult: ").Append(VerificationResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelJobShardState);
        }

        /// <summary>
        /// Returns true if ModelJobShardState instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelJobShardState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelJobShardState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NodeId == input.NodeId ||
                    (this.NodeId != null &&
                    this.NodeId.Equals(input.NodeId))
                ) && 
                (
                    this.PublishedResults == input.PublishedResults ||
                    (this.PublishedResults != null &&
                    this.PublishedResults.Equals(input.PublishedResults))
                ) && 
                (
                    this.RunOutput == input.RunOutput ||
                    (this.RunOutput != null &&
                    this.RunOutput.Equals(input.RunOutput))
                ) && 
                (
                    this.ShardIndex == input.ShardIndex ||
                    (this.ShardIndex != null &&
                    this.ShardIndex.Equals(input.ShardIndex))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.VerificationProposal == input.VerificationProposal ||
                    this.VerificationProposal != null &&
                    input.VerificationProposal != null &&
                    this.VerificationProposal.SequenceEqual(input.VerificationProposal)
                ) && 
                (
                    this.VerificationResult == input.VerificationResult ||
                    (this.VerificationResult != null &&
                    this.VerificationResult.Equals(input.VerificationResult))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NodeId != null)
                    hashCode = hashCode * 59 + this.NodeId.GetHashCode();
                if (this.PublishedResults != null)
                    hashCode = hashCode * 59 + this.PublishedResults.GetHashCode();
                if (this.RunOutput != null)
                    hashCode = hashCode * 59 + this.RunOutput.GetHashCode();
                if (this.ShardIndex != null)
                    hashCode = hashCode * 59 + this.ShardIndex.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.VerificationProposal != null)
                    hashCode = hashCode * 59 + this.VerificationProposal.GetHashCode();
                if (this.VerificationResult != null)
                    hashCode = hashCode * 59 + this.VerificationResult.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
