/* 
 * Bacalhau API
 *
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = bacalhau-client.Client.SwaggerDateConverter;

namespace bacalhau-client.Model
{
    /// <summary>
    /// ModelDeal
    /// </summary>
    [DataContract]
        public partial class ModelDeal :  IEquatable<ModelDeal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelDeal" /> class.
        /// </summary>
        /// <param name="concurrency">The maximum number of concurrent compute node bids that will be accepted by the requester node on behalf of the client..</param>
        /// <param name="confidence">The number of nodes that must agree on a verification result this is used by the different verifiers - for example the deterministic verifier requires the winning group size to be at least this size.</param>
        /// <param name="minBids">The minimum number of bids that must be received before the Requester node will randomly accept concurrency-many of them. This allows the Requester node to get some level of guarantee that the execution of the jobs will be spread evenly across the network (assuming that this value is some large proportion of the size of the network)..</param>
        public ModelDeal(int? concurrency = default(int?), int? confidence = default(int?), int? minBids = default(int?))
        {
            this.Concurrency = concurrency;
            this.Confidence = confidence;
            this.MinBids = minBids;
        }
        
        /// <summary>
        /// The maximum number of concurrent compute node bids that will be accepted by the requester node on behalf of the client.
        /// </summary>
        /// <value>The maximum number of concurrent compute node bids that will be accepted by the requester node on behalf of the client.</value>
        [DataMember(Name="Concurrency", EmitDefaultValue=false)]
        public int? Concurrency { get; set; }

        /// <summary>
        /// The number of nodes that must agree on a verification result this is used by the different verifiers - for example the deterministic verifier requires the winning group size to be at least this size
        /// </summary>
        /// <value>The number of nodes that must agree on a verification result this is used by the different verifiers - for example the deterministic verifier requires the winning group size to be at least this size</value>
        [DataMember(Name="Confidence", EmitDefaultValue=false)]
        public int? Confidence { get; set; }

        /// <summary>
        /// The minimum number of bids that must be received before the Requester node will randomly accept concurrency-many of them. This allows the Requester node to get some level of guarantee that the execution of the jobs will be spread evenly across the network (assuming that this value is some large proportion of the size of the network).
        /// </summary>
        /// <value>The minimum number of bids that must be received before the Requester node will randomly accept concurrency-many of them. This allows the Requester node to get some level of guarantee that the execution of the jobs will be spread evenly across the network (assuming that this value is some large proportion of the size of the network).</value>
        [DataMember(Name="MinBids", EmitDefaultValue=false)]
        public int? MinBids { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelDeal {\n");
            sb.Append("  Concurrency: ").Append(Concurrency).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  MinBids: ").Append(MinBids).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelDeal);
        }

        /// <summary>
        /// Returns true if ModelDeal instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelDeal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelDeal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Concurrency == input.Concurrency ||
                    (this.Concurrency != null &&
                    this.Concurrency.Equals(input.Concurrency))
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    (this.Confidence != null &&
                    this.Confidence.Equals(input.Confidence))
                ) && 
                (
                    this.MinBids == input.MinBids ||
                    (this.MinBids != null &&
                    this.MinBids.Equals(input.MinBids))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Concurrency != null)
                    hashCode = hashCode * 59 + this.Concurrency.GetHashCode();
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                if (this.MinBids != null)
                    hashCode = hashCode * 59 + this.MinBids.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
