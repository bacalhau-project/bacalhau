/* 
 * Bacalhau API
 *
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = bacalhau-client.Client.SwaggerDateConverter;

namespace bacalhau-client.Model
{
    /// <summary>
    /// PublicapiDebugResponse
    /// </summary>
    [DataContract]
        public partial class PublicapiDebugResponse :  IEquatable<PublicapiDebugResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicapiDebugResponse" /> class.
        /// </summary>
        /// <param name="availableComputeCapacity">availableComputeCapacity.</param>
        /// <param name="computeJobs">computeJobs.</param>
        /// <param name="requesterJobs">requesterJobs.</param>
        public PublicapiDebugResponse(ModelResourceUsageData availableComputeCapacity = default(ModelResourceUsageData), List<ComputenodeActiveJob> computeJobs = default(List<ComputenodeActiveJob>), List<RequesternodeActiveJob> requesterJobs = default(List<RequesternodeActiveJob>))
        {
            this.AvailableComputeCapacity = availableComputeCapacity;
            this.ComputeJobs = computeJobs;
            this.RequesterJobs = requesterJobs;
        }
        
        /// <summary>
        /// Gets or Sets AvailableComputeCapacity
        /// </summary>
        [DataMember(Name="AvailableComputeCapacity", EmitDefaultValue=false)]
        public ModelResourceUsageData AvailableComputeCapacity { get; set; }

        /// <summary>
        /// Gets or Sets ComputeJobs
        /// </summary>
        [DataMember(Name="ComputeJobs", EmitDefaultValue=false)]
        public List<ComputenodeActiveJob> ComputeJobs { get; set; }

        /// <summary>
        /// Gets or Sets RequesterJobs
        /// </summary>
        [DataMember(Name="RequesterJobs", EmitDefaultValue=false)]
        public List<RequesternodeActiveJob> RequesterJobs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicapiDebugResponse {\n");
            sb.Append("  AvailableComputeCapacity: ").Append(AvailableComputeCapacity).Append("\n");
            sb.Append("  ComputeJobs: ").Append(ComputeJobs).Append("\n");
            sb.Append("  RequesterJobs: ").Append(RequesterJobs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicapiDebugResponse);
        }

        /// <summary>
        /// Returns true if PublicapiDebugResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicapiDebugResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicapiDebugResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AvailableComputeCapacity == input.AvailableComputeCapacity ||
                    (this.AvailableComputeCapacity != null &&
                    this.AvailableComputeCapacity.Equals(input.AvailableComputeCapacity))
                ) && 
                (
                    this.ComputeJobs == input.ComputeJobs ||
                    this.ComputeJobs != null &&
                    input.ComputeJobs != null &&
                    this.ComputeJobs.SequenceEqual(input.ComputeJobs)
                ) && 
                (
                    this.RequesterJobs == input.RequesterJobs ||
                    this.RequesterJobs != null &&
                    input.RequesterJobs != null &&
                    this.RequesterJobs.SequenceEqual(input.RequesterJobs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AvailableComputeCapacity != null)
                    hashCode = hashCode * 59 + this.AvailableComputeCapacity.GetHashCode();
                if (this.ComputeJobs != null)
                    hashCode = hashCode * 59 + this.ComputeJobs.GetHashCode();
                if (this.RequesterJobs != null)
                    hashCode = hashCode * 59 + this.RequesterJobs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
