/* 
 * Bacalhau API
 *
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = bacalhau-client.Client.SwaggerDateConverter;

namespace bacalhau-client.Model
{
    /// <summary>
    /// PublicapiSubmitRequest
    /// </summary>
    [DataContract]
        public partial class PublicapiSubmitRequest :  IEquatable<PublicapiSubmitRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicapiSubmitRequest" /> class.
        /// </summary>
        /// <param name="clientPublicKey">The base64-encoded public key of the client: (required).</param>
        /// <param name="data">data (required).</param>
        /// <param name="signature">A base64-encoded signature of the data, signed by the client: (required).</param>
        public PublicapiSubmitRequest(string clientPublicKey = default(string), ModelJobCreatePayload data = default(ModelJobCreatePayload), string signature = default(string))
        {
            // to ensure "clientPublicKey" is required (not null)
            if (clientPublicKey == null)
            {
                throw new InvalidDataException("clientPublicKey is a required property for PublicapiSubmitRequest and cannot be null");
            }
            else
            {
                this.ClientPublicKey = clientPublicKey;
            }
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for PublicapiSubmitRequest and cannot be null");
            }
            else
            {
                this.Data = data;
            }
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new InvalidDataException("signature is a required property for PublicapiSubmitRequest and cannot be null");
            }
            else
            {
                this.Signature = signature;
            }
        }
        
        /// <summary>
        /// The base64-encoded public key of the client:
        /// </summary>
        /// <value>The base64-encoded public key of the client:</value>
        [DataMember(Name="client_public_key", EmitDefaultValue=false)]
        public string ClientPublicKey { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public ModelJobCreatePayload Data { get; set; }

        /// <summary>
        /// A base64-encoded signature of the data, signed by the client:
        /// </summary>
        /// <value>A base64-encoded signature of the data, signed by the client:</value>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public string Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicapiSubmitRequest {\n");
            sb.Append("  ClientPublicKey: ").Append(ClientPublicKey).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicapiSubmitRequest);
        }

        /// <summary>
        /// Returns true if PublicapiSubmitRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicapiSubmitRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicapiSubmitRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientPublicKey == input.ClientPublicKey ||
                    (this.ClientPublicKey != null &&
                    this.ClientPublicKey.Equals(input.ClientPublicKey))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientPublicKey != null)
                    hashCode = hashCode * 59 + this.ClientPublicKey.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
