/* 
 * Bacalhau API
 *
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = bacalhau-client.Client.SwaggerDateConverter;

namespace bacalhau-client.Model
{
    /// <summary>
    /// ModelJobSpecWasm
    /// </summary>
    [DataContract]
        public partial class ModelJobSpecWasm :  IEquatable<ModelJobSpecWasm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelJobSpecWasm" /> class.
        /// </summary>
        /// <param name="entryPoint">The name of the function in the EntryModule to call to run the job. For WASI jobs, this will always be &#x60;_start&#x60;, but jobs can choose to call other WASM functions instead. The EntryPoint must be a zero-parameter zero-result function..</param>
        /// <param name="environmentVariables">The variables available in the environment of the running program..</param>
        /// <param name="importModules">TODO #880: Other WASM modules whose exports will be available as imports to the EntryModule..</param>
        /// <param name="parameters">The arguments supplied to the program (i.e. as ARGV)..</param>
        public ModelJobSpecWasm(string entryPoint = default(string), Dictionary<string, string> environmentVariables = default(Dictionary<string, string>), List<ModelStorageSpec> importModules = default(List<ModelStorageSpec>), List<string> parameters = default(List<string>))
        {
            this.EntryPoint = entryPoint;
            this.EnvironmentVariables = environmentVariables;
            this.ImportModules = importModules;
            this.Parameters = parameters;
        }
        
        /// <summary>
        /// The name of the function in the EntryModule to call to run the job. For WASI jobs, this will always be &#x60;_start&#x60;, but jobs can choose to call other WASM functions instead. The EntryPoint must be a zero-parameter zero-result function.
        /// </summary>
        /// <value>The name of the function in the EntryModule to call to run the job. For WASI jobs, this will always be &#x60;_start&#x60;, but jobs can choose to call other WASM functions instead. The EntryPoint must be a zero-parameter zero-result function.</value>
        [DataMember(Name="EntryPoint", EmitDefaultValue=false)]
        public string EntryPoint { get; set; }

        /// <summary>
        /// The variables available in the environment of the running program.
        /// </summary>
        /// <value>The variables available in the environment of the running program.</value>
        [DataMember(Name="EnvironmentVariables", EmitDefaultValue=false)]
        public Dictionary<string, string> EnvironmentVariables { get; set; }

        /// <summary>
        /// TODO #880: Other WASM modules whose exports will be available as imports to the EntryModule.
        /// </summary>
        /// <value>TODO #880: Other WASM modules whose exports will be available as imports to the EntryModule.</value>
        [DataMember(Name="ImportModules", EmitDefaultValue=false)]
        public List<ModelStorageSpec> ImportModules { get; set; }

        /// <summary>
        /// The arguments supplied to the program (i.e. as ARGV).
        /// </summary>
        /// <value>The arguments supplied to the program (i.e. as ARGV).</value>
        [DataMember(Name="Parameters", EmitDefaultValue=false)]
        public List<string> Parameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelJobSpecWasm {\n");
            sb.Append("  EntryPoint: ").Append(EntryPoint).Append("\n");
            sb.Append("  EnvironmentVariables: ").Append(EnvironmentVariables).Append("\n");
            sb.Append("  ImportModules: ").Append(ImportModules).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelJobSpecWasm);
        }

        /// <summary>
        /// Returns true if ModelJobSpecWasm instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelJobSpecWasm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelJobSpecWasm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntryPoint == input.EntryPoint ||
                    (this.EntryPoint != null &&
                    this.EntryPoint.Equals(input.EntryPoint))
                ) && 
                (
                    this.EnvironmentVariables == input.EnvironmentVariables ||
                    this.EnvironmentVariables != null &&
                    input.EnvironmentVariables != null &&
                    this.EnvironmentVariables.SequenceEqual(input.EnvironmentVariables)
                ) && 
                (
                    this.ImportModules == input.ImportModules ||
                    this.ImportModules != null &&
                    input.ImportModules != null &&
                    this.ImportModules.SequenceEqual(input.ImportModules)
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryPoint != null)
                    hashCode = hashCode * 59 + this.EntryPoint.GetHashCode();
                if (this.EnvironmentVariables != null)
                    hashCode = hashCode * 59 + this.EnvironmentVariables.GetHashCode();
                if (this.ImportModules != null)
                    hashCode = hashCode * 59 + this.ImportModules.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
