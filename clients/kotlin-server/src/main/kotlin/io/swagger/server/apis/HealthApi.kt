/**
* Bacalhau API
* This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
*
* OpenAPI spec version: 1.0.0
* Contact: team@bacalhau.org
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/package io.swagger.server.apis

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.auth.authenticate
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.OAuthServerSettings
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.KtorExperimentalLocationsAPI
import io.ktor.locations.delete
import io.ktor.locations.get
import io.ktor.locations.post
import io.ktor.locations.put
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import io.ktor.routing.route

import bacalhau-client.Paths
import bacalhau-client.infrastructure.ApiPrincipal


import io.swagger.server.models.PublicapidebugResponse
import io.swagger.server.models.TypesHealthInfo

@KtorExperimentalLocationsAPI
fun Route.HealthApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()
    get<Paths.apiServer/debug> {  _: Paths.apiServer/debug ->
        val exampleContentType = "application/json"
        val exampleContentString = """{
  "ComputeJobs" : [ {
    "ShardID" : "ShardID",
    "State" : "State"
  }, {
    "ShardID" : "ShardID",
    "State" : "State"
  } ],
  "AvailableComputeCapacity" : {
    "Memory" : 27487790694,
    "CPU" : 9.600000000000001,
    "Disk" : 212663867801,
    "GPU" : 1
  },
  "RequesterJobs" : [ {
    "ShardID" : "ShardID",
    "State" : "State",
    "CompletedNodesCount" : 6,
    "BiddingNodesCount" : 0
  }, {
    "ShardID" : "ShardID",
    "State" : "State",
    "CompletedNodesCount" : 6,
    "BiddingNodesCount" : 0
  } ]
}"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }    }
    get<Paths.apiServer/healthz> {  _: Paths.apiServer/healthz ->
        val exampleContentType = "application/json"
        val exampleContentString = """{
  "FreeSpace" : {
    "IPFSMount" : {
      "All" : 0,
      "Used" : 1,
      "Free" : 6
    }
  }
}"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }    }
    get<Paths.apiServer/livez> {  _: Paths.apiServer/livez ->
        val exampleContentType = "application/json"
        val exampleContentString = """"""""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }    }
    get<Paths.apiServer/logz> {  _: Paths.apiServer/logz ->
        val exampleContentType = "application/json"
        val exampleContentString = """"""""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }    }
    get<Paths.apiServer/readyz> {  _: Paths.apiServer/readyz ->
        val exampleContentType = "application/json"
        val exampleContentString = """"""""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }    }
    get<Paths.apiServer/varz> {  _: Paths.apiServer/varz ->
        val exampleContentType = "application/json"
        val exampleContentString = """[ 0, 0 ]"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }    }
}
