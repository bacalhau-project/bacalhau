/*
 * Bacalhau API
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ModelJobLocalEvent
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-11-25T18:06:36.734351Z[Europe/London]")
public class ModelJobLocalEvent {
  @SerializedName("EventName")
  private Integer eventName = null;

  @SerializedName("JobID")
  private String jobID = null;

  @SerializedName("ShardIndex")
  private Integer shardIndex = null;

  @SerializedName("TargetNodeID")
  private String targetNodeID = null;

  public ModelJobLocalEvent eventName(Integer eventName) {
    this.eventName = eventName;
    return this;
  }

   /**
   * Get eventName
   * @return eventName
  **/
  @Schema(description = "")
  public Integer getEventName() {
    return eventName;
  }

  public void setEventName(Integer eventName) {
    this.eventName = eventName;
  }

  public ModelJobLocalEvent jobID(String jobID) {
    this.jobID = jobID;
    return this;
  }

   /**
   * Get jobID
   * @return jobID
  **/
  @Schema(description = "")
  public String getJobID() {
    return jobID;
  }

  public void setJobID(String jobID) {
    this.jobID = jobID;
  }

  public ModelJobLocalEvent shardIndex(Integer shardIndex) {
    this.shardIndex = shardIndex;
    return this;
  }

   /**
   * Get shardIndex
   * @return shardIndex
  **/
  @Schema(description = "")
  public Integer getShardIndex() {
    return shardIndex;
  }

  public void setShardIndex(Integer shardIndex) {
    this.shardIndex = shardIndex;
  }

  public ModelJobLocalEvent targetNodeID(String targetNodeID) {
    this.targetNodeID = targetNodeID;
    return this;
  }

   /**
   * Get targetNodeID
   * @return targetNodeID
  **/
  @Schema(description = "")
  public String getTargetNodeID() {
    return targetNodeID;
  }

  public void setTargetNodeID(String targetNodeID) {
    this.targetNodeID = targetNodeID;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelJobLocalEvent modelJobLocalEvent = (ModelJobLocalEvent) o;
    return Objects.equals(this.eventName, modelJobLocalEvent.eventName) &&
        Objects.equals(this.jobID, modelJobLocalEvent.jobID) &&
        Objects.equals(this.shardIndex, modelJobLocalEvent.shardIndex) &&
        Objects.equals(this.targetNodeID, modelJobLocalEvent.targetNodeID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventName, jobID, shardIndex, targetNodeID);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelJobLocalEvent {\n");
    
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    jobID: ").append(toIndentedString(jobID)).append("\n");
    sb.append("    shardIndex: ").append(toIndentedString(shardIndex)).append("\n");
    sb.append("    targetNodeID: ").append(toIndentedString(targetNodeID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
