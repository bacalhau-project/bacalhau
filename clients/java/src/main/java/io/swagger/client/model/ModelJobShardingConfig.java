/*
 * Bacalhau API
 * This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/filecoin-project/bacalhau.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: team@bacalhau.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ModelJobShardingConfig
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-11-25T18:06:36.734351Z[Europe/London]")
public class ModelJobShardingConfig {
  @SerializedName("BatchSize")
  private Integer batchSize = null;

  @SerializedName("GlobPattern")
  private String globPattern = null;

  @SerializedName("GlobPatternBasePath")
  private String globPatternBasePath = null;

  public ModelJobShardingConfig batchSize(Integer batchSize) {
    this.batchSize = batchSize;
    return this;
  }

   /**
   * how many \&quot;items\&quot; are to be processed in each shard we first apply the glob pattern which will result in a flat list of items this number decides how to group that flat list into actual shards run by compute nodes
   * @return batchSize
  **/
  @Schema(description = "how many \"items\" are to be processed in each shard we first apply the glob pattern which will result in a flat list of items this number decides how to group that flat list into actual shards run by compute nodes")
  public Integer getBatchSize() {
    return batchSize;
  }

  public void setBatchSize(Integer batchSize) {
    this.batchSize = batchSize;
  }

  public ModelJobShardingConfig globPattern(String globPattern) {
    this.globPattern = globPattern;
    return this;
  }

   /**
   * divide the inputs up into the smallest possible unit for example /_* would mean \&quot;all top level files or folders\&quot; this being an empty string means \&quot;no sharding\&quot;
   * @return globPattern
  **/
  @Schema(description = "divide the inputs up into the smallest possible unit for example /_* would mean \"all top level files or folders\" this being an empty string means \"no sharding\"")
  public String getGlobPattern() {
    return globPattern;
  }

  public void setGlobPattern(String globPattern) {
    this.globPattern = globPattern;
  }

  public ModelJobShardingConfig globPatternBasePath(String globPatternBasePath) {
    this.globPatternBasePath = globPatternBasePath;
    return this;
  }

   /**
   * when using multiple input volumes what path do we treat as the common mount path to apply the glob pattern to
   * @return globPatternBasePath
  **/
  @Schema(description = "when using multiple input volumes what path do we treat as the common mount path to apply the glob pattern to")
  public String getGlobPatternBasePath() {
    return globPatternBasePath;
  }

  public void setGlobPatternBasePath(String globPatternBasePath) {
    this.globPatternBasePath = globPatternBasePath;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelJobShardingConfig modelJobShardingConfig = (ModelJobShardingConfig) o;
    return Objects.equals(this.batchSize, modelJobShardingConfig.batchSize) &&
        Objects.equals(this.globPattern, modelJobShardingConfig.globPattern) &&
        Objects.equals(this.globPatternBasePath, modelJobShardingConfig.globPatternBasePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchSize, globPattern, globPatternBasePath);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelJobShardingConfig {\n");
    
    sb.append("    batchSize: ").append(toIndentedString(batchSize)).append("\n");
    sb.append("    globPattern: ").append(toIndentedString(globPattern)).append("\n");
    sb.append("    globPatternBasePath: ").append(toIndentedString(globPatternBasePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
