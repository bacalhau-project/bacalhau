// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Bacalhau Team",
            "url": "https://github.com/bacalhau-project/bacalhau",
            "email": "team@bacalhau.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://github.com/bacalhau-project/bacalhau/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Utils"
                ],
                "operationId": "home",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/agent/alive": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Ops"
                ],
                "operationId": "agent/alive",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/agent/node": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ops"
                ],
                "summary": "Returns the info of the node.",
                "operationId": "agent/node",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.NodeInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/agent/version": {
            "get": {
                "description": "See https://github.com/bacalhau-project/bacalhau/releases for a complete list of ` + "`" + `gitversion` + "`" + ` tags.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ops"
                ],
                "summary": "Returns the build version running on the server.",
                "operationId": "agent/version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apimodels.GetVersionResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/compute/approve": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compute Node"
                ],
                "summary": "Approves a job to be run on this compute node.",
                "operationId": "apiServer/approver",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/compute/debug": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compute Node"
                ],
                "summary": "Returns debug information on what the current node is doing.",
                "operationId": "apiServer/debug",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/healthz": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Utils"
                ],
                "operationId": "healthz",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.HealthInfo"
                        }
                    }
                }
            }
        },
        "/api/v1/id": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Utils"
                ],
                "summary": "Returns the id of the host node.",
                "operationId": "id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/livez": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Utils"
                ],
                "operationId": "livez",
                "responses": {
                    "200": {
                        "description": "TODO",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/node_info": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Utils"
                ],
                "summary": "Returns the info of the node.",
                "operationId": "nodeInfo",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.NodeInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/orchestrator/jobs": {
            "get": {
                "description": "Returns a list of jobs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Returns a list of jobs.",
                "operationId": "orchestrator/listJobs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace to get the jobs for",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit the number of jobs returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token to get the next page of jobs",
                        "name": "next_token",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Reverse the order of the jobs",
                        "name": "reverse",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order the jobs by the given field",
                        "name": "order_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apimodels.ListJobsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Submits a job to the orchestrator.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Submits a job to the orchestrator.",
                "operationId": "orchestrator/putJob",
                "parameters": [
                    {
                        "description": "Job to submit",
                        "name": "job",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Job"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apimodels.PutJobResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/orchestrator/jobs/{id}": {
            "delete": {
                "description": "Stops a job.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Stops a job.",
                "operationId": "orchestrator/stopJob",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID to stop the job for",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Reason for stopping the job",
                        "name": "reason",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apimodels.StopJobResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/orchestrator/jobs/{id}/executions": {
            "get": {
                "description": "Returns the executions of a job.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Returns the executions of a job.",
                "operationId": "orchestrator/jobExecutions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID to get the job executions for",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit the number of executions returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token to get the next page of executions",
                        "name": "next_token",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Reverse the order of the executions",
                        "name": "reverse",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order the executions by the given field",
                        "name": "order_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apimodels.ListJobExecutionsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/orchestrator/jobs/{id}/history": {
            "get": {
                "description": "Returns the history of a job.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Returns the history of a job.",
                "operationId": "orchestrator/jobHistory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID to get the job history for",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Only return history since this time",
                        "name": "since",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Only return history of this event type",
                        "name": "event_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Only return history of this execution ID",
                        "name": "execution_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Only return history of this node ID",
                        "name": "node_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apimodels.ListJobHistoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/orchestrator/jobs/{id}/results": {
            "get": {
                "description": "Returns the results of a job.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orchestrator"
                ],
                "summary": "Returns the results of a job.",
                "operationId": "orchestrator/jobResults",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID to get the job results for",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit the number of results returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token to get the next page of results",
                        "name": "next_token",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Reverse the order of the results",
                        "name": "reverse",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order the results by the given field",
                        "name": "order_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apimodels.ListJobResultsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/peers": {
            "get": {
                "description": "As described in the [architecture docs](https://docs.bacalhau.org/about-bacalhau/architecture),\neach node is connected to a number of peer nodes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Utils"
                ],
                "summary": "Returns the peers connected to the host via the transport layer.",
                "operationId": "peers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/peer.AddrInfo"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/requester/cancel": {
            "post": {
                "description": "Cancels a job specified by ` + "`" + `id` + "`" + ` as long as that job belongs to ` + "`" + `client_id` + "`" + `.\nReturns the current jobstate after the cancel request has been processed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Cancels the job with the job-id specified in the body payload.",
                "operationId": "pkg/requester/publicapi/cancel",
                "parameters": [
                    {
                        "description": " ",
                        "name": "CancelRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/legacymodels.CancelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/legacymodels.CancelResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/requester/debug": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Returns debug information on what the current node is doing.",
                "operationId": "pkg/requester/publicapi/debug",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/requester/events": {
            "post": {
                "description": "Events (e.g. Created, Bid, BidAccepted, ..., ResultsAccepted, ResultsPublished) are useful to track the progress of a job.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Returns the events related to the job-id passed in the body payload. Useful for troubleshooting.",
                "operationId": "pkg/requester/publicapi/events",
                "parameters": [
                    {
                        "description": "Request must specify a ` + "`" + `client_id` + "`" + `. To retrieve your ` + "`" + `client_id` + "`" + `, you can do the following: (1) submit a dummy job to Bacalhau (or use one you created before), (2) run ` + "`" + `bacalhau describe \u003cjob-id\u003e` + "`" + ` and fetch the ` + "`" + `ClientID` + "`" + ` field.",
                        "name": "EventsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/legacymodels.EventsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/legacymodels.EventsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/requester/list": {
            "post": {
                "description": "Returns the first (sorted) #` + "`" + `max_jobs` + "`" + ` jobs that belong to the ` + "`" + `client_id` + "`" + ` passed in the body payload (by default).\nIf ` + "`" + `return_all` + "`" + ` is set to true, it returns all jobs on the Bacalhau network.\nIf ` + "`" + `id` + "`" + ` is set, it returns only the job with that ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Simply lists jobs.",
                "operationId": "pkg/requester/publicapi/list",
                "parameters": [
                    {
                        "description": "Set ` + "`" + `return_all` + "`" + ` to ` + "`" + `true` + "`" + ` to return all jobs on the network (may degrade performance, use with care!).",
                        "name": "ListRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/legacymodels.ListRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/legacymodels.ListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/requester/logs": {
            "post": {
                "description": "Shows the output from the job specified by ` + "`" + `id` + "`" + ` as long as that job belongs to ` + "`" + `client_id` + "`" + `.\nThe output will be continuous until either, the client disconnects or the execution completes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Displays the logs for a current job/execution",
                "operationId": "pkg/requester/publicapi/logs",
                "parameters": [
                    {
                        "description": " ",
                        "name": "LogRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/legacymodels.LogRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/requester/nodes": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Displays the nodes that this requester knows about",
                "operationId": "pkg/requester/publicapi/nodes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NodeInfo"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/requester/results": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Returns the results of the job-id specified in the body payload.",
                "operationId": "pkg/requester/publicapi/results",
                "parameters": [
                    {
                        "description": " ",
                        "name": "StateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/legacymodels.StateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/legacymodels.ResultsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/requester/states": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Returns the state of the job-id specified in the body payload.",
                "operationId": "pkg/requester/publicapi/states",
                "parameters": [
                    {
                        "description": " ",
                        "name": "StateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/legacymodels.StateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/legacymodels.StateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/requester/submit": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Submits a new job to the network.",
                "operationId": "pkg/requester/publicapi/submit",
                "parameters": [
                    {
                        "description": " ",
                        "name": "SubmitRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/legacymodels.SubmitRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/legacymodels.SubmitResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/version": {
            "post": {
                "description": "See https://github.com/bacalhau-project/bacalhau/releases for a complete list of ` + "`" + `gitversion` + "`" + ` tags.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Misc"
                ],
                "summary": "Returns the build version running on the server.",
                "operationId": "apiServer/version",
                "parameters": [
                    {
                        "description": "Request must specify a ` + "`" + `client_id` + "`" + `. To retrieve your ` + "`" + `client_id` + "`" + `, you can do the following: (1) submit a dummy job to Bacalhau (or use one you created before), (2) run ` + "`" + `bacalhau describe \u003cjob-id\u003e` + "`" + ` and fetch the ` + "`" + `ClientID` + "`" + ` field.",
                        "name": "VersionRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/legacymodels.VersionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/legacymodels.VersionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apimodels.GetJobResponse": {
            "type": "object",
            "properties": {
                "Job": {
                    "$ref": "#/definitions/models.Job"
                }
            }
        },
        "apimodels.GetVersionResponse": {
            "type": "object",
            "properties": {
                "BuildDate": {
                    "type": "string",
                    "example": "2022-11-16T14:03:31Z"
                },
                "GOARCH": {
                    "type": "string",
                    "example": "amd64"
                },
                "GOOS": {
                    "type": "string",
                    "example": "linux"
                },
                "GitCommit": {
                    "type": "string",
                    "example": "d612b63108f2b5ce1ab2b9e02444eb1dac1d922d"
                },
                "GitVersion": {
                    "type": "string",
                    "example": "v0.3.12"
                },
                "Major": {
                    "type": "string",
                    "example": "0"
                },
                "Minor": {
                    "type": "string",
                    "example": "3"
                }
            }
        },
        "apimodels.ListJobExecutionsResponse": {
            "type": "object",
            "properties": {
                "executions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Execution"
                    }
                },
                "nextToken": {
                    "type": "string"
                }
            }
        },
        "apimodels.ListJobHistoryResponse": {
            "type": "object",
            "properties": {
                "history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.JobHistory"
                    }
                },
                "nextToken": {
                    "type": "string"
                }
            }
        },
        "apimodels.ListJobResultsResponse": {
            "type": "object",
            "properties": {
                "nextToken": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SpecConfig"
                    }
                }
            }
        },
        "apimodels.ListJobsResponse": {
            "type": "object",
            "properties": {
                "Jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Job"
                    }
                },
                "nextToken": {
                    "type": "string"
                }
            }
        },
        "apimodels.PutJobResponse": {
            "type": "object",
            "properties": {
                "EvaluationID": {
                    "type": "string"
                },
                "JobID": {
                    "type": "string"
                },
                "Warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "apimodels.StopJobResponse": {
            "type": "object",
            "properties": {
                "EvaluationID": {
                    "type": "string"
                }
            }
        },
        "legacymodels.CancelRequest": {
            "type": "object",
            "required": [
                "client_public_key",
                "payload",
                "signature"
            ],
            "properties": {
                "client_public_key": {
                    "description": "The base64-encoded public key of the client:",
                    "type": "string"
                },
                "payload": {
                    "description": "The data needed to cancel a running job on the network",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.JobCancelPayload"
                        }
                    ]
                },
                "signature": {
                    "description": "A base64-encoded signature of the data, signed by the client:",
                    "type": "string"
                }
            }
        },
        "legacymodels.CancelResponse": {
            "type": "object",
            "properties": {
                "state": {
                    "$ref": "#/definitions/model.JobState"
                }
            }
        },
        "legacymodels.EventFilterOptions": {
            "type": "object",
            "properties": {
                "exclude_execution_level": {
                    "type": "boolean"
                },
                "exclude_job_level": {
                    "type": "boolean"
                },
                "execution_id": {
                    "type": "string"
                },
                "node_id": {
                    "type": "string"
                },
                "since": {
                    "type": "integer"
                }
            }
        },
        "legacymodels.EventsRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                },
                "filters": {
                    "description": "Records the number of seconds since the unix epoch (UTC)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/legacymodels.EventFilterOptions"
                        }
                    ]
                },
                "job_id": {
                    "type": "string",
                    "example": "9304c616-291f-41ad-b862-54e133c0149e"
                }
            }
        },
        "legacymodels.EventsResponse": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.JobHistory"
                    }
                }
            }
        },
        "legacymodels.ListRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                },
                "exclude_tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['any-tag']"
                    ]
                },
                "id": {
                    "type": "string",
                    "example": "9304c616-291f-41ad-b862-54e133c0149e"
                },
                "include_tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['any-tag']"
                    ]
                },
                "max_jobs": {
                    "type": "integer",
                    "example": 10
                },
                "return_all": {
                    "type": "boolean"
                },
                "sort_by": {
                    "type": "string",
                    "example": "created_at"
                },
                "sort_reverse": {
                    "type": "boolean"
                }
            }
        },
        "legacymodels.ListResponse": {
            "type": "object",
            "properties": {
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.JobWithInfo"
                    }
                }
            }
        },
        "legacymodels.LogRequest": {
            "type": "object",
            "required": [
                "client_public_key",
                "payload",
                "signature"
            ],
            "properties": {
                "client_public_key": {
                    "description": "The base64-encoded public key of the client:",
                    "type": "string"
                },
                "payload": {
                    "description": "The data needed to cancel a running job on the network",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.LogsPayload"
                        }
                    ]
                },
                "signature": {
                    "description": "A base64-encoded signature of the data, signed by the client:",
                    "type": "string"
                }
            }
        },
        "legacymodels.ResultsResponse": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PublishedResult"
                    }
                }
            }
        },
        "legacymodels.StateRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                },
                "job_id": {
                    "type": "string",
                    "example": "9304c616-291f-41ad-b862-54e133c0149e"
                }
            }
        },
        "legacymodels.StateResponse": {
            "type": "object",
            "properties": {
                "state": {
                    "$ref": "#/definitions/model.JobState"
                }
            }
        },
        "legacymodels.SubmitRequest": {
            "type": "object",
            "required": [
                "client_public_key",
                "payload",
                "signature"
            ],
            "properties": {
                "client_public_key": {
                    "description": "The base64-encoded public key of the client:",
                    "type": "string"
                },
                "payload": {
                    "description": "The data needed to cancel a running job on the network",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.JobCreatePayload"
                        }
                    ]
                },
                "signature": {
                    "description": "A base64-encoded signature of the data, signed by the client:",
                    "type": "string"
                }
            }
        },
        "legacymodels.SubmitResponse": {
            "type": "object",
            "properties": {
                "job": {
                    "$ref": "#/definitions/model.Job"
                }
            }
        },
        "legacymodels.VersionRequest": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                }
            }
        },
        "legacymodels.VersionResponse": {
            "type": "object",
            "properties": {
                "build_version_info": {
                    "$ref": "#/definitions/models.BuildVersionInfo"
                }
            }
        },
        "model.Deal": {
            "type": "object",
            "properties": {
                "Concurrency": {
                    "description": "The maximum number of concurrent compute node bids that will be\naccepted by the requester node on behalf of the client.",
                    "type": "integer"
                },
                "TargetingMode": {
                    "description": "Whether the job should be run on any matching node (false) or all\nmatching nodes (true). If true, other fields in this struct are ignored.",
                    "type": "boolean"
                }
            }
        },
        "model.Engine": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4
            ],
            "x-enum-comments": {
                "engineDone": "must be last",
                "engineUnknown": "must be first"
            },
            "x-enum-varnames": [
                "engineUnknown",
                "EngineNoop",
                "EngineDocker",
                "EngineWasm",
                "engineDone"
            ]
        },
        "model.EngineSpec": {
            "type": "object",
            "properties": {
                "params": {
                    "type": "object",
                    "additionalProperties": true
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.ExecutionDesiredState": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "ExecutionDesiredStatePending",
                "ExecutionDesiredStateRunning",
                "ExecutionDesiredStateStopped"
            ]
        },
        "model.ExecutionState": {
            "type": "object",
            "properties": {
                "ComputeReference": {
                    "description": "Compute node reference for this job execution",
                    "type": "string"
                },
                "CreateTime": {
                    "description": "CreateTime is the time when the job was created.",
                    "type": "string"
                },
                "DesiredState": {
                    "description": "DesiredState is the desired state of the execution",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ExecutionDesiredState"
                        }
                    ]
                },
                "JobID": {
                    "description": "JobID the job id",
                    "type": "string"
                },
                "NodeId": {
                    "description": "which node is running this execution",
                    "type": "string"
                },
                "PublishedResults": {
                    "description": "the published results for this execution",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.StorageSpec"
                        }
                    ]
                },
                "RunOutput": {
                    "description": "RunOutput of the job",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.RunCommandResult"
                        }
                    ]
                },
                "State": {
                    "description": "State is the current state of the execution",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ExecutionStateType"
                        }
                    ]
                },
                "Status": {
                    "description": "an arbitrary status message",
                    "type": "string"
                },
                "UpdateTime": {
                    "description": "UpdateTime is the time when the job state was last updated.",
                    "type": "string"
                },
                "Version": {
                    "description": "Version is the version of the job state. It is incremented every time the job state is updated.",
                    "type": "integer"
                }
            }
        },
        "model.ExecutionStateType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "x-enum-comments": {
                "ExecutionStateBidAccepted": "aka running"
            },
            "x-enum-varnames": [
                "ExecutionStateUndefined",
                "ExecutionStateNew",
                "ExecutionStateAskForBid",
                "ExecutionStateAskForBidAccepted",
                "ExecutionStateAskForBidRejected",
                "ExecutionStateBidAccepted",
                "ExecutionStateBidRejected",
                "ExecutionStateCompleted",
                "ExecutionStateFailed",
                "ExecutionStateCancelled"
            ]
        },
        "model.Job": {
            "type": "object",
            "properties": {
                "APIVersion": {
                    "type": "string",
                    "example": "V1beta1"
                },
                "Metadata": {
                    "description": "TODO this doesn't seem like it should be a part of the job as it cannot be known by a client ahead of time.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Metadata"
                        }
                    ]
                },
                "Spec": {
                    "description": "The specification of this job.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Spec"
                        }
                    ]
                }
            }
        },
        "model.JobCancelPayload": {
            "type": "object",
            "required": [
                "ClientID",
                "JobID"
            ],
            "properties": {
                "ClientID": {
                    "description": "the id of the client that is submitting the job",
                    "type": "string"
                },
                "JobID": {
                    "description": "the job id of the job to be canceled",
                    "type": "string"
                },
                "Reason": {
                    "description": "The reason that the job is being canceled",
                    "type": "string"
                }
            }
        },
        "model.JobCreatePayload": {
            "type": "object",
            "required": [
                "APIVersion",
                "ClientID",
                "Spec"
            ],
            "properties": {
                "APIVersion": {
                    "type": "string",
                    "example": "V1beta1"
                },
                "ClientID": {
                    "description": "the id of the client that is submitting the job",
                    "type": "string"
                },
                "Spec": {
                    "description": "The specification of this job.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Spec"
                        }
                    ]
                }
            }
        },
        "model.JobHistory": {
            "type": "object",
            "properties": {
                "Comment": {
                    "type": "string"
                },
                "ComputeReference": {
                    "type": "string"
                },
                "ExecutionState": {
                    "$ref": "#/definitions/model.StateChange-model_ExecutionStateType"
                },
                "JobID": {
                    "type": "string"
                },
                "JobState": {
                    "$ref": "#/definitions/model.StateChange-model_JobStateType"
                },
                "NewVersion": {
                    "type": "integer"
                },
                "NodeID": {
                    "type": "string"
                },
                "Time": {
                    "type": "string"
                },
                "Type": {
                    "$ref": "#/definitions/model.JobHistoryType"
                }
            }
        },
        "model.JobHistoryType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "jobHistoryTypeUndefined",
                "JobHistoryTypeJobLevel",
                "JobHistoryTypeExecutionLevel"
            ]
        },
        "model.JobRequester": {
            "type": "object",
            "properties": {
                "RequesterNodeID": {
                    "description": "The ID of the requester node that owns this job.",
                    "type": "string",
                    "example": "QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF"
                },
                "RequesterPublicKey": {
                    "description": "The public key of the Requester node that created this job\nThis can be used to encrypt messages back to the creator",
                    "type": "string"
                }
            }
        },
        "model.JobSpecDocker": {
            "type": "object",
            "properties": {
                "Entrypoint": {
                    "description": "optionally override the default entrypoint",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "EnvironmentVariables": {
                    "description": "a map of env to run the container with",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Image": {
                    "description": "this should be pullable by docker",
                    "type": "string"
                },
                "Parameters": {
                    "description": "Parameters holds additional commandline arguments",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "WorkingDirectory": {
                    "description": "working directory inside the container",
                    "type": "string"
                }
            }
        },
        "model.JobSpecWasm": {
            "type": "object",
            "properties": {
                "EntryModule": {
                    "description": "The module that contains the WASM code to start running.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.StorageSpec"
                        }
                    ]
                },
                "EntryPoint": {
                    "description": "The name of the function in the EntryModule to call to run the job. For\nWASI jobs, this will always be ` + "`" + `_start` + "`" + `, but jobs can choose to call\nother WASM functions instead. The EntryPoint must be a zero-parameter\nzero-result function.",
                    "type": "string"
                },
                "EnvironmentVariables": {
                    "description": "The variables available in the environment of the running program.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ImportModules": {
                    "description": "TODO #880: Other WASM modules whose exports will be available as imports\nto the EntryModule.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.StorageSpec"
                    }
                },
                "Parameters": {
                    "description": "The arguments supplied to the program (i.e. as ARGV).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.JobState": {
            "type": "object",
            "properties": {
                "CreateTime": {
                    "description": "CreateTime is the time when the job was created.",
                    "type": "string"
                },
                "Executions": {
                    "description": "Executions is a list of executions of the job across the nodes.\nA new execution is created when a node is selected to execute the job, and a node can have multiple executions for the same\njob due to retries, but there can only be a single active execution per node at any given time.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ExecutionState"
                    }
                },
                "JobID": {
                    "description": "JobID is the unique identifier for the job",
                    "type": "string"
                },
                "State": {
                    "description": "State is the current state of the job",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.JobStateType"
                        }
                    ]
                },
                "TimeoutAt": {
                    "description": "TimeoutAt is the time when the job will be timed out if it is not completed.",
                    "type": "string"
                },
                "UpdateTime": {
                    "description": "UpdateTime is the time when the job state was last updated.",
                    "type": "string"
                },
                "Version": {
                    "description": "Version is the version of the job state. It is incremented every time the job state is updated.",
                    "type": "integer"
                }
            }
        },
        "model.JobStateType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "x-enum-varnames": [
                "JobStateUndefined",
                "JobStateNew",
                "JobStateInProgress",
                "JobStateCancelled",
                "JobStateError",
                "JobStateCompleted",
                "JobStateQueued"
            ]
        },
        "model.JobWithInfo": {
            "type": "object",
            "properties": {
                "History": {
                    "description": "History of changes to the job state. Not always populated in the job description",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.JobHistory"
                    }
                },
                "Job": {
                    "description": "Job info",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Job"
                        }
                    ]
                },
                "State": {
                    "description": "The current state of the job",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.JobState"
                        }
                    ]
                }
            }
        },
        "model.LabelSelectorRequirement": {
            "type": "object",
            "properties": {
                "Key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                },
                "Operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                },
                "Values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.LogsPayload": {
            "type": "object",
            "required": [
                "ClientID",
                "ExecutionID",
                "JobID"
            ],
            "properties": {
                "ClientID": {
                    "description": "the id of the client that is requesting the logs",
                    "type": "string"
                },
                "ExecutionID": {
                    "description": "the execution to be shown",
                    "type": "string"
                },
                "Follow": {
                    "description": "whether the logs should be followed after the current logs are shown",
                    "type": "boolean"
                },
                "JobID": {
                    "description": "the job id of the job to be shown",
                    "type": "string"
                },
                "WithHistory": {
                    "description": "whether the logs history is required",
                    "type": "boolean"
                }
            }
        },
        "model.Metadata": {
            "type": "object",
            "properties": {
                "ClientID": {
                    "description": "The ID of the client that created this job.",
                    "type": "string",
                    "example": "ac13188e93c97a9c2e7cf8e86c7313156a73436036f30da1ececc2ce79f9ea51"
                },
                "CreatedAt": {
                    "description": "Time the job was submitted to the bacalhau network.",
                    "type": "string",
                    "example": "2022-11-17T13:29:01.871140291Z"
                },
                "ID": {
                    "description": "The unique global ID of this job in the bacalhau network.",
                    "type": "string",
                    "example": "92d5d4ee-3765-4f78-8353-623f5f26df08"
                },
                "Requester": {
                    "$ref": "#/definitions/model.JobRequester"
                }
            }
        },
        "model.Network": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "NetworkNone",
                "NetworkFull",
                "NetworkHTTP"
            ]
        },
        "model.NetworkConfig": {
            "type": "object",
            "properties": {
                "Domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Type": {
                    "$ref": "#/definitions/model.Network"
                }
            }
        },
        "model.PublishedResult": {
            "type": "object",
            "properties": {
                "Data": {
                    "$ref": "#/definitions/model.StorageSpec"
                },
                "NodeID": {
                    "type": "string"
                }
            }
        },
        "model.Publisher": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5
            ],
            "x-enum-comments": {
                "publisherDone": "must be last",
                "publisherUnknown": "must be first"
            },
            "x-enum-varnames": [
                "publisherUnknown",
                "PublisherNoop",
                "PublisherIpfs",
                "PublisherS3",
                "publisherDone"
            ]
        },
        "model.PublisherSpec": {
            "type": "object",
            "properties": {
                "Params": {
                    "type": "object",
                    "additionalProperties": true
                },
                "Type": {
                    "$ref": "#/definitions/model.Publisher"
                }
            }
        },
        "model.ResourceUsageConfig": {
            "type": "object",
            "properties": {
                "CPU": {
                    "description": "https://github.com/BTBurke/k8sresource string",
                    "type": "string"
                },
                "Disk": {
                    "type": "string"
                },
                "GPU": {
                    "description": "unsigned integer string",
                    "type": "string"
                },
                "Memory": {
                    "description": "github.com/c2h5oh/datasize string",
                    "type": "string"
                }
            }
        },
        "model.RunCommandResult": {
            "type": "object",
            "properties": {
                "exitCode": {
                    "description": "exit code of the run.",
                    "type": "integer"
                },
                "runnerError": {
                    "description": "Runner error",
                    "type": "string"
                },
                "stderr": {
                    "description": "stderr of the run.",
                    "type": "string"
                },
                "stderrtruncated": {
                    "description": "bool describing if stderr was truncated",
                    "type": "boolean"
                },
                "stdout": {
                    "description": "stdout of the run. Yaml provided for ` + "`" + `describe` + "`" + ` output",
                    "type": "string"
                },
                "stdouttruncated": {
                    "description": "bool describing if stdout was truncated",
                    "type": "boolean"
                }
            }
        },
        "model.S3StorageSpec": {
            "type": "object",
            "properties": {
                "Bucket": {
                    "type": "string"
                },
                "Checksum": {
                    "type": "string"
                },
                "Endpoint": {
                    "type": "string"
                },
                "Key": {
                    "type": "string"
                },
                "Region": {
                    "type": "string"
                },
                "VersionID": {
                    "type": "string"
                }
            }
        },
        "model.Spec": {
            "type": "object",
            "properties": {
                "Annotations": {
                    "description": "Annotations on the job - could be user or machine assigned",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Deal": {
                    "description": "The deal the client has made, such as which job bids they have accepted.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Deal"
                        }
                    ]
                },
                "DoNotTrack": {
                    "description": "Do not track specified by the client",
                    "type": "boolean"
                },
                "Docker": {
                    "description": "Deprecated: use EngineSpec.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.JobSpecDocker"
                        }
                    ]
                },
                "Engine": {
                    "description": "Deprecated: use EngineSpec.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Engine"
                        }
                    ]
                },
                "EngineSpec": {
                    "$ref": "#/definitions/model.EngineSpec"
                },
                "Inputs": {
                    "description": "the data volumes we will read in the job\nfor example \"read this ipfs cid\"",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.StorageSpec"
                    }
                },
                "Network": {
                    "description": "The type of networking access that the job needs",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.NetworkConfig"
                        }
                    ]
                },
                "NodeSelectors": {
                    "description": "NodeSelectors is a selector which must be true for the compute node to run this job.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.LabelSelectorRequirement"
                    }
                },
                "Outputs": {
                    "description": "the data volumes we will write in the job\nfor example \"write the results to ipfs\"",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.StorageSpec"
                    }
                },
                "Publisher": {
                    "description": "Deprecated: use PublisherSpec instead",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Publisher"
                        }
                    ]
                },
                "PublisherSpec": {
                    "$ref": "#/definitions/model.PublisherSpec"
                },
                "Resources": {
                    "description": "the compute (cpu, ram) resources this job requires",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ResourceUsageConfig"
                        }
                    ]
                },
                "Timeout": {
                    "description": "How long a job can run in seconds before it is killed.\nThis includes the time required to run, verify and publish results",
                    "type": "integer"
                },
                "Wasm": {
                    "description": "Deprecated: use EngineSpec.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.JobSpecWasm"
                        }
                    ]
                }
            }
        },
        "model.StateChange-model_ExecutionStateType": {
            "type": "object",
            "properties": {
                "New": {
                    "$ref": "#/definitions/model.ExecutionStateType"
                },
                "Previous": {
                    "$ref": "#/definitions/model.ExecutionStateType"
                }
            }
        },
        "model.StateChange-model_JobStateType": {
            "type": "object",
            "properties": {
                "New": {
                    "$ref": "#/definitions/model.JobStateType"
                },
                "Previous": {
                    "$ref": "#/definitions/model.JobStateType"
                }
            }
        },
        "model.StorageSourceType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "x-enum-comments": {
                "storageSourceDone": "must be last",
                "storageSourceUnknown": "must be first"
            },
            "x-enum-varnames": [
                "storageSourceUnknown",
                "StorageSourceIPFS",
                "StorageSourceRepoClone",
                "StorageSourceRepoCloneLFS",
                "StorageSourceURLDownload",
                "StorageSourceInline",
                "StorageSourceLocalDirectory",
                "StorageSourceS3",
                "storageSourceDone"
            ]
        },
        "model.StorageSpec": {
            "type": "object",
            "properties": {
                "CID": {
                    "description": "The unique ID of the data, where it makes sense (for example, in an\nIPFS storage spec this will be the data's CID).\nNOTE: The below is capitalized to match IPFS \u0026 IPLD (even though it's out of golang fmt)",
                    "type": "string",
                    "example": "QmTVmC7JBD2ES2qGPqBNVWnX1KeEPNrPGb7rJ8cpFgtefe"
                },
                "Metadata": {
                    "description": "Additional properties specific to each driver",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "Name": {
                    "description": "Name of the spec's data, for reference.",
                    "type": "string",
                    "example": "job-9304c616-291f-41ad-b862-54e133c0149e-host-QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL"
                },
                "Path": {
                    "description": "The path that the spec's data should be mounted on, where it makes\nsense (for example, in a Docker storage spec this will be a filesystem\npath).",
                    "type": "string"
                },
                "ReadWrite": {
                    "description": "Allow write access for locally mounted inputs",
                    "type": "boolean"
                },
                "Repo": {
                    "description": "URL of the git Repo to clone",
                    "type": "string"
                },
                "S3": {
                    "$ref": "#/definitions/model.S3StorageSpec"
                },
                "SourcePath": {
                    "description": "The path of the host data if we are using local directory paths",
                    "type": "string"
                },
                "StorageSource": {
                    "description": "StorageSource is the abstract source of the data. E.g. a storage source\nmight be a URL download, but doesn't specify how the execution engine\ndoes the download or what it will do with the downloaded data.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.StorageSourceType"
                        }
                    ]
                },
                "URL": {
                    "description": "Source URL of the data",
                    "type": "string"
                }
            }
        },
        "models.AllocatedResources": {
            "type": "object",
            "properties": {
                "Tasks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.Resources"
                    }
                }
            }
        },
        "models.BuildVersionInfo": {
            "type": "object",
            "properties": {
                "BuildDate": {
                    "type": "string",
                    "example": "2022-11-16T14:03:31Z"
                },
                "GOARCH": {
                    "type": "string",
                    "example": "amd64"
                },
                "GOOS": {
                    "type": "string",
                    "example": "linux"
                },
                "GitCommit": {
                    "type": "string",
                    "example": "d612b63108f2b5ce1ab2b9e02444eb1dac1d922d"
                },
                "GitVersion": {
                    "type": "string",
                    "example": "v0.3.12"
                },
                "Major": {
                    "type": "string",
                    "example": "0"
                },
                "Minor": {
                    "type": "string",
                    "example": "3"
                }
            }
        },
        "models.ComputeNodeInfo": {
            "type": "object",
            "properties": {
                "AvailableCapacity": {
                    "$ref": "#/definitions/models.Resources"
                },
                "EnqueuedExecutions": {
                    "type": "integer"
                },
                "ExecutionEngines": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "MaxCapacity": {
                    "$ref": "#/definitions/models.Resources"
                },
                "MaxJobRequirements": {
                    "$ref": "#/definitions/models.Resources"
                },
                "Publishers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "RunningExecutions": {
                    "type": "integer"
                },
                "StorageSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Execution": {
            "type": "object",
            "properties": {
                "AllocatedResources": {
                    "description": "AllocatedResources is the total resources allocated for the execution tasks.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.AllocatedResources"
                        }
                    ]
                },
                "ComputeState": {
                    "description": "ComputeState observed state of the execution on the compute node",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.State-models_ExecutionStateType"
                        }
                    ]
                },
                "CreateTime": {
                    "description": "CreateTime is the time the execution has finished scheduling and been\nverified by the plan applier.",
                    "type": "integer"
                },
                "DesiredState": {
                    "description": "DesiredState of the execution on the compute node",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.State-models_ExecutionDesiredStateType"
                        }
                    ]
                },
                "EvalID": {
                    "description": "ID of the evaluation that generated this execution",
                    "type": "string"
                },
                "FollowupEvalID": {
                    "description": "FollowupEvalID captures a follow up evaluation created to handle a failed execution\nthat can be rescheduled in the future",
                    "type": "string"
                },
                "ID": {
                    "description": "ID of the execution (UUID)",
                    "type": "string"
                },
                "Job": {
                    "description": "TODO: evaluate using a copy of the job instead of a pointer",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Job"
                        }
                    ]
                },
                "JobID": {
                    "description": "Job is the parent job of the task being allocated.\nThis is copied at execution time to avoid issues if the job\ndefinition is updated.",
                    "type": "string"
                },
                "ModifyTime": {
                    "description": "ModifyTime is the time the execution was last updated.",
                    "type": "integer"
                },
                "Name": {
                    "description": "Name is a logical name of the execution.",
                    "type": "string"
                },
                "Namespace": {
                    "description": "Namespace is the namespace the execution is created in",
                    "type": "string"
                },
                "NextExecution": {
                    "description": "NextExecution is the execution that this execution is being replaced by",
                    "type": "string"
                },
                "NodeID": {
                    "description": "NodeID is the node this is being placed on",
                    "type": "string"
                },
                "PreviousExecution": {
                    "description": "PreviousExecution is the execution that this execution is replacing",
                    "type": "string"
                },
                "PublishedResult": {
                    "description": "the published results for this execution",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SpecConfig"
                        }
                    ]
                },
                "Revision": {
                    "description": "Revision is increment each time the execution is updated.",
                    "type": "integer"
                },
                "RunOutput": {
                    "description": "RunOutput is the output of the run command\nTODO: evaluate removing this from execution spec in favour of calling ` + "`" + `bacalhau logs` + "`" + `",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.RunCommandResult"
                        }
                    ]
                }
            }
        },
        "models.ExecutionDesiredStateType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "ExecutionDesiredStatePending",
                "ExecutionDesiredStateRunning",
                "ExecutionDesiredStateStopped"
            ]
        },
        "models.ExecutionStateType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "x-enum-comments": {
                "ExecutionStateBidAccepted": "aka running"
            },
            "x-enum-varnames": [
                "ExecutionStateUndefined",
                "ExecutionStateNew",
                "ExecutionStateAskForBid",
                "ExecutionStateAskForBidAccepted",
                "ExecutionStateAskForBidRejected",
                "ExecutionStateBidAccepted",
                "ExecutionStateBidRejected",
                "ExecutionStateCompleted",
                "ExecutionStateFailed",
                "ExecutionStateCancelled"
            ]
        },
        "models.GPU": {
            "type": "object",
            "properties": {
                "index": {
                    "description": "Self-reported index of the device in the system",
                    "type": "integer"
                },
                "memory": {
                    "description": "Total GPU memory in mebibytes (MiB)",
                    "type": "integer"
                },
                "name": {
                    "description": "Model name of the GPU e.g. Tesla T4",
                    "type": "string"
                },
                "pciaddress": {
                    "description": "PCI address of the device, in the format AAAA:BB:CC.C\nUsed to discover the correct device rendering cards",
                    "type": "string"
                },
                "vendor": {
                    "description": "Maker of the GPU, e.g. NVidia, AMD, Intel",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.GPUVendor"
                        }
                    ]
                }
            }
        },
        "models.GPUVendor": {
            "type": "string",
            "enum": [
                "NVIDIA",
                "AMD/ATI",
                "Intel"
            ],
            "x-enum-varnames": [
                "GPUVendorNvidia",
                "GPUVendorAMDATI",
                "GPUVendorIntel"
            ]
        },
        "models.InputSource": {
            "type": "object",
            "properties": {
                "Alias": {
                    "description": "Alias is an optional reference to this input source that can be used for\ndynamic linking to this input. (e.g. dynamic import in wasm by alias)",
                    "type": "string"
                },
                "Source": {
                    "description": "Source is the source of the artifact to be downloaded, e.g a URL, S3 bucket, etc.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SpecConfig"
                        }
                    ]
                },
                "Target": {
                    "description": "Target is the path where the artifact should be mounted on",
                    "type": "string"
                }
            }
        },
        "models.Job": {
            "type": "object",
            "properties": {
                "Constraints": {
                    "description": "Constraints is a selector which must be true for the compute node to run this job.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.LabelSelectorRequirement"
                    }
                },
                "Count": {
                    "description": "Count is the number of replicas that should be scheduled.",
                    "type": "integer"
                },
                "CreateTime": {
                    "type": "integer"
                },
                "ID": {
                    "description": "ID is a unique identifier assigned to this job.\nIt helps to distinguish jobs with the same name after they have been deleted and re-created.\nThe ID is generated by the server and should not be set directly by the client.",
                    "type": "string"
                },
                "Labels": {
                    "description": "Labels is used to associate arbitrary labels with this job, which can be used\nfor filtering.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "Meta": {
                    "description": "Meta is used to associate arbitrary metadata with this job.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ModifyTime": {
                    "type": "integer"
                },
                "Name": {
                    "description": "Name is the logical name of the job used to refer to it.\nSubmitting a job with the same name as an existing job will result in an\nupdate to the existing job.",
                    "type": "string"
                },
                "Namespace": {
                    "description": "Namespace is the namespace this job is running in.",
                    "type": "string"
                },
                "Priority": {
                    "description": "Priority defines the scheduling priority of this job.",
                    "type": "integer"
                },
                "Revision": {
                    "description": "Revision is a per-job monotonically increasing revision number that is incremented\non each update to the job's state or specification",
                    "type": "integer"
                },
                "State": {
                    "description": "State is the current state of the job.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.State-models_JobStateType"
                        }
                    ]
                },
                "Tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Task"
                    }
                },
                "Type": {
                    "description": "Type is the type of job this is, e.g. \"daemon\" or \"batch\".",
                    "type": "string"
                },
                "Version": {
                    "description": "Version is a per-job monotonically increasing version number that is incremented\non each job specification update.",
                    "type": "integer"
                }
            }
        },
        "models.JobHistory": {
            "type": "object",
            "properties": {
                "Comment": {
                    "type": "string"
                },
                "ExecutionID": {
                    "type": "string"
                },
                "ExecutionState": {
                    "$ref": "#/definitions/models.StateChange-models_ExecutionStateType"
                },
                "JobID": {
                    "type": "string"
                },
                "JobState": {
                    "$ref": "#/definitions/models.StateChange-models_JobStateType"
                },
                "NewRevision": {
                    "type": "integer"
                },
                "NodeID": {
                    "type": "string"
                },
                "Time": {
                    "type": "string"
                },
                "Type": {
                    "$ref": "#/definitions/models.JobHistoryType"
                }
            }
        },
        "models.JobHistoryType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "JobHistoryTypeUndefined",
                "JobHistoryTypeJobLevel",
                "JobHistoryTypeExecutionLevel"
            ]
        },
        "models.JobStateType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5
            ],
            "x-enum-varnames": [
                "JobStateTypeUndefined",
                "JobStateTypePending",
                "JobStateTypeRunning",
                "JobStateTypeCompleted",
                "JobStateTypeFailed",
                "JobStateTypeStopped"
            ]
        },
        "models.LabelSelectorRequirement": {
            "type": "object",
            "properties": {
                "Key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                },
                "Operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/selection.Operator"
                        }
                    ]
                },
                "Values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Network": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "NetworkNone",
                "NetworkFull",
                "NetworkHTTP"
            ]
        },
        "models.NetworkConfig": {
            "type": "object",
            "properties": {
                "Domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Type": {
                    "$ref": "#/definitions/models.Network"
                }
            }
        },
        "models.NodeInfo": {
            "type": "object",
            "properties": {
                "BacalhauVersion": {
                    "$ref": "#/definitions/models.BuildVersionInfo"
                },
                "ComputeNodeInfo": {
                    "$ref": "#/definitions/models.ComputeNodeInfo"
                },
                "Labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "NodeType": {
                    "$ref": "#/definitions/models.NodeType"
                },
                "PeerInfo": {
                    "$ref": "#/definitions/peer.AddrInfo"
                }
            }
        },
        "models.NodeType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "nodeTypeUndefined",
                "NodeTypeRequester",
                "NodeTypeCompute"
            ]
        },
        "models.Resources": {
            "type": "object",
            "properties": {
                "CPU": {
                    "description": "CPU units",
                    "type": "number"
                },
                "Disk": {
                    "description": "Disk in bytes",
                    "type": "integer"
                },
                "GPU": {
                    "description": "GPU units",
                    "type": "integer"
                },
                "GPUs": {
                    "description": "GPU details",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GPU"
                    }
                },
                "Memory": {
                    "description": "Memory in bytes",
                    "type": "integer"
                }
            }
        },
        "models.ResourcesConfig": {
            "type": "object",
            "properties": {
                "CPU": {
                    "description": "CPU https://github.com/BTBurke/k8sresource string",
                    "type": "string"
                },
                "Disk": {
                    "description": "Memory github.com/dustin/go-humanize string",
                    "type": "string"
                },
                "GPU": {
                    "type": "string"
                },
                "Memory": {
                    "description": "Memory github.com/dustin/go-humanize string",
                    "type": "string"
                }
            }
        },
        "models.ResultPath": {
            "type": "object",
            "properties": {
                "Name": {
                    "description": "Name",
                    "type": "string"
                },
                "Path": {
                    "description": "The path to the file/dir",
                    "type": "string"
                }
            }
        },
        "models.RunCommandResult": {
            "type": "object",
            "properties": {
                "ErrorMsg": {
                    "description": "Runner error",
                    "type": "string"
                },
                "ExitCode": {
                    "description": "exit code of the run.",
                    "type": "integer"
                },
                "StderrTruncated": {
                    "description": "bool describing if stderr was truncated",
                    "type": "boolean"
                },
                "Stdout": {
                    "description": "stdout of the run. Yaml provided for ` + "`" + `describe` + "`" + ` output",
                    "type": "string"
                },
                "StdoutTruncated": {
                    "description": "bool describing if stdout was truncated",
                    "type": "boolean"
                },
                "stderr": {
                    "description": "stderr of the run.",
                    "type": "string"
                }
            }
        },
        "models.SpecConfig": {
            "type": "object",
            "properties": {
                "Params": {
                    "description": "Params is a map of the config params",
                    "type": "object",
                    "additionalProperties": true
                },
                "Type": {
                    "description": "Type of the config",
                    "type": "string"
                }
            }
        },
        "models.State-models_ExecutionDesiredStateType": {
            "type": "object",
            "properties": {
                "Message": {
                    "description": "Message is a human readable message describing the state.",
                    "type": "string"
                },
                "StateType": {
                    "description": "StateType is the current state of the object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ExecutionDesiredStateType"
                        }
                    ]
                }
            }
        },
        "models.State-models_ExecutionStateType": {
            "type": "object",
            "properties": {
                "Message": {
                    "description": "Message is a human readable message describing the state.",
                    "type": "string"
                },
                "StateType": {
                    "description": "StateType is the current state of the object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ExecutionStateType"
                        }
                    ]
                }
            }
        },
        "models.State-models_JobStateType": {
            "type": "object",
            "properties": {
                "Message": {
                    "description": "Message is a human readable message describing the state.",
                    "type": "string"
                },
                "StateType": {
                    "description": "StateType is the current state of the object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.JobStateType"
                        }
                    ]
                }
            }
        },
        "models.StateChange-models_ExecutionStateType": {
            "type": "object",
            "properties": {
                "New": {
                    "$ref": "#/definitions/models.ExecutionStateType"
                },
                "Previous": {
                    "$ref": "#/definitions/models.ExecutionStateType"
                }
            }
        },
        "models.StateChange-models_JobStateType": {
            "type": "object",
            "properties": {
                "New": {
                    "$ref": "#/definitions/models.JobStateType"
                },
                "Previous": {
                    "$ref": "#/definitions/models.JobStateType"
                }
            }
        },
        "models.Task": {
            "type": "object",
            "properties": {
                "Engine": {
                    "$ref": "#/definitions/models.SpecConfig"
                },
                "Env": {
                    "description": "Map of environment variables to be used by the driver",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "InputSources": {
                    "description": "InputSources is a list of remote artifacts to be downloaded before running the task\nand mounted into the task.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.InputSource"
                    }
                },
                "Meta": {
                    "description": "Meta is used to associate arbitrary metadata with this task.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "Name": {
                    "description": "Name of the task",
                    "type": "string"
                },
                "Network": {
                    "$ref": "#/definitions/models.NetworkConfig"
                },
                "Publisher": {
                    "$ref": "#/definitions/models.SpecConfig"
                },
                "Resources": {
                    "description": "ResourcesConfig is the resources needed by this task",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ResourcesConfig"
                        }
                    ]
                },
                "ResultPaths": {
                    "description": "ResultPaths is a list of task volumes to be included in the task's published result",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ResultPath"
                    }
                },
                "Timeouts": {
                    "$ref": "#/definitions/models.TimeoutConfig"
                }
            }
        },
        "models.TimeoutConfig": {
            "type": "object",
            "properties": {
                "ExecutionTimeout": {
                    "description": "ExecutionTimeout is the maximum amount of time a task is allowed to run in seconds.\nZero means no timeout, such as for a daemon task.",
                    "type": "integer"
                }
            }
        },
        "peer.AddrInfo": {
            "type": "object",
            "properties": {
                "addrs": {
                    "type": "array",
                    "items": {}
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "selection.Operator": {
            "type": "string",
            "enum": [
                "!",
                "=",
                "==",
                "in",
                "!=",
                "notin",
                "exists",
                "gt",
                "lt"
            ],
            "x-enum-varnames": [
                "DoesNotExist",
                "Equals",
                "DoubleEquals",
                "In",
                "NotEquals",
                "NotIn",
                "Exists",
                "GreaterThan",
                "LessThan"
            ]
        },
        "types.FreeSpace": {
            "type": "object",
            "properties": {
                "IPFSMount": {
                    "$ref": "#/definitions/types.MountStatus"
                },
                "root": {
                    "$ref": "#/definitions/types.MountStatus"
                },
                "tmp": {
                    "$ref": "#/definitions/types.MountStatus"
                }
            }
        },
        "types.HealthInfo": {
            "type": "object",
            "properties": {
                "FreeSpace": {
                    "$ref": "#/definitions/types.FreeSpace"
                }
            }
        },
        "types.MountStatus": {
            "type": "object",
            "properties": {
                "All": {
                    "type": "integer"
                },
                "Free": {
                    "type": "integer"
                },
                "Used": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "bootstrap.production.bacalhau.org:1234",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Bacalhau API",
	Description:      "This page is the reference of the Bacalhau REST API. Project docs are available at https://docs.bacalhau.org/. Find more information about Bacalhau at https://github.com/bacalhau-project/bacalhau.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
