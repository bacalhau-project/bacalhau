// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: executor.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExecutorClient is the client API for Executor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutorClient interface {
	Run(ctx context.Context, in *RunCommandRequest, opts ...grpc.CallOption) (*RunCommandResponse, error)
	Start(ctx context.Context, in *RunCommandRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (Executor_WaitClient, error)
	Cancel(ctx context.Context, in *CancelCommandRequest, opts ...grpc.CallOption) (*CancelCommandResponse, error)
	IsInstalled(ctx context.Context, in *IsInstalledRequest, opts ...grpc.CallOption) (*IsInstalledResponse, error)
	ShouldBid(ctx context.Context, in *ShouldBidRequest, opts ...grpc.CallOption) (*ShouldBidResponse, error)
	ShouldBidBasedOnUsage(ctx context.Context, in *ShouldBidBasedOnUsageRequest, opts ...grpc.CallOption) (*ShouldBidResponse, error)
	GetOutputStream(ctx context.Context, in *OutputStreamRequest, opts ...grpc.CallOption) (Executor_GetOutputStreamClient, error)
}

type executorClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutorClient(cc grpc.ClientConnInterface) ExecutorClient {
	return &executorClient{cc}
}

func (c *executorClient) Run(ctx context.Context, in *RunCommandRequest, opts ...grpc.CallOption) (*RunCommandResponse, error) {
	out := new(RunCommandResponse)
	err := c.cc.Invoke(ctx, "/proto.Executor/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) Start(ctx context.Context, in *RunCommandRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/proto.Executor/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (Executor_WaitClient, error) {
	stream, err := c.cc.NewStream(ctx, &Executor_ServiceDesc.Streams[0], "/proto.Executor/Wait", opts...)
	if err != nil {
		return nil, err
	}
	x := &executorWaitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Executor_WaitClient interface {
	Recv() (*RunCommandResponse, error)
	grpc.ClientStream
}

type executorWaitClient struct {
	grpc.ClientStream
}

func (x *executorWaitClient) Recv() (*RunCommandResponse, error) {
	m := new(RunCommandResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executorClient) Cancel(ctx context.Context, in *CancelCommandRequest, opts ...grpc.CallOption) (*CancelCommandResponse, error) {
	out := new(CancelCommandResponse)
	err := c.cc.Invoke(ctx, "/proto.Executor/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) IsInstalled(ctx context.Context, in *IsInstalledRequest, opts ...grpc.CallOption) (*IsInstalledResponse, error) {
	out := new(IsInstalledResponse)
	err := c.cc.Invoke(ctx, "/proto.Executor/IsInstalled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ShouldBid(ctx context.Context, in *ShouldBidRequest, opts ...grpc.CallOption) (*ShouldBidResponse, error) {
	out := new(ShouldBidResponse)
	err := c.cc.Invoke(ctx, "/proto.Executor/ShouldBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ShouldBidBasedOnUsage(ctx context.Context, in *ShouldBidBasedOnUsageRequest, opts ...grpc.CallOption) (*ShouldBidResponse, error) {
	out := new(ShouldBidResponse)
	err := c.cc.Invoke(ctx, "/proto.Executor/ShouldBidBasedOnUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) GetOutputStream(ctx context.Context, in *OutputStreamRequest, opts ...grpc.CallOption) (Executor_GetOutputStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Executor_ServiceDesc.Streams[1], "/proto.Executor/GetOutputStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &executorGetOutputStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Executor_GetOutputStreamClient interface {
	Recv() (*OutputStreamResponse, error)
	grpc.ClientStream
}

type executorGetOutputStreamClient struct {
	grpc.ClientStream
}

func (x *executorGetOutputStreamClient) Recv() (*OutputStreamResponse, error) {
	m := new(OutputStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExecutorServer is the server API for Executor service.
// All implementations must embed UnimplementedExecutorServer
// for forward compatibility
type ExecutorServer interface {
	Run(context.Context, *RunCommandRequest) (*RunCommandResponse, error)
	Start(context.Context, *RunCommandRequest) (*StartResponse, error)
	Wait(*WaitRequest, Executor_WaitServer) error
	Cancel(context.Context, *CancelCommandRequest) (*CancelCommandResponse, error)
	IsInstalled(context.Context, *IsInstalledRequest) (*IsInstalledResponse, error)
	ShouldBid(context.Context, *ShouldBidRequest) (*ShouldBidResponse, error)
	ShouldBidBasedOnUsage(context.Context, *ShouldBidBasedOnUsageRequest) (*ShouldBidResponse, error)
	GetOutputStream(*OutputStreamRequest, Executor_GetOutputStreamServer) error
	mustEmbedUnimplementedExecutorServer()
}

// UnimplementedExecutorServer must be embedded to have forward compatible implementations.
type UnimplementedExecutorServer struct {
}

func (UnimplementedExecutorServer) Run(context.Context, *RunCommandRequest) (*RunCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedExecutorServer) Start(context.Context, *RunCommandRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedExecutorServer) Wait(*WaitRequest, Executor_WaitServer) error {
	return status.Errorf(codes.Unimplemented, "method Wait not implemented")
}
func (UnimplementedExecutorServer) Cancel(context.Context, *CancelCommandRequest) (*CancelCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedExecutorServer) IsInstalled(context.Context, *IsInstalledRequest) (*IsInstalledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInstalled not implemented")
}
func (UnimplementedExecutorServer) ShouldBid(context.Context, *ShouldBidRequest) (*ShouldBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldBid not implemented")
}
func (UnimplementedExecutorServer) ShouldBidBasedOnUsage(context.Context, *ShouldBidBasedOnUsageRequest) (*ShouldBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldBidBasedOnUsage not implemented")
}
func (UnimplementedExecutorServer) GetOutputStream(*OutputStreamRequest, Executor_GetOutputStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOutputStream not implemented")
}
func (UnimplementedExecutorServer) mustEmbedUnimplementedExecutorServer() {}

// UnsafeExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutorServer will
// result in compilation errors.
type UnsafeExecutorServer interface {
	mustEmbedUnimplementedExecutorServer()
}

func RegisterExecutorServer(s grpc.ServiceRegistrar, srv ExecutorServer) {
	s.RegisterService(&Executor_ServiceDesc, srv)
}

func _Executor_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Executor/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).Run(ctx, req.(*RunCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Executor/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).Start(ctx, req.(*RunCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_Wait_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WaitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecutorServer).Wait(m, &executorWaitServer{stream})
}

type Executor_WaitServer interface {
	Send(*RunCommandResponse) error
	grpc.ServerStream
}

type executorWaitServer struct {
	grpc.ServerStream
}

func (x *executorWaitServer) Send(m *RunCommandResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Executor_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Executor/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).Cancel(ctx, req.(*CancelCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_IsInstalled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsInstalledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).IsInstalled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Executor/IsInstalled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).IsInstalled(ctx, req.(*IsInstalledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ShouldBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShouldBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ShouldBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Executor/ShouldBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ShouldBid(ctx, req.(*ShouldBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ShouldBidBasedOnUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShouldBidBasedOnUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ShouldBidBasedOnUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Executor/ShouldBidBasedOnUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ShouldBidBasedOnUsage(ctx, req.(*ShouldBidBasedOnUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_GetOutputStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OutputStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecutorServer).GetOutputStream(m, &executorGetOutputStreamServer{stream})
}

type Executor_GetOutputStreamServer interface {
	Send(*OutputStreamResponse) error
	grpc.ServerStream
}

type executorGetOutputStreamServer struct {
	grpc.ServerStream
}

func (x *executorGetOutputStreamServer) Send(m *OutputStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Executor_ServiceDesc is the grpc.ServiceDesc for Executor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Executor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Executor",
	HandlerType: (*ExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Executor_Run_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Executor_Start_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Executor_Cancel_Handler,
		},
		{
			MethodName: "IsInstalled",
			Handler:    _Executor_IsInstalled_Handler,
		},
		{
			MethodName: "ShouldBid",
			Handler:    _Executor_ShouldBid_Handler,
		},
		{
			MethodName: "ShouldBidBasedOnUsage",
			Handler:    _Executor_ShouldBidBasedOnUsage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Wait",
			Handler:       _Executor_Wait_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetOutputStream",
			Handler:       _Executor_GetOutputStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "executor.proto",
}
