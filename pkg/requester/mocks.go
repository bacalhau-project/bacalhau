// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package requester is a generated GoMock package.
package requester

import (
	context "context"
	reflect "reflect"

	bidstrategy "github.com/bacalhau-project/bacalhau/pkg/bidstrategy"
	model "github.com/bacalhau-project/bacalhau/pkg/model"
	verifier "github.com/bacalhau-project/bacalhau/pkg/verifier"
	external "github.com/bacalhau-project/bacalhau/pkg/verifier/external"
	gomock "github.com/golang/mock/gomock"
)

// MockEndpoint is a mock of Endpoint interface.
type MockEndpoint struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointMockRecorder
}

// MockEndpointMockRecorder is the mock recorder for MockEndpoint.
type MockEndpointMockRecorder struct {
	mock *MockEndpoint
}

// NewMockEndpoint creates a new mock instance.
func NewMockEndpoint(ctrl *gomock.Controller) *MockEndpoint {
	mock := &MockEndpoint{ctrl: ctrl}
	mock.recorder = &MockEndpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpoint) EXPECT() *MockEndpointMockRecorder {
	return m.recorder
}

// ApproveJob mocks base method.
func (m *MockEndpoint) ApproveJob(arg0 context.Context, arg1 bidstrategy.ModerateJobRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveJob indicates an expected call of ApproveJob.
func (mr *MockEndpointMockRecorder) ApproveJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveJob", reflect.TypeOf((*MockEndpoint)(nil).ApproveJob), arg0, arg1)
}

// CancelJob mocks base method.
func (m *MockEndpoint) CancelJob(arg0 context.Context, arg1 CancelJobRequest) (CancelJobResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJob", arg0, arg1)
	ret0, _ := ret[0].(CancelJobResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJob indicates an expected call of CancelJob.
func (mr *MockEndpointMockRecorder) CancelJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJob", reflect.TypeOf((*MockEndpoint)(nil).CancelJob), arg0, arg1)
}

// ReadLogs mocks base method.
func (m *MockEndpoint) ReadLogs(arg0 context.Context, arg1 ReadLogsRequest) (ReadLogsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLogs", arg0, arg1)
	ret0, _ := ret[0].(ReadLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLogs indicates an expected call of ReadLogs.
func (mr *MockEndpointMockRecorder) ReadLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLogs", reflect.TypeOf((*MockEndpoint)(nil).ReadLogs), arg0, arg1)
}

// SubmitJob mocks base method.
func (m *MockEndpoint) SubmitJob(arg0 context.Context, arg1 model.JobCreatePayload) (*model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitJob", arg0, arg1)
	ret0, _ := ret[0].(*model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitJob indicates an expected call of SubmitJob.
func (mr *MockEndpointMockRecorder) SubmitJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitJob", reflect.TypeOf((*MockEndpoint)(nil).SubmitJob), arg0, arg1)
}

// VerifyExecutions mocks base method.
func (m *MockEndpoint) VerifyExecutions(arg0 context.Context, arg1 external.ExternalVerificationResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyExecutions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyExecutions indicates an expected call of VerifyExecutions.
func (mr *MockEndpointMockRecorder) VerifyExecutions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyExecutions", reflect.TypeOf((*MockEndpoint)(nil).VerifyExecutions), arg0, arg1)
}

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// CancelJob mocks base method.
func (m *MockScheduler) CancelJob(arg0 context.Context, arg1 CancelJobRequest) (CancelJobResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJob", arg0, arg1)
	ret0, _ := ret[0].(CancelJobResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJob indicates an expected call of CancelJob.
func (mr *MockSchedulerMockRecorder) CancelJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJob", reflect.TypeOf((*MockScheduler)(nil).CancelJob), arg0, arg1)
}

// StartJob mocks base method.
func (m *MockScheduler) StartJob(arg0 context.Context, arg1 StartJobRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartJob indicates an expected call of StartJob.
func (mr *MockSchedulerMockRecorder) StartJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob", reflect.TypeOf((*MockScheduler)(nil).StartJob), arg0, arg1)
}

// VerifyExecutions mocks base method.
func (m *MockScheduler) VerifyExecutions(arg0 context.Context, arg1 []verifier.VerifierResult) ([]verifier.VerifierResult, []verifier.VerifierResult) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyExecutions", arg0, arg1)
	ret0, _ := ret[0].([]verifier.VerifierResult)
	ret1, _ := ret[1].([]verifier.VerifierResult)
	return ret0, ret1
}

// VerifyExecutions indicates an expected call of VerifyExecutions.
func (mr *MockSchedulerMockRecorder) VerifyExecutions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyExecutions", reflect.TypeOf((*MockScheduler)(nil).VerifyExecutions), arg0, arg1)
}

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// CancelJob mocks base method.
func (m *MockQueue) CancelJob(arg0 context.Context, arg1 CancelJobRequest) (CancelJobResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJob", arg0, arg1)
	ret0, _ := ret[0].(CancelJobResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJob indicates an expected call of CancelJob.
func (mr *MockQueueMockRecorder) CancelJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJob", reflect.TypeOf((*MockQueue)(nil).CancelJob), arg0, arg1)
}

// EnqueueJob mocks base method.
func (m *MockQueue) EnqueueJob(arg0 context.Context, arg1 model.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueJob indicates an expected call of EnqueueJob.
func (mr *MockQueueMockRecorder) EnqueueJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueJob", reflect.TypeOf((*MockQueue)(nil).EnqueueJob), arg0, arg1)
}

// StartJob mocks base method.
func (m *MockQueue) StartJob(arg0 context.Context, arg1 StartJobRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartJob indicates an expected call of StartJob.
func (mr *MockQueueMockRecorder) StartJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob", reflect.TypeOf((*MockQueue)(nil).StartJob), arg0, arg1)
}

// VerifyExecutions mocks base method.
func (m *MockQueue) VerifyExecutions(arg0 context.Context, arg1 []verifier.VerifierResult) ([]verifier.VerifierResult, []verifier.VerifierResult) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyExecutions", arg0, arg1)
	ret0, _ := ret[0].([]verifier.VerifierResult)
	ret1, _ := ret[1].([]verifier.VerifierResult)
	return ret0, ret1
}

// VerifyExecutions indicates an expected call of VerifyExecutions.
func (mr *MockQueueMockRecorder) VerifyExecutions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyExecutions", reflect.TypeOf((*MockQueue)(nil).VerifyExecutions), arg0, arg1)
}

// MockNodeDiscoverer is a mock of NodeDiscoverer interface.
type MockNodeDiscoverer struct {
	ctrl     *gomock.Controller
	recorder *MockNodeDiscovererMockRecorder
}

// MockNodeDiscovererMockRecorder is the mock recorder for MockNodeDiscoverer.
type MockNodeDiscovererMockRecorder struct {
	mock *MockNodeDiscoverer
}

// NewMockNodeDiscoverer creates a new mock instance.
func NewMockNodeDiscoverer(ctrl *gomock.Controller) *MockNodeDiscoverer {
	mock := &MockNodeDiscoverer{ctrl: ctrl}
	mock.recorder = &MockNodeDiscovererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeDiscoverer) EXPECT() *MockNodeDiscovererMockRecorder {
	return m.recorder
}

// FindNodes mocks base method.
func (m *MockNodeDiscoverer) FindNodes(ctx context.Context, job model.Job) ([]model.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNodes", ctx, job)
	ret0, _ := ret[0].([]model.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNodes indicates an expected call of FindNodes.
func (mr *MockNodeDiscovererMockRecorder) FindNodes(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNodes", reflect.TypeOf((*MockNodeDiscoverer)(nil).FindNodes), ctx, job)
}

// ListNodes mocks base method.
func (m *MockNodeDiscoverer) ListNodes(ctx context.Context) ([]model.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodes", ctx)
	ret0, _ := ret[0].([]model.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockNodeDiscovererMockRecorder) ListNodes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockNodeDiscoverer)(nil).ListNodes), ctx)
}

// MockNodeRanker is a mock of NodeRanker interface.
type MockNodeRanker struct {
	ctrl     *gomock.Controller
	recorder *MockNodeRankerMockRecorder
}

// MockNodeRankerMockRecorder is the mock recorder for MockNodeRanker.
type MockNodeRankerMockRecorder struct {
	mock *MockNodeRanker
}

// NewMockNodeRanker creates a new mock instance.
func NewMockNodeRanker(ctrl *gomock.Controller) *MockNodeRanker {
	mock := &MockNodeRanker{ctrl: ctrl}
	mock.recorder = &MockNodeRankerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeRanker) EXPECT() *MockNodeRankerMockRecorder {
	return m.recorder
}

// RankNodes mocks base method.
func (m *MockNodeRanker) RankNodes(ctx context.Context, job model.Job, nodes []model.NodeInfo) ([]NodeRank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RankNodes", ctx, job, nodes)
	ret0, _ := ret[0].([]NodeRank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RankNodes indicates an expected call of RankNodes.
func (mr *MockNodeRankerMockRecorder) RankNodes(ctx, job, nodes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RankNodes", reflect.TypeOf((*MockNodeRanker)(nil).RankNodes), ctx, job, nodes)
}

// MockNodeSelector is a mock of NodeSelector interface.
type MockNodeSelector struct {
	ctrl     *gomock.Controller
	recorder *MockNodeSelectorMockRecorder
}

// MockNodeSelectorMockRecorder is the mock recorder for MockNodeSelector.
type MockNodeSelectorMockRecorder struct {
	mock *MockNodeSelector
}

// NewMockNodeSelector creates a new mock instance.
func NewMockNodeSelector(ctrl *gomock.Controller) *MockNodeSelector {
	mock := &MockNodeSelector{ctrl: ctrl}
	mock.recorder = &MockNodeSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeSelector) EXPECT() *MockNodeSelectorMockRecorder {
	return m.recorder
}

// CanCompleteJob mocks base method.
func (m *MockNodeSelector) CanCompleteJob(arg0 context.Context, arg1 *model.Job, arg2 *model.JobState) (bool, model.JobStateType) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanCompleteJob", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(model.JobStateType)
	return ret0, ret1
}

// CanCompleteJob indicates an expected call of CanCompleteJob.
func (mr *MockNodeSelectorMockRecorder) CanCompleteJob(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanCompleteJob", reflect.TypeOf((*MockNodeSelector)(nil).CanCompleteJob), arg0, arg1, arg2)
}

// CanVerifyJob mocks base method.
func (m *MockNodeSelector) CanVerifyJob(arg0 context.Context, arg1 *model.Job, arg2 *model.JobState) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanVerifyJob", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanVerifyJob indicates an expected call of CanVerifyJob.
func (mr *MockNodeSelectorMockRecorder) CanVerifyJob(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanVerifyJob", reflect.TypeOf((*MockNodeSelector)(nil).CanVerifyJob), arg0, arg1, arg2)
}

// SelectBids mocks base method.
func (m *MockNodeSelector) SelectBids(arg0 context.Context, arg1 *model.Job, arg2 *model.JobState) ([]model.ExecutionState, []model.ExecutionState) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectBids", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.ExecutionState)
	ret1, _ := ret[1].([]model.ExecutionState)
	return ret0, ret1
}

// SelectBids indicates an expected call of SelectBids.
func (mr *MockNodeSelectorMockRecorder) SelectBids(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectBids", reflect.TypeOf((*MockNodeSelector)(nil).SelectBids), arg0, arg1, arg2)
}

// SelectNodes mocks base method.
func (m *MockNodeSelector) SelectNodes(arg0 context.Context, arg1 *model.Job) ([]model.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectNodes", arg0, arg1)
	ret0, _ := ret[0].([]model.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectNodes indicates an expected call of SelectNodes.
func (mr *MockNodeSelectorMockRecorder) SelectNodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectNodes", reflect.TypeOf((*MockNodeSelector)(nil).SelectNodes), arg0, arg1)
}

// SelectNodesForRetry mocks base method.
func (m *MockNodeSelector) SelectNodesForRetry(arg0 context.Context, arg1 *model.Job, arg2 *model.JobState) ([]model.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectNodesForRetry", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectNodesForRetry indicates an expected call of SelectNodesForRetry.
func (mr *MockNodeSelectorMockRecorder) SelectNodesForRetry(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectNodesForRetry", reflect.TypeOf((*MockNodeSelector)(nil).SelectNodesForRetry), arg0, arg1, arg2)
}
