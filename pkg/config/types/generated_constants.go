// CODE GENERATED BY pkg/config/types/gen_paths DO NOT EDIT

package types

const Node = "node"
const NodeName = "node.name"
const NodeNameProvider = "node.nameprovider"
const NodeClientAPI = "node.clientapi"
const NodeClientAPIHost = "node.clientapi.host"
const NodeClientAPIPort = "node.clientapi.port"
const NodeClientAPIClientTLS = "node.clientapi.clienttls"
const NodeClientAPIClientTLSUseTLS = "node.clientapi.clienttls.usetls"
const NodeClientAPIClientTLSCACert = "node.clientapi.clienttls.cacert"
const NodeClientAPIClientTLSInsecure = "node.clientapi.clienttls.insecure"
const NodeClientAPITLS = "node.clientapi.tls"
const NodeClientAPITLSAutoCert = "node.clientapi.tls.autocert"
const NodeClientAPITLSAutoCertCachePath = "node.clientapi.tls.autocertcachepath"
const NodeClientAPITLSServerCertificate = "node.clientapi.tls.servercertificate"
const NodeClientAPITLSServerKey = "node.clientapi.tls.serverkey"
const NodeClientAPITLSSelfSigned = "node.clientapi.tls.selfsigned"
const NodeServerAPI = "node.serverapi"
const NodeServerAPIHost = "node.serverapi.host"
const NodeServerAPIPort = "node.serverapi.port"
const NodeServerAPIClientTLS = "node.serverapi.clienttls"
const NodeServerAPIClientTLSUseTLS = "node.serverapi.clienttls.usetls"
const NodeServerAPIClientTLSCACert = "node.serverapi.clienttls.cacert"
const NodeServerAPIClientTLSInsecure = "node.serverapi.clienttls.insecure"
const NodeServerAPITLS = "node.serverapi.tls"
const NodeServerAPITLSAutoCert = "node.serverapi.tls.autocert"
const NodeServerAPITLSAutoCertCachePath = "node.serverapi.tls.autocertcachepath"
const NodeServerAPITLSServerCertificate = "node.serverapi.tls.servercertificate"
const NodeServerAPITLSServerKey = "node.serverapi.tls.serverkey"
const NodeServerAPITLSSelfSigned = "node.serverapi.tls.selfsigned"
const NodeIPFS = "node.ipfs"
const NodeIPFSConnect = "node.ipfs.connect"
const NodeCompute = "node.compute"
const NodeComputeCapacity = "node.compute.capacity"
const NodeComputeCapacityIgnorePhysicalResourceLimits = "node.compute.capacity.ignorephysicalresourcelimits"
const NodeComputeCapacityTotalResourceLimits = "node.compute.capacity.totalresourcelimits"
const NodeComputeCapacityTotalResourceLimitsCPU = "node.compute.capacity.totalresourcelimits.cpu"
const NodeComputeCapacityTotalResourceLimitsMemory = "node.compute.capacity.totalresourcelimits.memory"
const NodeComputeCapacityTotalResourceLimitsDisk = "node.compute.capacity.totalresourcelimits.disk"
const NodeComputeCapacityTotalResourceLimitsGPU = "node.compute.capacity.totalresourcelimits.gpu"
const NodeComputeCapacityJobResourceLimits = "node.compute.capacity.jobresourcelimits"
const NodeComputeCapacityJobResourceLimitsCPU = "node.compute.capacity.jobresourcelimits.cpu"
const NodeComputeCapacityJobResourceLimitsMemory = "node.compute.capacity.jobresourcelimits.memory"
const NodeComputeCapacityJobResourceLimitsDisk = "node.compute.capacity.jobresourcelimits.disk"
const NodeComputeCapacityJobResourceLimitsGPU = "node.compute.capacity.jobresourcelimits.gpu"
const NodeComputeCapacityDefaultJobResourceLimits = "node.compute.capacity.defaultjobresourcelimits"
const NodeComputeCapacityDefaultJobResourceLimitsCPU = "node.compute.capacity.defaultjobresourcelimits.cpu"
const NodeComputeCapacityDefaultJobResourceLimitsMemory = "node.compute.capacity.defaultjobresourcelimits.memory"
const NodeComputeCapacityDefaultJobResourceLimitsDisk = "node.compute.capacity.defaultjobresourcelimits.disk"
const NodeComputeCapacityDefaultJobResourceLimitsGPU = "node.compute.capacity.defaultjobresourcelimits.gpu"
const NodeComputeExecutionStore = "node.compute.executionstore"
const NodeComputeExecutionStoreType = "node.compute.executionstore.type"
const NodeComputeExecutionStorePath = "node.compute.executionstore.path"
const NodeComputeJobTimeouts = "node.compute.jobtimeouts"
const NodeComputeJobTimeoutsJobExecutionTimeoutClientIDBypassList = "node.compute.jobtimeouts.jobexecutiontimeoutclientidbypasslist"
const NodeComputeJobTimeoutsJobNegotiationTimeout = "node.compute.jobtimeouts.jobnegotiationtimeout"
const NodeComputeJobTimeoutsMinJobExecutionTimeout = "node.compute.jobtimeouts.minjobexecutiontimeout"
const NodeComputeJobTimeoutsMaxJobExecutionTimeout = "node.compute.jobtimeouts.maxjobexecutiontimeout"
const NodeComputeJobTimeoutsDefaultJobExecutionTimeout = "node.compute.jobtimeouts.defaultjobexecutiontimeout"
const NodeComputeJobSelection = "node.compute.jobselection"
const NodeComputeJobSelectionLocality = "node.compute.jobselection.locality"
const NodeComputeJobSelectionRejectStatelessJobs = "node.compute.jobselection.rejectstatelessjobs"
const NodeComputeJobSelectionAcceptNetworkedJobs = "node.compute.jobselection.acceptnetworkedjobs"
const NodeComputeJobSelectionProbeHTTP = "node.compute.jobselection.probehttp"
const NodeComputeJobSelectionProbeExec = "node.compute.jobselection.probeexec"
const NodeComputeLogging = "node.compute.logging"
const NodeComputeLoggingLogRunningExecutionsInterval = "node.compute.logging.logrunningexecutionsinterval"
const NodeComputeManifestCache = "node.compute.manifestcache"
const NodeComputeManifestCacheSize = "node.compute.manifestcache.size"
const NodeComputeManifestCacheDuration = "node.compute.manifestcache.duration"
const NodeComputeManifestCacheFrequency = "node.compute.manifestcache.frequency"
const NodeComputeLogStreamConfig = "node.compute.logstreamconfig"
const NodeComputeLogStreamConfigChannelBufferSize = "node.compute.logstreamconfig.channelbuffersize"
const NodeComputeLocalPublisher = "node.compute.localpublisher"
const NodeComputeLocalPublisherAddress = "node.compute.localpublisher.address"
const NodeComputeLocalPublisherPort = "node.compute.localpublisher.port"
const NodeComputeLocalPublisherDirectory = "node.compute.localpublisher.directory"
const NodeComputeControlPlaneSettings = "node.compute.controlplanesettings"
const NodeComputeControlPlaneSettingsInfoUpdateFrequency = "node.compute.controlplanesettings.infoupdatefrequency"
const NodeComputeControlPlaneSettingsResourceUpdateFrequency = "node.compute.controlplanesettings.resourceupdatefrequency"
const NodeComputeControlPlaneSettingsHeartbeatFrequency = "node.compute.controlplanesettings.heartbeatfrequency"
const NodeComputeControlPlaneSettingsHeartbeatTopic = "node.compute.controlplanesettings.heartbeattopic"
const NodeRequester = "node.requester"
const NodeRequesterJobDefaults = "node.requester.jobdefaults"
const NodeRequesterJobDefaultsTotalTimeout = "node.requester.jobdefaults.totaltimeout"
const NodeRequesterJobDefaultsExecutionTimeout = "node.requester.jobdefaults.executiontimeout"
const NodeRequesterJobDefaultsQueueTimeout = "node.requester.jobdefaults.queuetimeout"
const NodeRequesterExternalVerifierHook = "node.requester.externalverifierhook"
const NodeRequesterJobSelectionPolicy = "node.requester.jobselectionpolicy"
const NodeRequesterJobSelectionPolicyLocality = "node.requester.jobselectionpolicy.locality"
const NodeRequesterJobSelectionPolicyRejectStatelessJobs = "node.requester.jobselectionpolicy.rejectstatelessjobs"
const NodeRequesterJobSelectionPolicyAcceptNetworkedJobs = "node.requester.jobselectionpolicy.acceptnetworkedjobs"
const NodeRequesterJobSelectionPolicyProbeHTTP = "node.requester.jobselectionpolicy.probehttp"
const NodeRequesterJobSelectionPolicyProbeExec = "node.requester.jobselectionpolicy.probeexec"
const NodeRequesterJobStore = "node.requester.jobstore"
const NodeRequesterJobStoreType = "node.requester.jobstore.type"
const NodeRequesterJobStorePath = "node.requester.jobstore.path"
const NodeRequesterHousekeepingBackgroundTaskInterval = "node.requester.housekeepingbackgroundtaskinterval"
const NodeRequesterNodeRankRandomnessRange = "node.requester.noderankrandomnessrange"
const NodeRequesterOverAskForBidsFactor = "node.requester.overaskforbidsfactor"
const NodeRequesterFailureInjectionConfig = "node.requester.failureinjectionconfig"
const NodeRequesterFailureInjectionConfigIsBadActor = "node.requester.failureinjectionconfig.isbadactor"
const NodeRequesterTranslationEnabled = "node.requester.translationenabled"
const NodeRequesterEvaluationBroker = "node.requester.evaluationbroker"
const NodeRequesterEvaluationBrokerEvalBrokerVisibilityTimeout = "node.requester.evaluationbroker.evalbrokervisibilitytimeout"
const NodeRequesterEvaluationBrokerEvalBrokerInitialRetryDelay = "node.requester.evaluationbroker.evalbrokerinitialretrydelay"
const NodeRequesterEvaluationBrokerEvalBrokerSubsequentRetryDelay = "node.requester.evaluationbroker.evalbrokersubsequentretrydelay"
const NodeRequesterEvaluationBrokerEvalBrokerMaxRetryCount = "node.requester.evaluationbroker.evalbrokermaxretrycount"
const NodeRequesterWorker = "node.requester.worker"
const NodeRequesterWorkerWorkerCount = "node.requester.worker.workercount"
const NodeRequesterWorkerWorkerEvalDequeueTimeout = "node.requester.worker.workerevaldequeuetimeout"
const NodeRequesterWorkerWorkerEvalDequeueBaseBackoff = "node.requester.worker.workerevaldequeuebasebackoff"
const NodeRequesterWorkerWorkerEvalDequeueMaxBackoff = "node.requester.worker.workerevaldequeuemaxbackoff"
const NodeRequesterScheduler = "node.requester.scheduler"
const NodeRequesterSchedulerQueueBackoff = "node.requester.scheduler.queuebackoff"
const NodeRequesterSchedulerNodeOverSubscriptionFactor = "node.requester.scheduler.nodeoversubscriptionfactor"
const NodeRequesterStorageProvider = "node.requester.storageprovider"
const NodeRequesterStorageProviderS3 = "node.requester.storageprovider.s3"
const NodeRequesterStorageProviderS3PreSignedURLDisabled = "node.requester.storageprovider.s3.presignedurldisabled"
const NodeRequesterStorageProviderS3PreSignedURLExpiration = "node.requester.storageprovider.s3.presignedurlexpiration"
const NodeRequesterTagCache = "node.requester.tagcache"
const NodeRequesterTagCacheSize = "node.requester.tagcache.size"
const NodeRequesterTagCacheDuration = "node.requester.tagcache.duration"
const NodeRequesterTagCacheFrequency = "node.requester.tagcache.frequency"
const NodeRequesterDefaultPublisher = "node.requester.defaultpublisher"
const NodeRequesterControlPlaneSettings = "node.requester.controlplanesettings"
const NodeRequesterControlPlaneSettingsHeartbeatCheckFrequency = "node.requester.controlplanesettings.heartbeatcheckfrequency"
const NodeRequesterControlPlaneSettingsHeartbeatTopic = "node.requester.controlplanesettings.heartbeattopic"
const NodeRequesterControlPlaneSettingsNodeDisconnectedAfter = "node.requester.controlplanesettings.nodedisconnectedafter"
const NodeRequesterNodeInfoStoreTTL = "node.requester.nodeinfostorettl"
const NodeRequesterManualNodeApproval = "node.requester.manualnodeapproval"
const NodeDownloadURLRequestRetries = "node.downloadurlrequestretries"
const NodeDownloadURLRequestTimeout = "node.downloadurlrequesttimeout"
const NodeVolumeSizeRequestTimeout = "node.volumesizerequesttimeout"
const NodeExecutorPluginPath = "node.executorpluginpath"
const NodeComputeStoragePath = "node.computestoragepath"
const NodeLoggingMode = "node.loggingmode"
const NodeType = "node.type"
const NodeAllowListedLocalPaths = "node.allowlistedlocalpaths"
const NodeDisabledFeatures = "node.disabledfeatures"
const NodeDisabledFeaturesEngines = "node.disabledfeatures.engines"
const NodeDisabledFeaturesPublishers = "node.disabledfeatures.publishers"
const NodeDisabledFeaturesStorages = "node.disabledfeatures.storages"
const NodeLabels = "node.labels"
const NodeWebUI = "node.webui"
const NodeWebUIEnabled = "node.webui.enabled"
const NodeWebUIPort = "node.webui.port"
const NodeNetwork = "node.network"
const NodeNetworkPort = "node.network.port"
const NodeNetworkAdvertisedAddress = "node.network.advertisedaddress"
const NodeNetworkAuthSecret = "node.network.authsecret"
const NodeNetworkOrchestrators = "node.network.orchestrators"
const NodeNetworkStoreDir = "node.network.storedir"
const NodeNetworkCluster = "node.network.cluster"
const NodeNetworkClusterName = "node.network.cluster.name"
const NodeNetworkClusterPort = "node.network.cluster.port"
const NodeNetworkClusterAdvertisedAddress = "node.network.cluster.advertisedaddress"
const NodeNetworkClusterPeers = "node.network.cluster.peers"
const NodeStrictVersionMatch = "node.strictversionmatch"
const User = "user"
const UserKeyPath = "user.keypath"
const UserInstallationID = "user.installationid"
const Metrics = "metrics"
const MetricsEventTracerPath = "metrics.eventtracerpath"
const Update = "update"
const UpdateSkipChecks = "update.skipchecks"
const UpdateCheckFrequency = "update.checkfrequency"
const Auth = "auth"
const AuthTokensPath = "auth.tokenspath"
const AuthMethods = "auth.methods"
const AuthAccessPolicyPath = "auth.accesspolicypath"
