# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
  linux:
    machine:
      image: ubuntu-2204:2022.07.1
      resource_class: xlarge
  darwin:
    macos:
      xcode: 13.4.1
    resource_class: large
  windows:
    machine:
      image: windows-server-2022-gui:current
      resource_class: windows.xlarge
      shell: bash.exe

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    parallelism: 1
    environment:
      GOVER: 1.18.3
      IPFS_VERSION: v0.12.2
      GOPROXY: https://proxy.golang.org
      GOOS: << parameters.target_os >>
      GOARCH: << parameters.target_arch >>
      GCS_TEST_RESULTS_BUCKET: bacalhau-global-storage/test-results
    working_directory: ~/repo
    executor: << parameters.target_os >>
    parameters:
      target_arch:
        type: string
      target_os:
        type: string
      run_tests:
        type: boolean
    steps:
      - checkout

      - when:
          condition:
            equal: ["windows", << parameters.target_os >>]
          steps:
            - run:
                name: Install GNU Make
                command: |
                  choco install -y make
                shell: powershell.exe
            - run:
                name: Downgrade Golang
                command: |
                  choco install golang -y --allow-downgrade --version $Env:GOVER
                shell: powershell.exe

      - when:
          condition:
            equal: ["darwin", << parameters.target_os >>]
          steps:
            - run:
                name: Install golang
                environment:
                  HOMEBREW_NO_AUTO_UPDATE: 1
                command: |
                  export BREW_GO_VERSION=$(echo $GOVER | grep -Eo '^\d\.\d+')
                  brew install go@$BREW_GO_VERSION
                  echo "export PATH='/usr/local/opt/go@$BREW_GO_VERSION/bin:$PATH'" >> ~/.bash_profile

      - run:
          name: Install IPFS
          command: |
            echo "Installing IPFS_VERSION: $IPFS_VERSION"
            export IPFS_BUILD="$GOOS-$GOARCH"
            if [ "${GOOS}" = "windows" ]; then export IPFS_EXT=zip; fi
            if [ "${GOOS}" = "windows" ]; then export EXEC=bash; fi
            curl -s -L -O "https://dist.ipfs.tech/go-ipfs/${IPFS_VERSION}/go-ipfs_${IPFS_VERSION}_${IPFS_BUILD}.${IPFS_EXT:-tar.gz}"
            tar -xvzf "go-ipfs_${IPFS_VERSION}_${IPFS_BUILD}.${IPFS_EXT:-tar.gz}"
            ${EXEC:-sudo bash} ./go-ipfs/install.sh

      - run:
          name: Init tools
          command: |
            make init

      - run:
          name: Install Pre-commit
          command: |
            make install-pre-commit

      - run:
          name: Cache Precommit
          command: |
            cp .pre-commit-config.yaml pre-commit-cache-key.txt
            poetry run python --version --version >> pre-commit-cache-key.txt

      - restore_cache:
          keys:
            - v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}

      - run:
          name: Build
          command: make build-ci

      - when:
          condition:
            and:
              - equal: ["amd64", << parameters.target_arch >>]
              - equal: [true, << parameters.run_tests >>]
          steps:
            - run:
                name: Test
                command: |
                  export GOBIN=${HOME}/bin
                  export PATH=$GOBIN:$PATH
                  go install gotest.tools/gotestsum@latest
                  LOG_LEVEL=debug make test-and-report
                no_output_timeout: 20m

      - when:
          condition:
            and:
              - equal: ["linux", << parameters.target_os >>]
              - equal: ["amd64", << parameters.target_arch >>]
              - equal: [true, << parameters.run_tests >>]
          steps:
            - run:
                name: Upload results
                command: |
                  export DEBIAN_FRONTEND=noninteractive
                  sudo apt install python3.10 -y
                  python3 -m pip install --upgrade pip
                  pip3 install gsutil
                  export SHA="<< pipeline.git.revision >>"
                  export DATETIME="$(date -u +"%FT%H%MZ")"
                  if [ "<<pipeline.git.tag>>" != "" ]; then
                    export TEST_RESULTS_FILENAME="<<pipeline.git.tag>>-$DATETIME-$SHA.xml"
                  else
                    export TEST_RESULTS_FILENAME="<<pipeline.git.branch>>-$DATETIME-$SHA.xml"
                  fi
                  # Credentials for project: bacalhau-cicd
                  # Account:
                  echo "$GOOGLE_CLOUD_STORAGE_BACALHAU_CICD_RW" | base64 --decode > ~/.boto
                  mv unittests.xml "${TEST_RESULTS_FILENAME}"
                  gsutil cp "$TEST_RESULTS_FILENAME" "gs://$GCS_TEST_RESULTS_BUCKET"

      - run:
          name: Build tarball
          command: |
            echo "$PRIVATE_PEM_B64" | base64 --decode > /tmp/private.pem
            echo "$PUBLIC_PEM_B64" | base64 --decode > /tmp/public.pem
            export PRIVATE_KEY_PASSPHRASE="$(echo $PRIVATE_KEY_PASSPHRASE_B64 | base64 --decode)"
            rm dist/.keep           # Need to remove this file so it's not persisted to github
            make build-bacalhau-tgz

      - persist_to_workspace:
          root: dist/
          paths:
            - "*.tar.gz"
            - "*.sha256"

      - store_artifacts:
          path: dist/

      - save_cache:
          key: v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}
          paths:
            - ~/.cache/pre-commit

  lint:
    parallelism: 1
    environment:
      GOVER: 1.18.3
      GOLANGCILINT: v1.49.0
      GOPROXY: https://proxy.golang.org
    working_directory: ~/repo
    executor: linux
    steps:
      - checkout

      - run:
          name: Install golangci-lint
          command: |
            echo "Installing GOLANGCILINT: ${GOLANGCILINT}"
            # binary will be /usr/local/go/bin/bin/golangci-lint
            # For some reason, .circlerc (I don't know where this file is generated) reports `go env GOPATH` as '/home/circleci/.go_workspace:/usr/local/go_workspace' (with the colon)
            # This breaks normal pathing. So just installing in ./bin/
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | BINDIR=${HOME}/bin sh -s ${GOLANGCILINT}
            golangci-lint version

      - run:
          name: Run linter
          command: |
            make lint

      - run:
          name: Run go mod tidy check diff
          command: make modtidy check-diff

  # deploy:
  #   docker:
  #     - image: google/cloud-sdk:392.0.0
  #   parameters:
  #     rollout_stage:
  #       type: string
  #     GOOGLE_APPLICATION_CREDENTIALS_VARIABLE:
  #       type: string
  #   environment:
  #     GCLOUD_VERSION: 392.0.0
  #     TERRAFORM_VERSION: 1.2.4
  #     GOOGLE_APPLICATION_CREDENTIALS: "/tmp/GOOGLE_APPLICATION_CREDENTIALS.json"
  #   steps:
  #     - checkout
  #     - run:
  #         name: Setup GCloud
  #         command: |
  #           # Create service account and get credentials here
  #           # https://console.cloud.google.com/iam-admin/serviceaccounts?authuser=1&project=bacalhau-development
  #           echo "$<< parameters.GOOGLE_APPLICATION_CREDENTIALS_VARIABLE >>" | base64 --decode > $GOOGLE_APPLICATION_CREDENTIALS
  #           echo "Using GCloud: $GCLOUD_VERSION"

  #     - run:
  #         name: Authenticate to Google Cloud
  #         command: |
  #           gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS

  #     - run:
  #         name: Install terraform
  #         command: |
  #           echo "Insalling Terraform: $TERRAFORM_VERSION"
  #           apt-get install -y software-properties-common
  #           curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
  #           apt-add-repository -y "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
  #           apt-get -y update && apt-get -y install terraform=$TERRAFORM_VERSION

  #     - run:
  #         name: Deploy cluster
  #         command: |
  #           cd ops/terraform && terraform init && \
  #                               terraform workspace select << parameters.rollout_stage >> && \
  #                               terraform apply -auto-approve --var-file=<< parameters.rollout_stage >>.tfvars

  performance_job:
    resource_class: filecoin-project/self-hosted-bacalhau
    machine: true
    parallelism: 1
    environment:
      GCS_PERF_RESULTS_BUCKET: gs://bacalhau-global-storage/perf-results
    steps:
      - checkout
      - run:
          name: Run Perf and Upload Results
          command: |
            export PATH="$HOME/.local/bin:${PATH}"
            export SHA="<< pipeline.git.revision >>"
            export DATETIME="$(date -u +"%FT%H%MZ")"
            export BRANCH="<<pipeline.git.branch>>"
            if [ "<<pipeline.git.tag>>" != "" ]; then
              export TAG="<<pipeline.git.tag>>"
            else
              export TAG="v0.0.0-xxxxxxx"
            fi
            sudo dpkg --configure -a
            sudo apt install python3.10 python3-pip build-essential -y
            pip3 install gsutil
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs  | sh -s -- -y
            source $HOME/.cargo/env
            cargo install hyperfine
            echo "$GOOGLE_CLOUD_STORAGE_BACALHAU_CICD_RW" | base64 --decode > ~/.boto
            (
              cd benchmark
              bash start_and_run.sh
            )
            gsutil -m cp benchmark/results/* "${GCS_PERF_RESULTS_BUCKET}/${DATETIME}-${BRANCH}-${TAG}-${SHA}"
      - heroku/install
      - run:
          command: |
            # Updates dashboard data with latest from GCS
            heroku run build --app bacalhau-dashboards

  release:
    executor: linux
    steps:
      - checkout
      - attach_workspace:
          at: dist/
      - run:
          name: Install gh
          command: |
            wget https://github.com/cli/cli/releases/download/v2.14.7/gh_2.14.7_linux_amd64.deb
            sudo dpkg -i gh_2.14.7_linux_amd64.deb
            echo "$BACALHAU_RELEASE_TOKEN" | gh auth login --with-token
      - run:
          name: Uploading to Release - << pipeline.git.tag >>
          command: |
            TAG="<< pipeline.git.tag >>"
            echo "TAG = ${TAG}"
            find dist/
            gh release upload $TAG dist/*

  update_ops:
    executor: linux
    steps:
      - checkout
      - run:
          name: Install updatecli
          command: |
            wget https://github.com/updatecli/updatecli/releases/download/v0.33.3/updatecli_amd64.deb
            sudo dpkg -i updatecli_amd64.deb
      - run:
          name: Run
          command: |
            updatecli apply --config .circleci/dependency-ops.yaml

  update_metadata:
    executor: linux
    parameters:
      METADATA_BUCKET:
        type: string
      METADATA_FILENAME:
        type: string
    steps:
      - checkout
      - run:
          name: Update Metadata
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS="/tmp/UPDATE_METADATA_CREDENTIALS.json"
            echo "${UPDATE_METADATA_CREDENTIALS_CONTENT_B64}" | base64 --decode > "${GOOGLE_APPLICATION_CREDENTIALS}"
            cd ops
            pip3 install -r requirements.txt
            python3 update_metadata.py "<< parameters.METADATA_BUCKET >>" "<< parameters.METADATA_FILENAME >>"

orbs:
  heroku: circleci/heroku@1.2.6

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  lint:
    jobs:
      - lint:
          name: Run linters and static checkers
          filters:
            tags:
              ignore: /.*/

  dev_branches: # This workflow will run on all branches except 'main' and will not run on tags
    jobs:
      - build:
          name: build-<< matrix.target_os >>-<< matrix.target_arch >>
          matrix:
            parameters:
              target_os: ["linux", "darwin", "windows"]
              target_arch: ["amd64", "arm64"]
              run_tests: [true]
            exclude:
              - target_os: "windows"
                target_arch: "arm64"
                run_tests: true
          filters:
            &filters_dev_branches # this yaml anchor is setting these values to "filters_dev_branches"
            branches:
              ignore: main
            tags:
              ignore: /.*/
      - update_metadata:
          name: Update metadata for dev branch test runs
          METADATA_BUCKET: "bacalhau-global-storage"
          METADATA_FILENAME: "LAST-TEST-RUNS-METADATA-OBJECT"
          requires:
            - build-linux-amd64
      ## deploying to dev terraform cluster should not happen from non-main branch builds in CI
      ## See https://github.com/filecoin-project/bacalhau/issues/434
      # - deploy:
      #     name: deploy-development-cluster
      #     requires:
      #       - build-linux-amd64
      #     rollout_stage: development
      #     GOOGLE_APPLICATION_CREDENTIALS_VARIABLE: "GOOGLE_APPLICATION_DEVELOPMENT_CREDENTIALS_B64"
      #     filters:
      #       <<: *filters_dev_branches # this is calling the previously set yaml anchor

  main_only: # This workflow will only run on 'main' and will not run on tags
    jobs:
      - build:
          name: build-<< matrix.target_os >>-<< matrix.target_arch >>
          matrix:
            parameters:
              target_os: ["linux", "darwin", "windows"]
              target_arch: ["amd64", "arm64"]
              run_tests: [true]
            exclude:
              - target_os: "windows"
                target_arch: "arm64"
                run_tests: true
          filters:
            &filters_main_only # this yaml anchor is setting these values to "filters_main_only"
            branches:
              only: main
            tags:
              ignore: /.*/
      - update_metadata:
          name: Update metadata for main test runs
          requires:
            - build-linux-amd64
          METADATA_BUCKET: "bacalhau-global-storage"
          METADATA_FILENAME: "LAST-TEST-RUNS-METADATA-OBJECT"
      # - deploy:
      #     name: deploy-staging-cluster
      #     requires:
      #       - build-linux-amd64
      #     rollout_stage: staging
      #     GOOGLE_APPLICATION_CREDENTIALS_VARIABLE: "GOOGLE_APPLICATION_STAGING_CREDENTIALS_B64"
      #     filters:
      #       <<: *filters_main_only # this is calling the previously set yaml anchor
      - update_ops:
          name: update-terraform-files
          filters:
            <<: *filters_main_only
  tags_only: # This workflow will only run on tags (specifically starting with 'v.') and will not run on branches
    jobs:
      - build:
          name: build-<< matrix.target_os >>-<< matrix.target_arch >>
          matrix:
            parameters:
              target_os: ["linux", "darwin", "windows"]
              target_arch: ["amd64", "arm64"]
              run_tests: [false]
            exclude:
              - target_os: "windows"
                target_arch: "arm64"
                run_tests: false
          filters: &filters_tags_only
            branches:
              ignore: /.*/ # don't run on any branches - only tags
            tags:
              # only run on tags that look like release tags e.g. v0.1.2 or
              # v0.1.3alpha19 (actually v0.1.3anything...)
              only: /^v([0-9]+).([0-9]+).([0-9]+).*$/
      - release:
          name: release-all-binaries
          requires:
            - build
          filters:
            <<: *filters_tags_only
      - update_ops:
          name: update-terraform-files
          requires:
            - release-all-binaries
          filters:
            <<: *filters_tags_only
  performance: # This workflow will run on all branches except 'main' and will not run on tags
    jobs:
      - build:
          name: build-<< matrix.target_os >>-<< matrix.target_arch >>
          matrix:
            parameters:
              target_os: ["linux"]
              target_arch: ["amd64"]
              run_tests: [false]
      - performance_job:
          name: Running Performance
          requires:
            - build-linux-amd64
