set shell := ["sh", "-c"]
set allow-duplicate-recipes
set positional-arguments
set dotenv-load
set export

SWAGGER_JSON := "../../webui/public/swagger/swagger.json"
PYPI_VERSION := `python ../../scripts/get_current_version_for_builds.py --pep440`

install-deps:
	#!/usr/bin/env bash
	python3 -m pip install uv
	uv pip install -r requirements.txt

run-lint: install-deps
	#!/usr/bin/env bash
	ruff --config ruff.toml

run-format: install-deps
	#!/usr/bin/env bash
	ruff format .

run-tests: install-deps
	#!/usr/bin/env bash
	tox

run-test-local: ## run tests quickly with the default Python
	python3 setup.py test

make-docs: install-deps
	#!/usr/bin/env bash
	rm -f docs/bacalhau_airflow.rst
	rm -f docs/modules.rst
	sphinx-apidoc -o docs/ bacalhau_airflow
	make -C docs clean
	make -C docs html

servedocs: make-docs ## compile the docs watching for changes
	watchmedo shell-command -p '*.rst' -c '$(MAKE) -C docs html' -R -D .

dist: install-deps
	#!/usr/bin/env bash
	echo "Building version ${PYPI_VERSION}"

	# Clean all dist/ files
	rm -rf dist/

	python3 setup.py sdist
	python3 setup.py bdist_wheel

release: dist
	#!/usr/bin/env python
	import os
	import sys
	import subprocess

	def error(message):
		print(message, file=sys.stderr)
		sys.exit(1)

	RELEASE_PYTHON_PACKAGES = os.getenv('RELEASE_PYTHON_PACKAGES')
	REPOSITORY_URL = "" if RELEASE_PYTHON_PACKAGES == "1" else "https://test.pypi.org/legacy/"
	REPOSITORY_FLAG = f"--repository-url" if REPOSITORY_URL else ""
	print(f"Publishing to '{REPOSITORY_FLAG} {REPOSITORY_URL}' repository (empty means default)")

	TOKEN = os.getenv('PYPI_TOKEN') if RELEASE_PYTHON_PACKAGES == "1" else os.getenv('TEST_PYPI_TOKEN')
	if not TOKEN:
		error(f"TOKEN (RELEASE_PYTHON_PACKAGES={RELEASE_PYTHON_PACKAGES}) not found")

	subprocess.run([
		"python3", "-m", "twine", "upload",
		"--non-interactive",
		"--disable-progress-bar",
		"--skip-existing",
		"-u", "__token__", "-p", TOKEN,
		"--verbose",
		"dist/*",
		REPOSITORY_FLAG,
		REPOSITORY_URL
	], check=True)

	print(f"Package uploaded to {REPOSITORY_FLAG} {REPOSITORY_URL} repository. (empty means default)")

all: release

setup:
	pip3 install -r dev-requirements.txt

clean: clean-build clean-pyc clean-test ## remove all build, test, coverage and Python artifacts

clean-build: ## remove build artifacts
	rm -fr build/
	rm -fr dist/
	rm -fr .eggs/
	find . -name '*.egg-info' -exec rm -fr {} +
	find . -name '*.egg' -exec rm -f {} +

clean-pyc: ## remove Python file artifacts
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	find . -name '__pycache__' -exec rm -fr {} +

clean-test: ## remove test and coverage artifacts
	rm -fr .tox/
	rm -f .coverage
	rm -fr htmlcov/
	rm -fr .pytest_cache


install: clean ## install the package to the active Python's site-packages
	pip3 install .
