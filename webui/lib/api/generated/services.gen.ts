// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { HomeResponse, AgentAliveResponse, AgentConfigResponse, AgentDebugResponse, AgentNodeResponse, AgentVersionResponse, ApiServerDebugResponse, HealthzResponse, IdResponse, LivezResponse, NodeInfoResponse, OrchestratorListJobsData, OrchestratorListJobsResponse, OrchestratorPutJobData, OrchestratorPutJobResponse, OrchestratorGetJobData, OrchestratorGetJobResponse, OrchestratorStopJobData, OrchestratorStopJobResponse, OrchestratorJobExecutionsData, OrchestratorJobExecutionsResponse, OrchestratorJobHistoryData, OrchestratorJobHistoryResponse, OrchestratorLogsData, OrchestratorJobResultsData, OrchestratorJobResultsResponse, OrchestratorListNodesData, OrchestratorListNodesResponse, OrchestratorUpdateNodeData, OrchestratorUpdateNodeResponse, OrchestratorGetNodeData, OrchestratorGetNodeResponse, ApiServerVersionData, ApiServerVersionResponse } from './types.gen';

/**
 * @returns string OK
 * @throws ApiError
 */
export const home = (): CancelablePromise<HomeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/'
}); };

/**
 * @returns string OK
 * @throws ApiError
 */
export const agentAlive = (): CancelablePromise<AgentAliveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/agent/alive'
}); };

/**
 * Returns the current configuration of the node.
 * @returns types_BacalhauConfig OK
 * @throws ApiError
 */
export const agentConfig = (): CancelablePromise<AgentConfigResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/agent/config',
    errors: {
        500: 'Internal Server Error'
    }
}); };

/**
 * Returns debug information on what the current node is doing.
 * @returns models_DebugInfo OK
 * @throws ApiError
 */
export const agentDebug = (): CancelablePromise<AgentDebugResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/agent/debug',
    errors: {
        500: 'Internal Server Error'
    }
}); };

/**
 * Returns the info of the node.
 * @returns models_NodeInfo OK
 * @throws ApiError
 */
export const agentNode = (): CancelablePromise<AgentNodeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/agent/node',
    errors: {
        500: 'Internal Server Error'
    }
}); };

/**
 * Returns the build version running on the server.
 * See https://github.com/bacalhau-project/bacalhau/releases for a complete list of `gitversion` tags.
 * @returns apimodels_GetVersionResponse OK
 * @throws ApiError
 */
export const agentVersion = (): CancelablePromise<AgentVersionResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/agent/version',
    errors: {
        500: 'Internal Server Error'
    }
}); };

/**
 * Returns debug information on what the current node is doing.
 * @returns string OK
 * @throws ApiError
 */
export const apiServerDebug = (): CancelablePromise<ApiServerDebugResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/compute/debug',
    errors: {
        500: 'Internal Server Error'
    }
}); };

/**
 * @returns types_HealthInfo OK
 * @throws ApiError
 */
export const healthz = (): CancelablePromise<HealthzResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/healthz'
}); };

/**
 * Returns the id of the host node.
 * @returns string OK
 * @throws ApiError
 */
export const id = (): CancelablePromise<IdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/id',
    errors: {
        500: 'Internal Server Error'
    }
}); };

/**
 * @returns string TODO
 * @throws ApiError
 */
export const livez = (): CancelablePromise<LivezResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/livez'
}); };

/**
 * Returns the info of the node.
 * @returns models_NodeInfo OK
 * @throws ApiError
 */
export const nodeInfo = (): CancelablePromise<NodeInfoResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/node_info',
    errors: {
        500: 'Internal Server Error'
    }
}); };

/**
 * Returns a list of jobs.
 * Returns a list of jobs.
 * @param data The data for the request.
 * @param data.namespace Namespace to get the jobs for
 * @param data.limit Limit the number of jobs returned
 * @param data.nextToken Token to get the next page of jobs
 * @param data.reverse Reverse the order of the jobs
 * @param data.orderBy Order the jobs by the given field
 * @returns apimodels_ListJobsResponse OK
 * @throws ApiError
 */
export const orchestratorListJobs = (data: OrchestratorListJobsData = {}): CancelablePromise<OrchestratorListJobsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/orchestrator/jobs',
    query: {
        namespace: data.namespace,
        limit: data.limit,
        next_token: data.nextToken,
        reverse: data.reverse,
        order_by: data.orderBy
    },
    errors: {
        400: 'Bad Request',
        500: 'Internal Server Error'
    }
}); };

/**
 * Submits a job to the orchestrator.
 * Submits a job to the orchestrator.
 * @param data The data for the request.
 * @param data.putJobRequest Job to submit
 * @returns apimodels_PutJobResponse OK
 * @throws ApiError
 */
export const orchestratorPutJob = (data: OrchestratorPutJobData): CancelablePromise<OrchestratorPutJobResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/v1/orchestrator/jobs',
    body: data.putJobRequest,
    errors: {
        400: 'Bad Request',
        500: 'Internal Server Error'
    }
}); };

/**
 * Returns a job.
 * Returns a job.
 * @param data The data for the request.
 * @param data.id ID to get the job for
 * @param data.include Takes history and executions as options. If empty will not include anything else.
 * @param data.limit Number of history or executions to fetch. Should be used in conjugation with include
 * @returns apimodels_GetJobResponse OK
 * @throws ApiError
 */
export const orchestratorGetJob = (data: OrchestratorGetJobData): CancelablePromise<OrchestratorGetJobResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/orchestrator/jobs/{id}',
    path: {
        id: data.id
    },
    query: {
        include: data.include,
        limit: data.limit
    },
    errors: {
        400: 'Bad Request',
        500: 'Internal Server Error'
    }
}); };

/**
 * Stops a job.
 * Stops a job.
 * @param data The data for the request.
 * @param data.id ID to stop the job for
 * @param data.reason Reason for stopping the job
 * @returns apimodels_StopJobResponse OK
 * @throws ApiError
 */
export const orchestratorStopJob = (data: OrchestratorStopJobData): CancelablePromise<OrchestratorStopJobResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/orchestrator/jobs/{id}',
    path: {
        id: data.id
    },
    query: {
        reason: data.reason
    },
    errors: {
        400: 'Bad Request',
        500: 'Internal Server Error'
    }
}); };

/**
 * Returns the executions of a job.
 * Returns the executions of a job.
 * @param data The data for the request.
 * @param data.id ID to get the job executions for
 * @param data.orderBy Order the executions by the given field
 * @param data.namespace Namespace to get the jobs for
 * @param data.limit Limit the number of executions returned
 * @param data.nextToken Token to get the next page of executions
 * @param data.reverse Reverse the order of the executions
 * @returns apimodels_ListJobExecutionsResponse OK
 * @throws ApiError
 */
export const orchestratorJobExecutions = (data: OrchestratorJobExecutionsData): CancelablePromise<OrchestratorJobExecutionsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/orchestrator/jobs/{id}/executions',
    path: {
        id: data.id
    },
    query: {
        namespace: data.namespace,
        limit: data.limit,
        next_token: data.nextToken,
        reverse: data.reverse,
        order_by: data.orderBy
    },
    errors: {
        400: 'Bad Request',
        500: 'Internal Server Error'
    }
}); };

/**
 * Returns the history of a job.
 * Returns the history of a job.
 * @param data The data for the request.
 * @param data.id ID to get the job history for
 * @param data.since Only return history since this time
 * @param data.eventType Only return history of this event type
 * @param data.executionId Only return history of this execution ID
 * @param data.nextToken Token to get the next page of the jobs
 * @returns apimodels_ListJobHistoryResponse OK
 * @throws ApiError
 */
export const orchestratorJobHistory = (data: OrchestratorJobHistoryData): CancelablePromise<OrchestratorJobHistoryResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/orchestrator/jobs/{id}/history',
    path: {
        id: data.id
    },
    query: {
        since: data.since,
        event_type: data.eventType,
        execution_id: data.executionId,
        next_token: data.nextToken
    },
    errors: {
        400: 'Bad Request',
        500: 'Internal Server Error'
    }
}); };

/**
 * Streams the logs for a current job/execution via WebSocket
 * Establishes a WebSocket connection to stream output from the job specified by `id`
 * The stream will continue until either the client disconnects or the execution completes
 * @param data The data for the request.
 * @param data.id ID of the job to stream logs for
 * @param data.executionId Fetch logs for a specific execution
 * @param data.tail Fetch historical logs
 * @param data.follow Follow the logs
 * @throws ApiError
 */
export const orchestratorLogs = (data: OrchestratorLogsData): CancelablePromise<void> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/orchestrator/jobs/{id}/logs',
    path: {
        id: data.id
    },
    query: {
        execution_id: data.executionId,
        tail: data.tail,
        follow: data.follow
    },
    errors: {
        400: 'Bad Request',
        500: 'Internal Server Error'
    }
}); };

/**
 * Returns the results of a job.
 * Returns the results of a job.
 * @param data The data for the request.
 * @param data.id ID to get the job results for
 * @returns apimodels_ListJobResultsResponse OK
 * @throws ApiError
 */
export const orchestratorJobResults = (data: OrchestratorJobResultsData): CancelablePromise<OrchestratorJobResultsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/orchestrator/jobs/{id}/results',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        500: 'Internal Server Error'
    }
}); };

/**
 * Returns a list of orchestrator nodes.
 * Returns a list of orchestrator nodes.
 * @param data The data for the request.
 * @param data.limit Limit the number of node returned
 * @param data.nextToken Token to get the next page of nodes
 * @param data.reverse Reverse the order of the nodes
 * @param data.orderBy Order the nodes by given field
 * @param data.filterApproval Filter Approval
 * @param data.filterStatus Filter Status
 * @returns apimodels_ListNodesResponse OK
 * @throws ApiError
 */
export const orchestratorListNodes = (data: OrchestratorListNodesData = {}): CancelablePromise<OrchestratorListNodesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/orchestrator/nodes',
    query: {
        limit: data.limit,
        next_token: data.nextToken,
        reverse: data.reverse,
        order_by: data.orderBy,
        filter_approval: data.filterApproval,
        'filter-status': data.filterStatus
    },
    errors: {
        400: 'Bad Request',
        500: 'Internal Server Error'
    }
}); };

/**
 * Update an orchestrator node.
 * Update an orchestrator node.
 * @param data The data for the request.
 * @param data.id ID of the orchestrator node.
 * @param data.putNodeRequest Put Node Request
 * @returns apimodels_PutNodeResponse OK
 * @throws ApiError
 */
export const orchestratorUpdateNode = (data: OrchestratorUpdateNodeData): CancelablePromise<OrchestratorUpdateNodeResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/orchestrator/nodes',
    path: {
        id: data.id
    },
    body: data.putNodeRequest,
    errors: {
        400: 'Bad Request',
        500: 'Internal Server Error'
    }
}); };

/**
 * Get an orchestrator node
 * Get an orchestrator node
 * @param data The data for the request.
 * @param data.id ID of the orchestrator node to fetch for.
 * @returns apimodels_GetNodeResponse OK
 * @throws ApiError
 */
export const orchestratorGetNode = (data: OrchestratorGetNodeData): CancelablePromise<OrchestratorGetNodeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/orchestrator/nodes/{id}',
    path: {
        id: data.id
    },
    errors: {
        400: 'Bad Request',
        404: 'Not Found',
        500: 'Internal Server Error'
    }
}); };

/**
 * Returns the build version running on the server.
 * See https://github.com/bacalhau-project/bacalhau/releases for a complete list of `gitversion` tags.
 * @param data The data for the request.
 * @param data.versionRequest Request must specify a `client_id`. To retrieve your `client_id`, you can do the following: (1) submit a dummy job to Bacalhau (or use one you created before), (2) run `bacalhau describe <job-id>` and fetch the `ClientID` field.
 * @returns shared_VersionResponse OK
 * @throws ApiError
 */
export const apiServerVersion = (data: ApiServerVersionData): CancelablePromise<ApiServerVersionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/version',
    body: data.versionRequest,
    errors: {
        400: 'Bad Request',
        500: 'Internal Server Error'
    }
}); };